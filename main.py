import ccxt
import asyncio
import aiohttp
from telegram import Bot, Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
    ConversationHandler
)
from telegram.error import TelegramError
import logging
from datetime import datetime, timezone, timedelta
import html
import json
import os
import time

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = "7990034184:AAFTx--E5GE0NIPA0Yghr6KpBC80aVtSACs"
TELEGRAM_CHAT_IDS = ["1167694150", "7916502470", "5381553894", "1111230981"]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger("DexMexcBot")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
SHARED_BOT = None
MEXC_FUTURES = None
DEXSCREENER_CACHE = {}
LAST_UPDATE_TIME = None

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
SETTINGS = {
    "THRESHOLD_PERCENT": 5.0,
    "MIN_VOLUME_USD": 100000,
    "CHECK_INTERVAL": 30,
    "MAX_RESULTS": 20,
    "AUTO_CHECK": True
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SET_THRESHOLD, SET_VOLUME, SET_INTERVAL, SET_MAX_RESULTS = range(4)

def get_main_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    return ReplyKeyboardMarkup([
        [KeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞—Ä–±–∏—Ç—Ä–∞–∂"), KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
        [KeyboardButton("üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞"), KeyboardButton("üîÑ –ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞: " + ("–í–ö–õ" if SETTINGS['AUTO_CHECK'] else "–í–´–ö–õ"))],
        [KeyboardButton("‚ùì –ü–æ–º–æ—â—å")]
    ], resize_keyboard=True)

def get_settings_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    return ReplyKeyboardMarkup([
        [KeyboardButton(f"üìä –ü–æ—Ä–æ–≥: {SETTINGS['THRESHOLD_PERCENT']}%"), 
         KeyboardButton(f"üíé –û–±—ä–µ–º: ${SETTINGS['MIN_VOLUME_USD']/1000:.0f}K")],
        [KeyboardButton(f"‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª: {SETTINGS['CHECK_INTERVAL']}—Å"), 
         KeyboardButton(f"üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {SETTINGS['MAX_RESULTS']}")],
        [KeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ], resize_keyboard=True)

async def send_telegram_message(message: str, chat_id: str = None, reply_markup: ReplyKeyboardMarkup = None):
    global SHARED_BOT
    if not SHARED_BOT:
        SHARED_BOT = Bot(token=TELEGRAM_TOKEN)

    targets = [chat_id] if chat_id else TELEGRAM_CHAT_IDS

    for target_id in targets:
        try:
            await SHARED_BOT.send_message(
                chat_id=target_id,
                text=message,
                parse_mode="HTML",
                disable_web_page_preview=True,
                reply_markup=reply_markup
            )
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {target_id}")
        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ {target_id}: {e}")

async def init_mexc_futures():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MEXC —Ñ—å—é—á–µ—Ä—Å–æ–≤"""
    global MEXC_FUTURES
    try:
        MEXC_FUTURES = ccxt.mexc({
            'enableRateLimit': True,
            'options': {
                'defaultType': 'future'
            }
        })
        await asyncio.get_event_loop().run_in_executor(None, MEXC_FUTURES.load_markets)
        logger.info("MEXC Futures —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MEXC Futures: {e}")
        return False

async def fetch_dexscreener_pairs():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä —Å DEXScreener - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è"""
    try:
        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ DEXScreener
        urls = [
            "https://api.dexscreener.com/latest/dex/pairs?limit=100",
            "https://api.dexscreener.com/latest/dex/tokens?limit=100",
            "https://api.dexscreener.com/latest/dex/search?q=USDT&limit=100"
        ]
        
        all_pairs = []
        
        for url in urls:
            try:
                async with aiohttp.ClientSession() as session:
                    async with session.get(url, timeout=15) as response:
                        if response.status == 200:
                            data = await response.json()
                            
                            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
                            if 'pairs' in data:
                                pairs = data['pairs']
                            elif 'tokens' in data:
                                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–æ–∫–µ–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç –ø–∞—Ä
                                tokens = data['tokens']
                                pairs = []
                                for token in tokens:
                                    if 'pairs' in token:
                                        pairs.extend(token['pairs'])
                            else:
                                pairs = data if isinstance(data, list) else []
                            
                            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–∞—Ä—ã —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –æ–±—ä–µ–º–æ–º –∏ —Ü–µ–Ω–æ–π
                            filtered_pairs = [
                                pair for pair in pairs 
                                if pair and 
                                pair.get('priceUsd') and 
                                float(pair.get('priceUsd', 0)) > 0 and
                                float(pair.get('volume', {}).get('h24', 0)) >= SETTINGS['MIN_VOLUME_USD']
                            ]
                            
                            all_pairs.extend(filtered_pairs)
                            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(filtered_pairs)} –ø–∞—Ä —Å {url}")
                            
                            # –î–µ–ª–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                            await asyncio.sleep(1)
                            
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ {url}: {e}")
                continue
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ pairAddress
        unique_pairs = {}
        for pair in all_pairs:
            pair_address = pair.get('pairAddress')
            if pair_address and pair_address not in unique_pairs:
                unique_pairs[pair_address] = pair
        
        final_pairs = list(unique_pairs.values())
        logger.info(f"–í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–∞—Ä –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {len(final_pairs)}")
        
        return final_pairs
        
    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å DEXScreener: {e}")
        return []

async def fetch_mexc_futures_prices():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω —Ñ—å—é—á–µ—Ä—Å–æ–≤ —Å MEXC"""
    try:
        if not MEXC_FUTURES:
            if not await init_mexc_futures():
                return {}

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ USDT –ø–∞—Ä—ã
        symbols = [symbol for symbol in MEXC_FUTURES.symbols if symbol.endswith('/USDT:USDT')]
        prices = {}
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        symbols = symbols[:50]
        
        for symbol in symbols:
            try:
                ticker = await asyncio.get_event_loop().run_in_executor(
                    None, MEXC_FUTURES.fetch_ticker, symbol
                )
                if ticker and ticker.get('last'):
                    base_currency = symbol.replace('/USDT:USDT', '').replace('/', '')
                    prices[base_currency] = {
                        'price': float(ticker['last']),
                        'volume': float(ticker.get('baseVolume', 0)) * float(ticker['last']),
                        'symbol': symbol
                    }
            except Exception as e:
                logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è {symbol}: {e}")
                continue

        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(prices)} —Ü–µ–Ω —Ñ—å—é—á–µ—Ä—Å–æ–≤ —Å MEXC")
        return prices
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω MEXC Futures: {e}")
        return {}

def normalize_symbol(symbol):
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    if not symbol:
        return ""
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    symbol = symbol.upper().replace('-', '').replace('_', '').replace(' ', '')
    
    # –£–±–∏—Ä–∞–µ–º —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å—É—Ñ—Ñ–∏–∫—Å—ã
    for suffix in ['W', 'V2', 'V3', 'TOKEN', 'COIN']:
        if symbol.endswith(suffix):
            symbol = symbol[:-len(suffix)]
    
    return symbol

def find_price_differences(dex_pairs, mexc_prices):
    """–ü–æ–∏—Å–∫ —Ä–∞–∑–Ω–∏—Ü—ã —Ü–µ–Ω –º–µ–∂–¥—É DEX –∏ MEXC Futures"""
    opportunities = []
    
    for dex_pair in dex_pairs:
        try:
            dex_price = float(dex_pair.get('priceUsd', 0))
            base_token = dex_pair.get('baseToken', {})
            base_symbol = base_token.get('symbol', '')
            
            if not dex_price or dex_price <= 0:
                continue
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–∏–º–≤–æ–ª –¥–ª—è –ø–æ–∏—Å–∫–∞
            normalized_symbol = normalize_symbol(base_symbol)
            
            # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ—å—é—á–µ—Ä—Å –Ω–∞ MEXC
            matched_symbol = None
            for mexc_symbol in mexc_prices.keys():
                if normalize_symbol(mexc_symbol) == normalized_symbol:
                    matched_symbol = mexc_symbol
                    break
            
            if matched_symbol and matched_symbol in mexc_prices:
                mexc_data = mexc_prices[matched_symbol]
                mexc_price = mexc_data['price']
                
                if mexc_price <= 0:
                    continue
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
                price_diff = ((mexc_price - dex_price) / dex_price) * 100
                abs_diff = abs(price_diff)
                
                if abs_diff >= SETTINGS['THRESHOLD_PERCENT']:
                    dex_volume = float(dex_pair.get('volume', {}).get('h24', 0))
                    mexc_volume = mexc_data['volume']
                    
                    opportunities.append({
                        'symbol': base_symbol,
                        'normalized_symbol': normalized_symbol,
                        'dex_price': dex_price,
                        'mexc_price': mexc_price,
                        'price_diff': price_diff,
                        'abs_diff': abs_diff,
                        'dex_volume': dex_volume,
                        'mexc_volume': mexc_volume,
                        'dex_url': dex_pair.get('url', f"https://dexscreener.com/{dex_pair.get('chainId', 'ethereum')}/{dex_pair.get('pairAddress', '')}"),
                        'mexc_symbol': mexc_data['symbol'],
                        'mexc_url': f"https://futures.mexc.com/exchange/{matched_symbol}_USDT"
                    })
                    
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä—ã {dex_pair.get('pairAddress')}: {e}")
            continue
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ–π —Ä–∞–∑–Ω–∏—Ü–µ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
    opportunities.sort(key=lambda x: x['abs_diff'], reverse=True)
    return opportunities[:SETTINGS['MAX_RESULTS']]

async def check_price_differences():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–Ω–∏—Ü—ã —Ü–µ–Ω"""
    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–Ω–∏—Ü—ã —Ü–µ–Ω DEX vs MEXC Futures")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å DEXScreener
        dex_pairs = await fetch_dexscreener_pairs()
        if not dex_pairs:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å DEXScreener")
            await send_telegram_message(
                "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å DEXScreener</b>\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
                "‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É\n"
                "‚Ä¢ –†–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å DEXScreener API\n"
                "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞",
                reply_markup=get_main_keyboard()
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã —Ñ—å—é—á–µ—Ä—Å–æ–≤ —Å MEXC
        mexc_prices = await fetch_mexc_futures_prices()
        if not mexc_prices:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã —Å MEXC Futures")
            await send_telegram_message(
                "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã —Å MEXC Futures</b>\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
                "‚Ä¢ –î–æ—Å—Ç—É–ø –∫ MEXC\n"
                "‚Ä¢ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∏—Ä–∂–µ–π\n"
                "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API",
                reply_markup=get_main_keyboard()
            )
            return
        
        # –ù–∞—Ö–æ–¥–∏–º —Ä–∞–∑–ª–∏—á–∏—è –≤ —Ü–µ–Ω–∞—Ö
        opportunities = find_price_differences(dex_pairs, mexc_prices)
        
        if opportunities:
            await send_opportunities_message(opportunities)
        else:
            logger.info("–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            await send_telegram_message(
                "‚ÑπÔ∏è <b>–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>\n\n"
                f"–ü–æ—Ä–æ–≥: {SETTINGS['THRESHOLD_PERCENT']}%\n"
                f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º: ${SETTINGS['MIN_VOLUME_USD']:,.0f}\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–º–µ–Ω—å—à–∏—Ç—å –ø–æ—Ä–æ–≥ –∏–ª–∏ —É–≤–µ–ª–∏—á–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏.",
                reply_markup=get_main_keyboard()
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ check_price_differences: {e}")
        await send_telegram_message(
            f"‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ:</b>\n{str(e)}",
            reply_markup=get_main_keyboard()
        )

async def send_opportunities_message(opportunities):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏"""
    utc_plus_3 = timezone(timedelta(hours=3))
    current_time = datetime.now(utc_plus_3).strftime('%H:%M:%S')
    
    message = f"üîî <b>–ê–†–ë–ò–¢–†–ê–ñ DEX vs MEXC FUTURES</b>\n\n"
    message += f"‚è∞ <i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {current_time}</i>\n"
    message += f"üìä <i>–ù–∞–π–¥–µ–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {len(opportunities)}</i>\n\n"
    
    for i, opp in enumerate(opportunities, 1):
        symbol = html.escape(opp['symbol'])
        price_diff = opp['price_diff']
        abs_diff = opp['abs_diff']
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
        if price_diff > 0:
            direction = "üü¢ DEX ‚Üí MEXC"
            action = "–ö—É–ø–∏—Ç—å –Ω–∞ DEX, –ø—Ä–æ–¥–∞—Ç—å –Ω–∞ MEXC"
            emoji = "üìà"
        else:
            direction = "üî¥ MEXC ‚Üí DEX" 
            action = "–ö—É–ø–∏—Ç—å –Ω–∞ MEXC, –ø—Ä–æ–¥–∞—Ç—å –Ω–∞ DEX"
            emoji = "üìâ"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–º—ã
        def format_volume(vol):
            if vol >= 1_000_000:
                return f"${vol/1_000_000:.1f}M"
            elif vol >= 1_000:
                return f"${vol/1_000:.1f}K"
            return f"${vol:.0f}"
        
        dex_volume = format_volume(opp['dex_volume'])
        mexc_volume = format_volume(opp['mexc_volume'])
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—ã
        def format_price(price):
            if price >= 1:
                return f"${price:.4f}"
            elif price >= 0.01:
                return f"${price:.6f}"
            else:
                return f"${price:.8f}"
        
        dex_price = format_price(opp['dex_price'])
        mexc_price = format_price(opp['mexc_price'])
        
        message += (
            f"{emoji} <b>{i}. {symbol}</b>\n"
            f"‚ñ´Ô∏è <b>–†–∞–∑–Ω–∏—Ü–∞:</b> <code>{abs_diff:.2f}%</code>\n"
            f"‚ñ´Ô∏è <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {direction}\n"
            f"‚ñ´Ô∏è <b>–î–µ–π—Å—Ç–≤–∏–µ:</b> {action}\n\n"
            
            f"üîÑ <b>DEX Screener:</b>\n"
            f"   üí∞ –¶–µ–Ω–∞: {dex_price}\n"
            f"   üìä –û–±—ä–µ–º: {dex_volume}\n"
            f"   üîó <a href='{opp['dex_url']}'>–¢–æ—Ä–≥–æ–≤–∞—Ç—å</a>\n\n"
            
            f"üèõÔ∏è <b>MEXC Futures:</b>\n"
            f"   üí∞ –¶–µ–Ω–∞: {mexc_price}\n"
            f"   üìä –û–±—ä–µ–º: {mexc_volume}\n"
            f"   üîó <a href='{opp['mexc_url']}'>–¢–æ—Ä–≥–æ–≤–∞—Ç—å</a>\n"
            f"{'‚îÄ' * 30}\n\n"
        )
    
    message += f"‚ö° <i>–ü–æ—Ä–æ–≥ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è: {SETTINGS['THRESHOLD_PERCENT']}%</i>\n"
    message += f"üíé <i>–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º: ${SETTINGS['MIN_VOLUME_USD']:,.0f}</i>"
    
    await send_telegram_message(message, reply_markup=get_main_keyboard())

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = str(update.effective_user.id)
    if user_id not in TELEGRAM_CHAT_IDS:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    await update.message.reply_text(
        "ü§ñ <b>DEX vs MEXC Futures Arbitrage Bot</b>\n\n"
        "–ë–æ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–Ω–∏—Ü—É —Ü–µ–Ω –º–µ–∂–¥—É DEX (—á–µ—Ä–µ–∑ DEXScreener) –∏ —Ñ—å—é—á–µ—Ä—Å–∞–º–∏ –Ω–∞ MEXC.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º:",
        parse_mode="HTML",
        reply_markup=get_main_keyboard()
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = str(update.effective_user.id)
    if user_id not in TELEGRAM_CHAT_IDS:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    text = update.message.text

    if text == "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞—Ä–±–∏—Ç—Ä–∞–∂":
        await update.message.reply_text("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏...", reply_markup=get_main_keyboard())
        await check_price_differences()

    elif text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        await update.message.reply_text(
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
            parse_mode="HTML",
            reply_markup=get_settings_keyboard()
        )
        return SET_THRESHOLD

    elif text == "üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞":
        status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if MEXC_FUTURES else "‚ùå –û—à–∏–±–∫–∞ MEXC"
        status_text = (
            "ü§ñ <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:</b>\n\n"
            f"‚ñ´Ô∏è MEXC Futures: {status}\n"
            f"‚ñ´Ô∏è DEXScreener: ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω\n"
            f"‚ñ´Ô∏è –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {LAST_UPDATE_TIME or '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n\n"
            f"‚öôÔ∏è <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
            f"‚ñ´Ô∏è –ü–æ—Ä–æ–≥: {SETTINGS['THRESHOLD_PERCENT']}%\n"
            f"‚ñ´Ô∏è –ú–∏–Ω. –æ–±—ä–µ–º: ${SETTINGS['MIN_VOLUME_USD']:,.0f}\n"
            f"‚ñ´Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª: {SETTINGS['CHECK_INTERVAL']} —Å–µ–∫\n"
            f"‚ñ´Ô∏è –ú–∞–∫—Å. —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {SETTINGS['MAX_RESULTS']}\n"
            f"‚ñ´Ô∏è –ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞: {'–í–ö–õ' if SETTINGS['AUTO_CHECK'] else '–í–´–ö–õ'}"
        )
        await update.message.reply_text(status_text, parse_mode="HTML", reply_markup=get_main_keyboard())

    elif text.startswith("üîÑ –ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞:"):
        SETTINGS['AUTO_CHECK'] = not SETTINGS['AUTO_CHECK']
        status = "–í–ö–õ" if SETTINGS['AUTO_CHECK'] else "–í–´–ö–õ"
        await update.message.reply_text(
            f"‚úÖ –ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞ {status}",
            reply_markup=get_main_keyboard()
        )

    elif text == "‚ùì –ü–æ–º–æ—â—å":
        help_text = (
            "ü§ñ <b>DEX vs MEXC Futures Arbitrage Bot</b>\n\n"
            "üîç <b>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞—Ä–±–∏—Ç—Ä–∞–∂</b> - –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–∞–∑–Ω–∏—Ü—ã —Ü–µ–Ω\n"
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b> - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –±–æ—Ç–∞\n"
            "üìä <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞</b> - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ\n"
            "üîÑ <b>–ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞</b> - –≤–∫–ª/–≤—ã–∫–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É\n\n"
            "<b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>\n"
            "1. –ë–æ—Ç –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å DEXScreener\n"
            "2. –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å —Ü–µ–Ω–∞–º–∏ —Ñ—å—é—á–µ—Ä—Å–æ–≤ –Ω–∞ MEXC\n"
            "3. –ù–∞—Ö–æ–¥–∏—Ç —Ä–∞–∑–Ω–∏—Ü—ã –±–æ–ª—å—à–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞\n"
            "4. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞\n\n"
            "<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
            "‚Ä¢ –ù–∞—á–∏–Ω–∞–π—Ç–µ —Å –ø–æ—Ä–æ–≥–∞ 5-10%\n"
            "‚Ä¢ –£—á–∏—Ç—ã–≤–∞–π—Ç–µ –∫–æ–º–∏—Å—Å–∏–∏ –∏ —Ä–∏—Å–∫–∏\n"
            "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥ —Ç–æ—Ä–≥–æ–≤–ª–µ–π"
        )
        await update.message.reply_text(help_text, parse_mode="HTML", reply_markup=get_main_keyboard())

    else:
        await update.message.reply_text(
            "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
            reply_markup=get_main_keyboard()
        )

async def handle_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    text = update.message.text

    if text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await update.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_keyboard()
        )
        return ConversationHandler.END

    elif text.startswith("üìä –ü–æ—Ä–æ–≥:"):
        context.user_data['setting'] = 'THRESHOLD_PERCENT'
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ—Ä–æ–≥–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ (—Ç–µ–∫—É—â–µ–µ: {SETTINGS['THRESHOLD_PERCENT']}%):"
        )
        return SET_THRESHOLD

    elif text.startswith("üíé –û–±—ä–µ–º:"):
        context.user_data['setting'] = 'MIN_VOLUME_USD'
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–º–∞ (—Ç–µ–∫—É—â–µ–µ: ${SETTINGS['MIN_VOLUME_USD']:,.0f}):"
        )
        return SET_VOLUME

    elif text.startswith("‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª:"):
        context.user_data['setting'] = 'CHECK_INTERVAL'
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Ç–µ–∫—É—â–µ–µ: {SETTINGS['CHECK_INTERVAL']} —Å–µ–∫):"
        )
        return SET_INTERVAL

    elif text.startswith("üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:"):
        context.user_data['setting'] = 'MAX_RESULTS'
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (—Ç–µ–∫—É—â–µ–µ: {SETTINGS['MAX_RESULTS']}):"
        )
        return SET_MAX_RESULTS

    await update.message.reply_text(
        "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
        reply_markup=get_settings_keyboard()
    )
    return SET_THRESHOLD

async def handle_threshold(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ—Ä–æ–≥–∞"""
    text = update.message.text
    setting = context.user_data.get('setting')

    try:
        if setting == 'THRESHOLD_PERCENT':
            value = float(text)
            if value <= 0:
                await update.message.reply_text("‚ùå –ü–æ—Ä–æ–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
                return SET_THRESHOLD
            
            SETTINGS['THRESHOLD_PERCENT'] = value
            await update.message.reply_text(
                f"‚úÖ –ü–æ—Ä–æ–≥ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {value}%",
                reply_markup=get_settings_keyboard()
            )
            return SET_THRESHOLD

    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.",
            reply_markup=get_settings_keyboard()
        )
        return SET_THRESHOLD

async def handle_volume(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–±—ä–µ–º–∞"""
    text = update.message.text
    setting = context.user_data.get('setting')

    try:
        if setting == 'MIN_VOLUME_USD':
            value = float(text)
            if value <= 0:
                await update.message.reply_text("‚ùå –û–±—ä–µ–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
                return SET_VOLUME
            
            SETTINGS['MIN_VOLUME_USD'] = value
            await update.message.reply_text(
                f"‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${value:,.0f}",
                reply_markup=get_settings_keyboard()
            )
            return SET_VOLUME

    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.",
            reply_markup=get_settings_keyboard()
        )
        return SET_VOLUME

async def handle_interval(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞"""
    text = update.message.text
    setting = context.user_data.get('setting')

    try:
        if setting == 'CHECK_INTERVAL':
            value = int(text)
            if value < 10:
                await update.message.reply_text("‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 10 —Å–µ–∫—É–Ω–¥")
                return SET_INTERVAL
            
            SETTINGS['CHECK_INTERVAL'] = value
            await update.message.reply_text(
                f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {value} —Å–µ–∫",
                reply_markup=get_settings_keyboard()
            )
            return SET_INTERVAL

    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.",
            reply_markup=get_settings_keyboard()
        )
        return SET_INTERVAL

async def handle_max_results(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    text = update.message.text
    setting = context.user_data.get('setting')

    try:
        if setting == 'MAX_RESULTS':
            value = int(text)
            if value <= 0 or value > 50:
                await update.message.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 50")
                return SET_MAX_RESULTS
            
            SETTINGS['MAX_RESULTS'] = value
            await update.message.reply_text(
                f"‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {value}",
                reply_markup=get_settings_keyboard()
            )
            return SET_MAX_RESULTS

    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.",
            reply_markup=get_settings_keyboard()
        )
        return SET_MAX_RESULTS

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞"""
    await update.message.reply_text(
        "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=get_main_keyboard()
    )
    return ConversationHandler.END

async def auto_check():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
    while True:
        try:
            if SETTINGS['AUTO_CHECK']:
                global LAST_UPDATE_TIME
                LAST_UPDATE_TIME = datetime.now().strftime('%H:%M:%S')
                await check_price_differences()
            await asyncio.sleep(SETTINGS['CHECK_INTERVAL'])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ auto_check: {e}")
            await asyncio.sleep(60)

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}", exc_info=context.error)

    if update and update.effective_message:
        await update.effective_message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard()
        )

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # Conversation handler –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
        ],
        states={
            SET_THRESHOLD: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_settings),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_threshold)
            ],
            SET_VOLUME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_settings),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_volume)
            ],
            SET_INTERVAL: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_settings),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_interval)
            ],
            SET_MAX_RESULTS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_settings),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_max_results)
            ]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(conv_handler)
    application.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –≤ —Ñ–æ–Ω–µ
    loop = asyncio.get_event_loop()
    loop.create_task(auto_check())

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_polling()

if __name__ == '__main__':
    main()
