import ccxt
import asyncio
from telegram import Bot, Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
    ConversationHandler
)
from telegram.error import TelegramError
import logging
from datetime import datetime, timezone, timedelta
from collections import defaultdict
import html
import re
import json
import os
import time
import aiohttp
import requests

# –û–±—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = "7990034184:AAFTx--E5GE0NIPA0Yghr6KpBC80aVtSACs"
TELEGRAM_CHAT_IDS = ["1167694150", "7916502470", "5381553894", "1111230981"]

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è DEX-CEX –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
DEFAULT_DEX_CEX_SETTINGS = {
    "THRESHOLD_PERCENT": 2.0,
    "MAX_THRESHOLD_PERCENT": 50,
    "CHECK_INTERVAL": 30,
    "MIN_LIQUIDITY_USD": 50000,
    "MIN_VOLUME_USD": 100000,
    "MIN_ENTRY_AMOUNT_USDT": 10,
    "MAX_ENTRY_AMOUNT_USDT": 500,
    "MIN_NET_PROFIT_USD": 5,
    "ENABLED": True,
    "PRICE_CONVERGENCE_THRESHOLD": 0.5,
    "PRICE_CONVERGENCE_ENABLED": True,
    "MAX_PAIRS_TO_MONITOR": 100
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∏—Ä–∂
EXCHANGE_SETTINGS = {
    "mexc": {"ENABLED": True}
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SETTINGS_MENU, DEX_CEX_SETTINGS, SETTING_VALUE = range(3)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger("DexCexArbBot")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
SHARED_BOT = None
FUTURES_EXCHANGES_LOADED = {}
SETTINGS = {
    "DEX_CEX": DEFAULT_DEX_CEX_SETTINGS.copy(),
    "EXCHANGES": EXCHANGE_SETTINGS.copy()
}

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è MEXC –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤
FUTURES_EXCHANGES = {
    "mexc": {
        "api": ccxt.mexc({"enableRateLimit": True}),
        "symbol_format": lambda s: f"{s}/USDT:USDT",
        "is_futures": lambda m: m.get('swap', False) and 'USDT' in m['id'],
        "taker_fee": 0.0006,
        "maker_fee": 0.0002,
        "url_format": lambda s: f"https://futures.mexc.com/exchange/{s.replace('/', '_').replace(':USDT', '')}",
        "blacklist": [],
        "emoji": "üìä"
    }
}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
sent_arbitrage_opportunities = defaultdict(dict)
current_arbitrage_opportunities = defaultdict(dict)
arbitrage_start_times = defaultdict(dict)
last_convergence_notification = defaultdict(dict)

# Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    return ReplyKeyboardMarkup([
        [KeyboardButton("üìà –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∫–∏")], [KeyboardButton("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
        [KeyboardButton("üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞"), KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
    ], resize_keyboard=True)

def get_settings_keyboard():
    return ReplyKeyboardMarkup([
        [KeyboardButton("üîÑ DEX-CEX –ê—Ä–±–∏—Ç—Ä–∞–∂")],
        [KeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ], resize_keyboard=True)

def get_dex_cex_settings_keyboard():
    dex_cex = SETTINGS['DEX_CEX']
    return ReplyKeyboardMarkup([
        [KeyboardButton(f"–ü–æ—Ä–æ–≥: {dex_cex['THRESHOLD_PERCENT']}%"),
         KeyboardButton(f"–ú–∞–∫—Å. –ø–æ—Ä–æ–≥: {dex_cex['MAX_THRESHOLD_PERCENT']}%")],
        [KeyboardButton(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª: {dex_cex['CHECK_INTERVAL']}—Å"),
         KeyboardButton(f"–õ–∏–º–∏–¥–Ω–æ—Å—Ç—å: ${dex_cex['MIN_LIQUIDITY_USD']/1000:.0f}K")],
        [KeyboardButton(f"–û–±—ä–µ–º: ${dex_cex['MIN_VOLUME_USD']/1000:.0f}K"),
         KeyboardButton(f"–ü–∞—Ä—ã: {dex_cex['MAX_PAIRS_TO_MONITOR']}")],
        [KeyboardButton(f"–ú–∏–Ω. —Å—É–º–º–∞: ${dex_cex['MIN_ENTRY_AMOUNT_USDT']}"),
         KeyboardButton(f"–ú–∞–∫—Å. —Å—É–º–º–∞: ${dex_cex['MAX_ENTRY_AMOUNT_USDT']}")],
        [KeyboardButton(f"–ü—Ä–∏–±—ã–ª—å: ${dex_cex['MIN_NET_PROFIT_USD']}"),
         KeyboardButton(f"–°—Ç–∞—Ç—É—Å: {'–í–ö–õ' if dex_cex['ENABLED'] else '–í–´–ö–õ'}")],
        [KeyboardButton(f"–°—Ö–æ–¥–∏–º–æ—Å—Ç—å: {dex_cex['PRICE_CONVERGENCE_THRESHOLD']}%"),
         KeyboardButton(f"–£–≤–µ–¥. —Å—Ä–∞–≤–Ω.: {'üîî' if dex_cex['PRICE_CONVERGENCE_ENABLED'] else 'üîï'}")],
        [KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")]
    ], resize_keyboard=True)

async def send_telegram_message(message: str, chat_id: str = None, reply_markup: ReplyKeyboardMarkup = None):
    global SHARED_BOT
    if not SHARED_BOT:
        SHARED_BOT = Bot(token=TELEGRAM_TOKEN)

    targets = [chat_id] if chat_id else TELEGRAM_CHAT_IDS

    for target_id in targets:
        try:
            await SHARED_BOT.send_message(
                chat_id=target_id,
                text=message,
                parse_mode="HTML",
                disable_web_page_preview=True,
                reply_markup=reply_markup
            )
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {target_id}")
        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ {target_id}: {e}")

def format_duration(seconds):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    if seconds < 60:
        return f"{int(seconds)} —Å–µ–∫"
    elif seconds < 3600:
        minutes = int(seconds // 60)
        seconds_remaining = int(seconds % 60)
        return f"{minutes} –º–∏–Ω {seconds_remaining} —Å–µ–∫"
    else:
        hours = int(seconds // 3600)
        minutes = int((seconds % 3600) // 60)
        return f"{hours} —á {minutes} –º–∏–Ω"

def add_opportunity_to_sent(base: str, dex_price: float, cex_price: float, spread: float,
                           signal: str, dex_data: dict, min_entry_amount: float = None, 
                           max_entry_amount: float = None, profit_min: dict = None, profit_max: dict = None):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–≤—è–∑–∫—É –≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"""
    key = f"DEX_CEX_{base}"
    current_time = time.time()

    sent_arbitrage_opportunities[key] = {
        'arb_type': 'DEX_CEX',
        'base': base,
        'dex_price': dex_price,
        'cex_price': cex_price,
        'spread': spread,
        'signal': signal,
        'dex_data': dex_data,
        'min_entry_amount': min_entry_amount,
        'max_entry_amount': max_entry_amount,
        'profit_min': profit_min,
        'profit_max': profit_max,
        'start_time': current_time,
        'last_updated': current_time
    }

    current_arbitrage_opportunities[key] = sent_arbitrage_opportunities[key].copy()
    arbitrage_start_times[key] = current_time

    logger.info(f"DEX-CEX —Å–≤—è–∑–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {key}")

async def send_price_convergence_notification(base: str, dex_price: float, cex_price: float, 
                                            spread: float, signal: str, dex_data: dict, duration: float = None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ —Ü–µ–Ω"""
    if not SETTINGS['DEX_CEX']['PRICE_CONVERGENCE_ENABLED']:
        return

    convergence_threshold = SETTINGS['DEX_CEX']['PRICE_CONVERGENCE_THRESHOLD']

    if abs(spread) > convergence_threshold:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —ç—Ç–∞ —Å–≤—è–∑–∫–∞ —Ä–∞–Ω–µ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π
    key = f"DEX_CEX_{base}"
    if key not in sent_arbitrage_opportunities:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    current_time = time.time()
    notification_key = f"DEX_CEX_{base}"

    if (notification_key in last_convergence_notification and
            current_time - last_convergence_notification[notification_key] < 300):
        return

    last_convergence_notification[notification_key] = current_time

    utc_plus_3 = timezone(timedelta(hours=3))
    current_time_str = datetime.now(utc_plus_3).strftime('%H:%M:%S')

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ DEX
    dex_url = dex_data.get('url', f"https://dexscreener.com/{dex_data.get('chainId', '')}/{dex_data.get('pairAddress', '')}")
    dex_chain = dex_data.get('chain', 'Unknown')
    dex_liquidity = dex_data.get('liquidity', {}).get('usd', 0)
    
    liquidity_str = f"${dex_liquidity:,.0f}" if dex_liquidity else "N/A"

    duration_str = format_duration(duration) if duration is not None else "N/A"

    safe_base = html.escape(base)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
    close_action = "–ó–∞–∫—Ä—ã—Ç—å –®–û–†–¢" if signal == "LONG" else "–ó–∞–∫—Ä—ã—Ç—å –õ–û–ù–ì"

    message = (
        f"üéØ <b>–¶–ï–ù–´ –°–†–ê–í–ù–ò–õ–ò–°–¨! –ü–û–†–ê –ó–ê–ö–†–´–í–ê–¢–¨ –°–î–ï–õ–ö–£!</b>\n\n"
        f"‚ñ´Ô∏è <b>–ú–æ–Ω–µ—Ç–∞:</b> <code>{safe_base}</code>\n"
        f"‚ñ´Ô∏è <b>–†–∞–∑–Ω–∏—Ü–∞ —Ü–µ–Ω:</b> <code>{spread:.2f}%</code>\n"
        f"‚ñ´Ô∏è <b>–°–∏–≥–Ω–∞–ª –±—ã–ª:</b> {signal}\n"
        f"‚ñ´Ô∏è <b>–î–µ–π—Å—Ç–≤–∏–µ:</b> {close_action} –Ω–∞ MEXC\n"
        f"‚ñ´Ô∏è <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—Ä–±–∏—Ç—Ä–∞–∂–∞:</b> {duration_str}\n\n"

        f"üü¢ <b><a href='{dex_url}'>DEX (DexScreener)</a>:</b>\n"
        f"   üí∞ –¶–µ–Ω–∞: <code>${dex_price:.8f}</code>\n"
        f"   ‚õì –°–µ—Ç—å: {dex_chain}\n"
        f"   üíß –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: {liquidity_str}\n\n"

        f"üîµ <b><a href='https://futures.mexc.com/exchange/{safe_base}_USDT'>MEXC Futures</a>:</b>\n"
        f"   üí∞ –¶–µ–Ω–∞: <code>${cex_price:.8f}</code>\n\n"

        f"‚è∞ <i>{current_time_str}</i>\n"
        f"üîî <i>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ü–µ–Ω</i>"
    )

    await send_telegram_message(message)
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–ª—è {base}: {spread:.4f}%")

    # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∫—É –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    if key in sent_arbitrage_opportunities:
        del sent_arbitrage_opportunities[key]
    if key in current_arbitrage_opportunities:
        del current_arbitrage_opportunities[key]
    if key in arbitrage_start_times:
        del arbitrage_start_times[key]

def update_arbitrage_duration(base: str, spread: float):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"""
    key = f"DEX_CEX_{base}"
    current_time = time.time()

    # –ï—Å–ª–∏ —Å–≤—è–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –∏ —Å–ø—Ä–µ–¥ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ø–æ—Ä–æ–≥ - –Ω–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å—á–µ—Ç
    if (key in sent_arbitrage_opportunities and
            SETTINGS['DEX_CEX']['THRESHOLD_PERCENT'] <= abs(spread) <= SETTINGS['DEX_CEX']['MAX_THRESHOLD_PERCENT'] and
            key not in arbitrage_start_times):
        arbitrage_start_times[key] = current_time
        logger.debug(f"–ù–∞—á–∞–ª–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –¥–ª—è {key}")

    # –ï—Å–ª–∏ —Å–ø—Ä–µ–¥ —É–ø–∞–ª –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏ - –≤—ã—á–∏—Å–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    elif (abs(spread) <= SETTINGS['DEX_CEX']['PRICE_CONVERGENCE_THRESHOLD'] and
          key in arbitrage_start_times):
        start_time = arbitrage_start_times.pop(key)
        duration = current_time - start_time
        logger.debug(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –¥–ª—è {key}, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration:.0f} —Å–µ–∫")
        return duration

    return None

def update_current_arbitrage_opportunities(base: str, dex_price: float, cex_price: float, 
                                         spread: float, signal: str, dex_data: dict):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö"""
    key = f"DEX_CEX_{base}"
    current_time = time.time()

    if key in sent_arbitrage_opportunities:
        current_arbitrage_opportunities[key] = {
            'arb_type': 'DEX_CEX',
            'base': base,
            'dex_price': dex_price,
            'cex_price': cex_price,
            'spread': spread,
            'signal': signal,
            'dex_data': dex_data,
            'min_entry_amount': sent_arbitrage_opportunities[key].get('min_entry_amount'),
            'max_entry_amount': sent_arbitrage_opportunities[key].get('max_entry_amount'),
            'profit_min': sent_arbitrage_opportunities[key].get('profit_min'),
            'profit_max': sent_arbitrage_opportunities[key].get('profit_max'),
            'start_time': sent_arbitrage_opportunities[key]['start_time'],
            'last_updated': current_time
        }

async def get_dex_screener_pairs():
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–∞—Ä—ã —Å DexScreener —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    popular_tokens = [
        "SOL", "ETH", "BTC", "BNB", "AVAX", "MATIC", "ARB", "OP", 
        "SUI", "APT", "ADA", "XRP", "DOGE", "DOT", "LINK", "LTC",
        "BCH", "ATOM", "NEAR", "FIL", "ETC", "ALGO", "XLM", "XMR",
        "EOS", "TRX", "XTZ", "AAVE", "COMP", "MKR", "SNX", "UNI",
        "CRV", "SUSHI", "YFI", "BAL", "REN", "OMG", "ZRX", "BAT",
        "ENJ", "MANA", "SAND", "GALA", "AXS", "SLP", "CHZ", "FTM",
        "ONE", "VET", "ICX", "ZIL", "ONT", "IOST", "WAVES", "KSM",
        "DASH", "ZEC", "XEM", "SC", "BTT", "WIN", "BAND", "OCEAN",
        "RSR", "CVC", "REQ", "NMR", "POLY", "LRC", "STORJ", "KNC"
    ]
    
    all_pairs = []
    
    for token in popular_tokens:
        try:
            url = f"https://api.dexscreener.com/latest/dex/search?q={token}"
            
            async with aiohttp.ClientSession() as session:
                async with session.get(url, timeout=30) as response:
                    if response.status == 200:
                        data = await response.json()
                        pairs = data.get('pairs', [])
                        
                        for pair in pairs:
                            try:
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ USDT –ø–∞—Ä–∞
                                quote_token = pair.get('quoteToken', {}).get('symbol', '').upper()
                                if quote_token != 'USDT':
                                    continue
                                
                                liquidity_usd = pair.get('liquidity', {}).get('usd', 0)
                                volume_h24 = pair.get('volume', {}).get('h24', 0)
                                price_usd = pair.get('priceUsd', 0)
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –∏ –æ–±—ä–µ–º
                                if (liquidity_usd >= SETTINGS['DEX_CEX']['MIN_LIQUIDITY_USD'] and
                                    volume_h24 >= SETTINGS['DEX_CEX']['MIN_VOLUME_USD'] and
                                    price_usd > 0):
                                    
                                    base_symbol = pair['baseToken']['symbol'].upper()
                                    base_symbol = re.sub(r'\.\w+$', '', base_symbol)
                                    
                                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—ã —Å –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
                                    if not re.match(r'^[A-Z0-9]{2,15}$', base_symbol):
                                        continue
                                    
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω
                                    if any(stable in base_symbol for stable in ['USDT', 'USDC', 'BUSD', 'DAI', 'TUSD']):
                                        continue
                                    
                                    pair_data = {
                                        'baseSymbol': base_symbol,
                                        'price': float(price_usd),
                                        'liquidity': {'usd': liquidity_usd},
                                        'volume': {'h24': volume_h24},
                                        'chain': pair.get('chain', 'Unknown'),
                                        'pairAddress': pair.get('pairAddress'),
                                        'chainId': pair.get('chainId'),
                                        'url': pair.get('url', f"https://dexscreener.com/{pair.get('chainId', '')}/{pair.get('pairAddress', '')}")
                                    }
                                    
                                    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–∞–∫–æ–π —Å–∏–º–≤–æ–ª –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –∏–ª–∏ –µ—Å–ª–∏ —É —ç—Ç–æ–π –ø–∞—Ä—ã –±–æ–ª—å—à–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
                                    existing_pair = next((p for p in all_pairs if p['baseSymbol'] == base_symbol), None)
                                    if not existing_pair or liquidity_usd > existing_pair['liquidity']['usd']:
                                        if existing_pair:
                                            all_pairs.remove(existing_pair)
                                        all_pairs.append(pair_data)
                                    
                                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä
                                    if len(all_pairs) >= SETTINGS['DEX_CEX']['MAX_PAIRS_TO_MONITOR']:
                                        break
                                    
                            except Exception as e:
                                logger.warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä—ã {token}: {e}")
                                continue
                    
                    else:
                        logger.warning(f"–û—à–∏–±–∫–∞ API DexScreener –¥–ª—è {token}: {response.status}")
                        
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token}: {e}")
            continue
        
        # –î–µ–ª–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await asyncio.sleep(0.5)
    
    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(all_pairs)} –ø–∞—Ä —Å DexScreener")
    return all_pairs

async def load_futures_exchanges():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ—å—é—á–µ—Ä—Å–Ω—ã–µ –±–∏—Ä–∂–∏"""
    global FUTURES_EXCHANGES_LOADED

    exchanges = {}
    for name, config in FUTURES_EXCHANGES.items():
        if not SETTINGS['EXCHANGES'][name]['ENABLED']:
            continue

        try:
            exchange = await asyncio.get_event_loop().run_in_executor(
                None, config["api"].load_markets)
            if exchange:
                exchanges[name] = {
                    "api": config["api"],
                    "config": config
                }
                logger.info(f"{name.upper()} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ {name}: {e}")

    FUTURES_EXCHANGES_LOADED = exchanges
    return exchanges

async def fetch_cex_price(symbol: str):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—É —Å MEXC —Ñ—å—é—á–µ—Ä—Å–æ–≤"""
    try:
        if "mexc" not in FUTURES_EXCHANGES_LOADED:
            return None
            
        exchange = FUTURES_EXCHANGES_LOADED["mexc"]["api"]
        futures_symbol = FUTURES_EXCHANGES_LOADED["mexc"]["config"]["symbol_format"](symbol)
        
        try:
            ticker = await asyncio.get_event_loop().run_in_executor(
                None, exchange.fetch_ticker, futures_symbol)
            return float(ticker['last']) if ticker and ticker.get('last') else None
        except ccxt.BadSymbol:
            # –ü–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Ñ—å—é—á–µ—Ä—Å–∞—Ö
            return None
            
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã {symbol} –Ω–∞ MEXC: {e}")
        return None

def calculate_profit(buy_price: float, sell_price: float, amount: float, fee_percent: float = 0.0006) -> dict:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏–±—ã–ª—å –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞"""
    buy_cost = amount * buy_price * (1 + fee_percent)
    sell_revenue = amount * sell_price * (1 - fee_percent)
    net_profit = sell_revenue - buy_cost
    profit_percent = (net_profit / buy_cost) * 100 if buy_cost > 0 else 0

    return {
        "net": net_profit,
        "percent": profit_percent,
        "entry_amount": amount * buy_price
    }

async def check_dex_cex_arbitrage():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ DEX-CEX –∞—Ä–±–∏—Ç—Ä–∞–∂–∞"""
    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ DEX-CEX –∞—Ä–±–∏—Ç—Ä–∞–∂–∞")

    if not SETTINGS['DEX_CEX']['ENABLED']:
        logger.info("DEX-CEX –∞—Ä–±–∏—Ç—Ä–∞–∂ –æ—Ç–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ—å—é—á–µ—Ä—Å–Ω—ã–µ –±–∏—Ä–∂–∏
    await load_futures_exchanges()

    if not FUTURES_EXCHANGES_LOADED:
        logger.error("MEXC —Ñ—å—é—á–µ—Ä—Å—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        return

    while SETTINGS['DEX_CEX']['ENABLED']:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä—ã —Å DexScreener
            dex_pairs = await get_dex_screener_pairs()
            if not dex_pairs:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∞—Ä—ã —Å DexScreener")
                await asyncio.sleep(SETTINGS['DEX_CEX']['CHECK_INTERVAL'])
                continue

            found_opportunities = 0
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–∞—Ä—ã –ø–æ —Å–∏–º–≤–æ–ª—É, –≤—ã–±–∏—Ä–∞–µ–º —Å–∞–º—É—é –ª–∏–∫–≤–∏–¥–Ω—É—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
            pairs_by_symbol = {}
            for pair in dex_pairs:
                symbol = pair['baseSymbol']
                if symbol not in pairs_by_symbol or pair['liquidity']['usd'] > pairs_by_symbol[symbol]['liquidity']['usd']:
                    pairs_by_symbol[symbol] = pair

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–±–∏—Ç—Ä–∞–∂ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã
            for symbol, dex_data in pairs_by_symbol.items():
                try:
                    dex_price = dex_data['price']
                    cex_price = await fetch_cex_price(symbol)
                    
                    if not cex_price or dex_price == 0:
                        continue

                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ø—Ä–µ–¥
                    spread = ((dex_price - cex_price) / cex_price) * 100
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–≥–Ω–∞–ª
                    if dex_price > cex_price:
                        signal = "LONG"  # –ü–æ–∫—É–ø–∫–∞ –Ω–∞ DEX, –®–æ—Ä—Ç –Ω–∞ CEX
                        action = "–®–û–†–¢ –Ω–∞ MEXC"
                    else:
                        signal = "SHORT"  # –ü—Ä–æ–¥–∞–∂–∞ –Ω–∞ DEX, –õ–æ–Ω–≥ –Ω–∞ CEX  
                        action = "–õ–û–ù–ì –Ω–∞ MEXC"
                    
                    abs_spread = abs(spread)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
                    update_current_arbitrage_opportunities(
                        symbol, dex_price, cex_price, spread, signal, dex_data
                    )

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–æ–¥–∏–º–æ—Å—Ç—å —Ü–µ–Ω
                    duration = update_arbitrage_duration(symbol, spread)
                    if duration is not None:
                        await send_price_convergence_notification(
                            symbol, dex_price, cex_price, spread, signal, dex_data, duration
                        )

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
                    if (SETTINGS['DEX_CEX']['THRESHOLD_PERCENT'] <= abs_spread <= 
                        SETTINGS['DEX_CEX']['MAX_THRESHOLD_PERCENT']):
                        
                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å
                        fee = FUTURES_EXCHANGES_LOADED["mexc"]["config"]["taker_fee"]
                        
                        # –î–ª—è LONG: –ø–æ–∫—É–ø–∞–µ–º –Ω–∞ DEX –ø–æ dex_price, –ø—Ä–æ–¥–∞–µ–º –Ω–∞ CEX –ø–æ cex_price
                        # –î–ª—è SHORT: –ø—Ä–æ–¥–∞–µ–º –Ω–∞ DEX –ø–æ dex_price, –ø–æ–∫—É–ø–∞–µ–º –Ω–∞ CEX –ø–æ cex_price
                        
                        if signal == "LONG":
                            buy_price = dex_price
                            sell_price = cex_price
                        else:  # SHORT
                            buy_price = cex_price
                            sell_price = dex_price

                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –¥–ª—è –ø—Ä–∏–±—ã–ª–∏
                        min_amount_for_profit = (SETTINGS['DEX_CEX']['MIN_NET_PROFIT_USD'] / 
                                               (sell_price * (1 - fee) - buy_price * (1 + fee)))
                        
                        if min_amount_for_profit <= 0:
                            continue

                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—ã –≤—Ö–æ–¥–∞
                        min_entry_amount = max(min_amount_for_profit * buy_price, 
                                             SETTINGS['DEX_CEX']['MIN_ENTRY_AMOUNT_USDT'])
                        max_entry_amount = SETTINGS['DEX_CEX']['MAX_ENTRY_AMOUNT_USDT']

                        if min_entry_amount > max_entry_amount:
                            continue

                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å –¥–ª—è min –∏ max —Å—É–º–º
                        amount_min = min_entry_amount / buy_price
                        amount_max = max_entry_amount / buy_price

                        profit_min = calculate_profit(buy_price, sell_price, amount_min, fee)
                        profit_max = calculate_profit(buy_price, sell_price, amount_max, fee)

                        if profit_min['net'] < SETTINGS['DEX_CEX']['MIN_NET_PROFIT_USD']:
                            continue

                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        utc_plus_3 = timezone(timedelta(hours=3))
                        current_time = datetime.now(utc_plus_3).strftime('%H:%M:%S')

                        safe_symbol = html.escape(symbol)
                        dex_url = dex_data['url']
                        mexc_url = f"https://futures.mexc.com/exchange/{symbol}_USDT"

                        liquidity_str = f"${dex_data['liquidity']['usd']:,.0f}" if dex_data['liquidity']['usd'] else "N/A"

                        message = (
                            f"üîÑ <b>DEX-CEX –ê–†–ë–ò–¢–†–ê–ñ</b>\n\n"
                            f"‚ñ´Ô∏è <b>–ú–æ–Ω–µ—Ç–∞:</b> <code>{safe_symbol}</code>\n"
                            f"‚ñ´Ô∏è <b>–†–∞–∑–Ω–∏—Ü–∞ —Ü–µ–Ω:</b> {abs_spread:.2f}%\n"
                            f"‚ñ´Ô∏è <b>–°–∏–≥–Ω–∞–ª:</b> {signal}\n"
                            f"‚ñ´Ô∏è <b>–î–µ–π—Å—Ç–≤–∏–µ:</b> {action}\n"
                            f"‚ñ´Ô∏è <b>–°—É–º–º–∞ –≤—Ö–æ–¥–∞:</b> ${min_entry_amount:.2f}-${max_entry_amount:.2f}\n\n"
                            
                            f"üü¢ <b><a href='{dex_url}'>DEX (DexScreener)</a>:</b>\n"
                            f"   üí∞ –¶–µ–Ω–∞: <code>${dex_price:.8f}</code>\n"
                            f"   ‚õì –°–µ—Ç—å: {dex_data['chain']}\n"
                            f"   üíß –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: {liquidity_str}\n\n"
                            
                            f"üîµ <b><a href='{mexc_url}'>MEXC Futures</a>:</b>\n"
                            f"   üí∞ –¶–µ–Ω–∞: <code>${cex_price:.8f}</code>\n"
                            f"   üìä –ö–æ–º–∏—Å—Å–∏—è: {fee * 100:.3f}%\n\n"
                            
                            f"üí∞ <b>–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å:</b> ${profit_min['net']:.2f}-${profit_max['net']:.2f}\n\n"
                            f"‚è± {current_time}\n"
                        )

                        logger.info(f"–ù–∞–π–¥–µ–Ω–∞ DEX-CEX –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å: {symbol} ({abs_spread:.2f}%)")

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        await send_telegram_message(message)

                        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
                        add_opportunity_to_sent(
                            symbol, dex_price, cex_price, spread, signal, dex_data,
                            min_entry_amount, max_entry_amount, profit_min, profit_max
                        )

                        found_opportunities += 1

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä—ã {symbol}: {e}")

            logger.info(f"–¶–∏–∫–ª DEX-CEX –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {found_opportunities}")
            await asyncio.sleep(SETTINGS['DEX_CEX']['CHECK_INTERVAL'])

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ DEX-CEX –∞—Ä–±–∏—Ç—Ä–∞–∂–∞: {e}")
            await asyncio.sleep(60)

async def get_current_arbitrage_opportunities():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"""
    current_time = time.time()
    
    # –û—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ (—Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞)
    keys_to_remove = []
    for key, opportunity in sent_arbitrage_opportunities.items():
        if current_time - opportunity['last_updated'] > 3600:
            keys_to_remove.append(key)
    
    for key in keys_to_remove:
        del sent_arbitrage_opportunities[key]
        if key in current_arbitrage_opportunities:
            del current_arbitrage_opportunities[key]

    if not sent_arbitrage_opportunities:
        return "üìä <b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ DEX-CEX —Å–≤—è–∑–∫–∏</b>\n\n" \
               "‚è≥ –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ."

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–ø—Ä–µ–¥—É (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
    sorted_opportunities = sorted(
        sent_arbitrage_opportunities.values(), 
        key=lambda x: abs(x['spread']), 
        reverse=True
    )

    utc_plus_3 = timezone(timedelta(hours=3))
    current_time_str = datetime.now(utc_plus_3).strftime('%H:%M:%S')

    message = "üìä <b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ DEX-CEX —Å–≤—è–∑–∫–∏</b>\n\n"

    for opp in sorted_opportunities:
        duration = time.time() - opp['start_time']
        duration_str = format_duration(duration)

        entry_amount_str = f"${opp['min_entry_amount']:.2f}-${opp['max_entry_amount']:.2f}" if opp.get('min_entry_amount') and opp.get('max_entry_amount') else "N/A"

        profit_str = "N/A"
        if opp.get('profit_min') and opp.get('profit_max'):
            profit_min_net = opp['profit_min'].get('net', 0)
            profit_max_net = opp['profit_max'].get('net', 0)
            profit_str = f"${profit_min_net:.2f}-${profit_max_net:.2f}"

        message += (
            f"‚ñ´Ô∏è <code>{opp['base']}</code>: {abs(opp['spread']):.2f}% ({opp['signal']})\n"
            f"   üí∞ –°—É–º–º–∞ –≤—Ö–æ–¥–∞: {entry_amount_str}\n"
            f"   üíµ –ü—Ä–∏–±—ã–ª—å: {profit_str}\n"
            f"   ‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_str}\n\n"
        )

    message += f"‚è∞ <i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {current_time_str}</i>\n"
    message += f"üìà <i>–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–≤—è–∑–æ–∫: {len(sorted_opportunities)}</i>"

    return message

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = str(update.effective_user.id)
    if user_id not in TELEGRAM_CHAT_IDS:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    await update.message.reply_text(
        "ü§ñ <b>DEX-CEX Arbitrage Bot</b>\n\n"
        "–ê—Ä–±–∏—Ç—Ä–∞–∂ –º–µ–∂–¥—É DexScreener (DEX) –∏ MEXC Futures (CEX)\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º:",
        parse_mode="HTML",
        reply_markup=get_main_keyboard()
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = str(update.effective_user.id)
    if user_id not in TELEGRAM_CHAT_IDS:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    text = update.message.text

    if text == "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        await update.message.reply_text(
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            parse_mode="HTML",
            reply_markup=get_settings_keyboard()
        )
        return SETTINGS_MENU

    elif text == "üìà –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∫–∏":
        await update.message.reply_text(
            "‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö...",
            parse_mode="HTML"
        )

        response = await get_current_arbitrage_opportunities()
        await update.message.reply_text(
            text=response,
            parse_mode="HTML",
            disable_web_page_preview=True,
            reply_markup=get_main_keyboard()
        )
        return

    elif text == "üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞":
        dex_cex_status = "‚úÖ –í–ö–õ" if SETTINGS['DEX_CEX']['ENABLED'] else "‚ùå –í–´–ö–õ"
        active_opportunities = len(sent_arbitrage_opportunities)

        await update.message.reply_text(
            f"ü§ñ <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞</b>\n\n"
            f"üîÑ DEX-CEX –∞—Ä–±–∏—Ç—Ä–∞–∂: {dex_cex_status}\n"
            f"üèõ –ê–∫—Ç–∏–≤–Ω—ã–µ –±–∏—Ä–∂–∏: MEXC Futures\n"
            f"üìà –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–≤—è–∑–æ–∫: {active_opportunities}\n"
            f"‚ö° –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞—Ä: {SETTINGS['DEX_CEX']['MAX_PAIRS_TO_MONITOR']}",
            parse_mode="HTML",
            reply_markup=get_main_keyboard()
        )
        return

    elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        await update.message.reply_text(
            "ü§ñ <b>DEX-CEX Arbitrage Bot</b>\n\n"
            "üîç <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>\n"
            "‚Ä¢ –ë–æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç —Ü–µ–Ω—ã –Ω–∞ DexScreener (DEX) –∏ MEXC Futures (CEX)\n"
            "‚Ä¢ –ü—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ —Ä–∞–∑–Ω–∏—Ü—ã —Ü–µ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∏–≥–Ω–∞–ª:\n"
            "  üü¢ LONG: –¶–µ–Ω–∞ –Ω–∞ DEX –≤—ã—à–µ - –®–û–†–¢ –Ω–∞ MEXC\n"
            "  üî¥ SHORT: –¶–µ–Ω–∞ –Ω–∞ DEX –Ω–∏–∂–µ - –õ–û–ù–ì –Ω–∞ MEXC\n"
            "‚Ä¢ –ü—Ä–∏ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ü–µ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–¥–µ–ª–∫–∏\n\n"
            "üìä <b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∫–∏</b> - —Ç–µ–∫—É—â–∏–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏\n"
            "üîß <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b> - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞—Ä–±–∏—Ç—Ä–∞–∂–∞\n"
            "üìä <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞</b> - —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ\n\n"
            "‚ö° <i>–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</i>",
            parse_mode="HTML",
            reply_markup=get_main_keyboard()
        )
        return

    await update.message.reply_text(
        "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
        reply_markup=get_main_keyboard()
    )

async def handle_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    text = update.message.text

    if text == "üîÑ DEX-CEX –ê—Ä–±–∏—Ç—Ä–∞–∂":
        await update.message.reply_text(
            "üîÑ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ DEX-CEX –∞—Ä–±–∏—Ç—Ä–∞–∂–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
            parse_mode="HTML",
            reply_markup=get_dex_cex_settings_keyboard()
        )
        return DEX_CEX_SETTINGS

    elif text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await update.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_keyboard()
        )
        return ConversationHandler.END

    await update.message.reply_text(
        "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
        reply_markup=get_settings_keyboard()
    )
    return SETTINGS_MENU

async def handle_dex_cex_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ DEX-CEX –∞—Ä–±–∏—Ç—Ä–∞–∂–∞"""
    text = update.message.text

    if text == "üîô –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏":
        await update.message.reply_text(
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            parse_mode="HTML",
            reply_markup=get_settings_keyboard()
        )
        return SETTINGS_MENU

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if text.startswith("–ü–æ—Ä–æ–≥:"):
        context.user_data['setting'] = ('DEX_CEX', 'THRESHOLD_PERCENT')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ—Ä–æ–≥–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ (—Ç–µ–∫—É—â–µ–µ: {SETTINGS['DEX_CEX']['THRESHOLD_PERCENT']}%):"
        )
        return SETTING_VALUE

    elif text.startswith("–ú–∞–∫—Å. –ø–æ—Ä–æ–≥:"):
        context.user_data['setting'] = ('DEX_CEX', 'MAX_THRESHOLD_PERCENT')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞ (—Ç–µ–∫—É—â–µ–µ: {SETTINGS['DEX_CEX']['MAX_THRESHOLD_PERCENT']}%):"
        )
        return SETTING_VALUE

    elif text.startswith("–ò–Ω—Ç–µ—Ä–≤–∞–ª:"):
        context.user_data['setting'] = ('DEX_CEX', 'CHECK_INTERVAL')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Ç–µ–∫—É—â–µ–µ: {SETTINGS['DEX_CEX']['CHECK_INTERVAL']} —Å–µ–∫):"
        )
        return SETTING_VALUE

    elif text.startswith("–õ–∏–º–∏–¥–Ω–æ—Å—Ç—å:"):
        context.user_data['setting'] = ('DEX_CEX', 'MIN_LIQUIDITY_USD')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ (—Ç–µ–∫—É—â–µ–µ: ${SETTINGS['DEX_CEX']['MIN_LIQUIDITY_USD']}):"
        )
        return SETTING_VALUE

    elif text.startswith("–û–±—ä–µ–º:"):
        context.user_data['setting'] = ('DEX_CEX', 'MIN_VOLUME_USD')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–º–∞ (—Ç–µ–∫—É—â–µ–µ: ${SETTINGS['DEX_CEX']['MIN_VOLUME_USD']}):"
        )
        return SETTING_VALUE

    elif text.startswith("–ü–∞—Ä—ã:"):
        context.user_data['setting'] = ('DEX_CEX', 'MAX_PAIRS_TO_MONITOR')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞—Ä (—Ç–µ–∫—É—â–µ–µ: {SETTINGS['DEX_CEX']['MAX_PAIRS_TO_MONITOR']}):"
        )
        return SETTING_VALUE

    elif text.startswith("–ú–∏–Ω. —Å—É–º–º–∞:"):
        context.user_data['setting'] = ('DEX_CEX', 'MIN_ENTRY_AMOUNT_USDT')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã –≤—Ö–æ–¥–∞ (—Ç–µ–∫—É—â–µ–µ: ${SETTINGS['DEX_CEX']['MIN_ENTRY_AMOUNT_USDT']}):"
        )
        return SETTING_VALUE

    elif text.startswith("–ú–∞–∫—Å. —Å—É–º–º–∞:"):
        context.user_data['setting'] = ('DEX_CEX', 'MAX_ENTRY_AMOUNT_USDT')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã –≤—Ö–æ–¥–∞ (—Ç–µ–∫—É—â–µ–µ: ${SETTINGS['DEX_CEX']['MAX_ENTRY_AMOUNT_USDT']}):"
        )
        return SETTING_VALUE

    elif text.startswith("–ü—Ä–∏–±—ã–ª—å:"):
        context.user_data['setting'] = ('DEX_CEX', 'MIN_NET_PROFIT_USD')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏ (—Ç–µ–∫—É—â–µ–µ: ${SETTINGS['DEX_CEX']['MIN_NET_PROFIT_USD']}):"
        )
        return SETTING_VALUE

    elif text.startswith("–°—Ö–æ–¥–∏–º–æ—Å—Ç—å:"):
        context.user_data['setting'] = ('DEX_CEX', 'PRICE_CONVERGENCE_THRESHOLD')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ—Ä–æ–≥–∞ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ü–µ–Ω (—Ç–µ–∫—É—â–µ–µ: {SETTINGS['DEX_CEX']['PRICE_CONVERGENCE_THRESHOLD']}%):"
        )
        return SETTING_VALUE

    elif text.startswith("–£–≤–µ–¥. —Å—Ä–∞–≤–Ω.:"):
        SETTINGS['DEX_CEX']['PRICE_CONVERGENCE_ENABLED'] = not SETTINGS['DEX_CEX']['PRICE_CONVERGENCE_ENABLED']
        status = "üîî –í–ö–õ" if SETTINGS['DEX_CEX']['PRICE_CONVERGENCE_ENABLED'] else "üîï –í–´–ö–õ"
        await update.message.reply_text(
            f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ —Ü–µ–Ω {status}",
            reply_markup=get_dex_cex_settings_keyboard()
        )
        return DEX_CEX_SETTINGS

    elif text.startswith("–°—Ç–∞—Ç—É—Å:"):
        SETTINGS['DEX_CEX']['ENABLED'] = not SETTINGS['DEX_CEX']['ENABLED']
        status = "–í–ö–õ" if SETTINGS['DEX_CEX']['ENABLED'] else "–í–´–ö–õ"
        await update.message.reply_text(
            f"‚úÖ DEX-CEX –∞—Ä–±–∏—Ç—Ä–∞–∂ {status}",
            reply_markup=get_dex_cex_settings_keyboard()
        )
        return DEX_CEX_SETTINGS

    await update.message.reply_text(
        "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
        reply_markup=get_dex_cex_settings_keyboard()
    )
    return DEX_CEX_SETTINGS

async def handle_setting_value(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    text = update.message.text
    setting_info = context.user_data.get('setting')

    if not setting_info:
        await update.message.reply_text(
            "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=get_settings_keyboard()
        )
        return SETTINGS_MENU

    arb_type, setting_key = setting_info

    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        if setting_key in ['THRESHOLD_PERCENT', 'MAX_THRESHOLD_PERCENT', 'PRICE_CONVERGENCE_THRESHOLD']:
            value = float(text)
        elif setting_key in ['CHECK_INTERVAL', 'MAX_PAIRS_TO_MONITOR']:
            value = int(text)
        elif setting_key in ['MIN_LIQUIDITY_USD', 'MIN_VOLUME_USD', 'MIN_ENTRY_AMOUNT_USDT', 
                           'MAX_ENTRY_AMOUNT_USDT', 'MIN_NET_PROFIT_USD']:
            value = float(text)
        else:
            value = text

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        SETTINGS[arb_type][setting_key] = value

        await update.message.reply_text(
            f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ {setting_key} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {text}",
            reply_markup=get_dex_cex_settings_keyboard()
        )

        return DEX_CEX_SETTINGS

    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.",
            reply_markup=get_dex_cex_settings_keyboard()
        )
        return SETTING_VALUE

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞"""
    await update.message.reply_text(
        "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=get_main_keyboard()
    )
    return ConversationHandler.END

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}", exc_info=context.error)

    if update and update.effective_message:
        await update.effective_message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard()
        )

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # Conversation handler –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
        ],
        states={
            SETTINGS_MENU: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_settings)
            ],
            DEX_CEX_SETTINGS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_dex_cex_settings)
            ],
            SETTING_VALUE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_setting_value)
            ]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(conv_handler)
    application.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—É—é –∑–∞–¥–∞—á—É –≤ —Ñ–æ–Ω–µ
    loop = asyncio.get_event_loop()
    loop.create_task(check_dex_cex_arbitrage())

    logger.info("DEX-CEX Arbitrage Bot –∑–∞–ø—É—â–µ–Ω")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
