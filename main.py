import ccxt
import asyncio
from telegram import Bot, Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
    ConversationHandler
)
from telegram.error import TelegramError
import logging
from datetime import datetime, timezone, timedelta
from collections import defaultdict
import html
import re
import json
import os
import time
import aiohttp

# –û–±—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = "7990034184:AAFTx--E5GE0NIPA0Yghr6KpBC80aVtSACs"
TELEGRAM_CHAT_IDS = ["1167694150", "7916502470", "5381553894", "1111230981"]

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–ø–æ—Ç–æ–≤–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
DEFAULT_SPOT_SETTINGS = {
    "THRESHOLD_PERCENT": 0.5,
    "MAX_THRESHOLD_PERCENT": 40,
    "CHECK_INTERVAL": 30,
    "MIN_EXCHANGES_FOR_PAIR": 2,
    "MIN_VOLUME_USD": 100000,
    "MIN_ENTRY_AMOUNT_USDT": 5,
    "MAX_ENTRY_AMOUNT_USDT": 350,
    "MAX_IMPACT_PERCENT": 0.5,
    "ORDER_BOOK_DEPTH": 10,
    "MIN_NET_PROFIT_USD": 4,
    "ENABLED": True,
    "PRICE_CONVERGENCE_THRESHOLD": 0.5,
    "PRICE_CONVERGENCE_ENABLED": True
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ DEX –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–æ–≤
DEX_SETTINGS = {
    "1inch": {"ENABLED": True},
    "matcha": {"ENABLED": True},
    "paraswap": {"ENABLED": True},
    "uniswap": {"ENABLED": True},
    "curve": {"ENABLED": True},
    "balancer": {"ENABLED": True},
    "sushiswap": {"ENABLED": True},
    "quickswap": {"ENABLED": True},
    "camelot": {"ENABLED": True},
    "traderjoe": {"ENABLED": True},
    "raydium": {"ENABLED": True},
    "orca": {"ENABLED": True},
    "jupiter": {"ENABLED": True},
    "stonfi": {"ENABLED": True},
    "dedust": {"ENABLED": True},
    "pangolin": {"ENABLED": True},
    "osmosis": {"ENABLED": True},
    "maverick": {"ENABLED": True},
    "thorswap": {"ENABLED": True}
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SETTINGS_MENU, SPOT_SETTINGS, EXCHANGE_SETTINGS_MENU, SETTING_VALUE, COIN_SELECTION = range(5)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger("CryptoArbBot")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
price_convergence_history = defaultdict(dict)
last_convergence_notification = defaultdict(dict)
arbitrage_start_times = defaultdict(dict)
current_arbitrage_opportunities = defaultdict(dict)
previous_arbitrage_opportunities = defaultdict(dict)
sent_arbitrage_opportunities = defaultdict(dict)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ DEX
LAST_DEX_SETTINGS = None

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
def load_settings():
    try:
        if os.path.exists('settings.json'):
            with open('settings.json', 'r') as f:
                return json.load(f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    return {
        "SPOT": DEFAULT_SPOT_SETTINGS.copy(),
        "DEX": DEX_SETTINGS.copy()
    }

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
def save_settings(settings):
    try:
        with open('settings.json', 'w') as f:
            json.dump(settings, f, indent=4)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
SHARED_BOT = None
DEX_LOADED = {}
SETTINGS = load_settings()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è DEX –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–æ–≤ –∏ –±–∏—Ä–∂
DEX_AGGREGATORS = {
    "1inch": {
        "api_url": "https://api.1inch.io/v4.0/1/quote",
        "taker_fee": 0.003,
        "url_format": lambda s: f"https://app.1inch.io/#/1/swap/ETH/{s}",
        "emoji": "üîÑ",
        "chains": ["Ethereum", "Polygon", "Arbitrum", "Optimism", "Base"]
    },
    "matcha": {
        "api_url": "https://api.matcha.xyz/api/v2/quote",
        "taker_fee": 0.003,
        "url_format": lambda s: f"https://matcha.xyz/tokens/ethereum/{s}",
        "emoji": "üçµ",
        "chains": ["Ethereum", "Polygon", "Arbitrum", "Optimism"]
    },
    "paraswap": {
        "api_url": "https://apiv5.paraswap.io/prices",
        "taker_fee": 0.003,
        "url_format": lambda s: f"https://app.paraswap.io/#/{s}/ETH/1?network=1",
        "emoji": "üîÑ",
        "chains": ["Ethereum", "Polygon", "Arbitrum", "Optimism", "Base"]
    },
    "uniswap": {
        "api_url": "https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v3",
        "taker_fee": 0.003,
        "url_format": lambda s: f"https://app.uniswap.org/swap?outputCurrency={s}",
        "emoji": "ü¶Ñ",
        "chains": ["Ethereum", "Polygon", "Arbitrum", "Optimism", "Base"]
    },
    "curve": {
        "api_url": "https://api.curve.fi/api/getPools/ethereum",
        "taker_fee": 0.004,
        "url_format": lambda s: f"https://curve.fi/#/ethereum/swap",
        "emoji": "üìà",
        "chains": ["Ethereum", "Polygon", "Arbitrum"]
    },
    "balancer": {
        "api_url": "https://api.thegraph.com/subgraphs/name/balancer-labs/balancer-v2",
        "taker_fee": 0.003,
        "url_format": lambda s: f"https://app.balancer.fi/#/trade/ethereum/ETH/{s}",
        "emoji": "‚öñÔ∏è",
        "chains": ["Ethereum", "Polygon", "Arbitrum"]
    },
    "sushiswap": {
        "api_url": "https://api.thegraph.com/subgraphs/name/sushiswap/exchange",
        "taker_fee": 0.003,
        "url_format": lambda s: f"https://app.sushi.com/swap?outputCurrency={s}",
        "emoji": "üç£",
        "chains": ["Ethereum", "Polygon", "Arbitrum", "Optimism"]
    },
    "quickswap": {
        "api_url": "https://api.thegraph.com/subgraphs/name/sameepsi/quickswap03",
        "taker_fee": 0.003,
        "url_format": lambda s: f"https://quickswap.exchange/#/swap?outputCurrency={s}",
        "emoji": "üöÄ",
        "chains": ["Polygon"]
    },
    "camelot": {
        "api_url": "https://api.camelot.exchange/liquidity-pools",
        "taker_fee": 0.0025,
        "url_format": lambda s: f"https://app.camelot.exchange/",
        "emoji": "üê´",
        "chains": ["Arbitrum"]
    },
    "traderjoe": {
        "api_url": "https://api.traderjoexyz.com/priceusd",
        "taker_fee": 0.003,
        "url_format": lambda s: f"https://traderjoexyz.com/avalanche/trade",
        "emoji": "üë®‚Äçüíº",
        "chains": ["Avalanche"]
    },
    "raydium": {
        "api_url": "https://api.raydium.io/v2/sdk/token/price",
        "taker_fee": 0.0025,
        "url_format": lambda s: f"https://raydium.io/swap/",
        "emoji": "‚ö°",
        "chains": ["Solana"]
    },
    "orca": {
        "api_url": "https://api.orca.so/prices",
        "taker_fee": 0.003,
        "url_format": lambda s: f"https://www.orca.so/swap",
        "emoji": "üêã",
        "chains": ["Solana"]
    },
    "jupiter": {
        "api_url": "https://quote-api.jup.ag/v6/quote",
        "taker_fee": 0.0005,
        "url_format": lambda s: f"https://jup.ag/swap/SOL-{s}",
        "emoji": "ü™ê",
        "chains": ["Solana"]
    },
    "stonfi": {
        "api_url": "https://api.ston.fi/v1/tokens",
        "taker_fee": 0.003,
        "url_format": lambda s: f"https://app.ston.fi/swap",
        "emoji": "üíé",
        "chains": ["TON"]
    },
    "dedust": {
        "api_url": "https://api.dedust.io/v1/pools",
        "taker_fee": 0.003,
        "url_format": lambda s: f"https://dedust.io/swap/TON/{s}",
        "emoji": "üåä",
        "chains": ["TON"]
    },
    "pangolin": {
        "api_url": "https://api.pangolin.exchange/api/v1/tokens",
        "taker_fee": 0.003,
        "url_format": lambda s: f"https://app.pangolin.exchange/swap",
        "emoji": "ü¶é",
        "chains": ["Avalanche"]
    },
    "osmosis": {
        "api_url": "https://api-osmosis.imperator.co/tokens/v2/all",
        "taker_fee": 0.002,
        "url_format": lambda s: f"https://app.osmosis.zone/assets",
        "emoji": "üî¨",
        "chains": ["Cosmos"]
    },
    "maverick": {
        "api_url": "https://api.mav.xyz/api/pools",
        "taker_fee": 0.002,
        "url_format": lambda s: f"https://app.mav.xyz/swap",
        "emoji": "üéØ",
        "chains": ["Ethereum", "Base"]
    },
    "thorswap": {
        "api_url": "https://api.thorswap.net/aggregator/tokens/price",
        "taker_fee": 0.003,
        "url_format": lambda s: f"https://app.thorswap.finance/swap",
        "emoji": "‚ö°",
        "chains": ["Multi-Chain"]
    }
}

# –¢–æ–∫–µ–Ω –∞–¥—Ä–µ—Å–∞ –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
TOKEN_ADDRESSES = {
    "ETH": "0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE",
    "USDT": "0xdAC17F958D2ee523a2206206994597C13D831ec7",
    "USDC": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
    "DAI": "0x6B175474E89094C44Da98b954EedeAC495271d0F",
    "WBTC": "0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599",
    "MATIC": "0x7D1AfA7B718fb893dB30A3aBcC0f6e56Ca6C8c9a",
    "AVAX": "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",
    "SOL": "So11111111111111111111111111111111111111112",
    "BNB": "0xB8c77482e45F1F44dE1745F52C74426C631bDD52"
}

# Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    return ReplyKeyboardMarkup([
        [KeyboardButton("üìà –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∫–∏")], [KeyboardButton("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
        [KeyboardButton("üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞"), KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
    ], resize_keyboard=True)

def get_settings_keyboard():
    return ReplyKeyboardMarkup([
        [KeyboardButton("üöÄÔ∏è DEX –ê—Ä–±–∏—Ç—Ä–∞–∂")],
        [KeyboardButton("üèõ DEX –ê–≥—Ä–µ–≥–∞—Ç–æ—Ä—ã"), KeyboardButton("üîÑ –°–±—Ä–æ—Å")],
        [KeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ], resize_keyboard=True)

def get_spot_settings_keyboard():
    spot = SETTINGS['SPOT']
    return ReplyKeyboardMarkup([
        [KeyboardButton(f"–ü–æ—Ä–æ–≥: {spot['THRESHOLD_PERCENT']}%"),
         KeyboardButton(f"–ú–∞–∫—Å. –ø–æ—Ä–æ–≥: {spot['MAX_THRESHOLD_PERCENT']}%")],
        [KeyboardButton(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª: {spot['CHECK_INTERVAL']}—Å"),
         KeyboardButton(f"–û–±—ä–µ–º: ${spot['MIN_VOLUME_USD'] / 1000:.0f}K")],
        [KeyboardButton(f"–ú–∏–Ω. —Å—É–º–º–∞: ${spot['MIN_ENTRY_AMOUNT_USDT']}"),
         KeyboardButton(f"–ú–∞–∫—Å. —Å—É–º–º–∞: ${spot['MAX_ENTRY_AMOUNT_USDT']}")],
        [KeyboardButton(f"–í–ª–∏—è–Ω–∏–µ: {spot['MAX_IMPACT_PERCENT']}%"),
         KeyboardButton(f"–°—Ç–∞–∫–∞–Ω: {spot['ORDER_BOOK_DEPTH']}")],
        [KeyboardButton(f"–ü—Ä–∏–±—ã–ª—å: ${spot['MIN_NET_PROFIT_USD']}"),
         KeyboardButton(f"–°—Ç–∞—Ç—É—Å: {'–í–ö–õ' if spot['ENABLED'] else '–í–´–ö–õ'}")],
        [KeyboardButton(f"–°—Ö–æ–¥–∏–º–æ—Å—Ç—å: {spot['PRICE_CONVERGENCE_THRESHOLD']}%"),
         KeyboardButton(f"–£–≤–µ–¥. —Å—Ä–∞–≤–Ω.: {'üîî' if spot['PRICE_CONVERGENCE_ENABLED'] else 'üîï'}")],
        [KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")]
    ], resize_keyboard=True)

def get_dex_settings_keyboard():
    keyboard = []
    row = []
    for i, (dex, config) in enumerate(SETTINGS['DEX'].items()):
        status = "‚úÖ" if config['ENABLED'] else "‚ùå"
        row.append(KeyboardButton(f"{dex}: {status}"))
        if (i + 1) % 2 == 0:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    keyboard.append([KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def send_telegram_message(message: str, chat_id: str = None, reply_markup: ReplyKeyboardMarkup = None):
    global SHARED_BOT
    if not SHARED_BOT:
        SHARED_BOT = Bot(token=TELEGRAM_TOKEN)

    targets = [chat_id] if chat_id else TELEGRAM_CHAT_IDS

    for target_id in targets:
        try:
            await SHARED_BOT.send_message(
                chat_id=target_id,
                text=message,
                parse_mode="HTML",
                disable_web_page_preview=True,
                reply_markup=reply_markup
            )
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {target_id}")
        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ {target_id}: {e}")

def format_duration(seconds):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    if seconds < 60:
        return f"{int(seconds)} —Å–µ–∫"
    elif seconds < 3600:
        minutes = int(seconds // 60)
        seconds_remaining = int(seconds % 60)
        return f"{minutes} –º–∏–Ω {seconds_remaining} —Å–µ–∫"
    else:
        hours = int(seconds // 3600)
        minutes = int((seconds % 3600) // 60)
        return f"{hours} —á {minutes} –º–∏–Ω"

def add_opportunity_to_sent(arb_type: str, base: str, exchange1: str, exchange2: str, spread: float,
                            price1: float, price2: float, volume1: float = None, volume2: float = None,
                            min_entry_amount: float = None, max_entry_amount: float = None,
                            profit_min: dict = None, profit_max: dict = None):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–≤—è–∑–∫—É –≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"""
    key = f"{arb_type}_{base}_{exchange1}_{exchange2}"
    current_time = time.time()

    sent_arbitrage_opportunities[key] = {
        'arb_type': arb_type,
        'base': base,
        'exchange1': exchange1,
        'exchange2': exchange2,
        'spread': spread,
        'price1': price1,
        'price2': price2,
        'volume1': volume1,
        'volume2': volume2,
        'min_entry_amount': min_entry_amount,
        'max_entry_amount': max_entry_amount,
        'profit_min': profit_min,
        'profit_max': profit_max,
        'start_time': current_time,
        'last_updated': current_time
    }

    # –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ current_arbitrage_opportunities –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å–≤—è–∑–∫–∞—Ö
    current_arbitrage_opportunities[key] = sent_arbitrage_opportunities[key].copy()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —ç—Ç–æ–π —Å–≤—è–∑–∫–∏
    arbitrage_start_times[key] = current_time
    previous_arbitrage_opportunities[key] = True

    logger.info(f"–°–≤—è–∑–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ: {key}")

async def send_price_convergence_notification(arb_type: str, base: str, exchange1: str, exchange2: str,
                                              price1: float, price2: float, spread: float, volume1: float = None,
                                              volume2: float = None, duration: float = None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ —Ü–µ–Ω —Å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –∏ —É–¥–∞–ª—è–µ—Ç —Å–≤—è–∑–∫—É –∏–∑ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö"""

    if not SETTINGS[arb_type]['PRICE_CONVERGENCE_ENABLED']:
        return

    convergence_threshold = SETTINGS[arb_type]['PRICE_CONVERGENCE_THRESHOLD']

    if abs(spread) > convergence_threshold:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —ç—Ç–∞ —Å–≤—è–∑–∫–∞ —Ä–∞–Ω–µ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é
    previous_key = f"{arb_type}_{base}_{exchange1}_{exchange2}"
    if previous_key not in sent_arbitrage_opportunities:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π —Å–≤—è–∑–∫–∏
    current_time = time.time()
    notification_key = f"{arb_type}_{base}_{exchange1}_{exchange2}"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (5 –º–∏–Ω—É—Ç)
    if (notification_key in last_convergence_notification and
            current_time - last_convergence_notification[notification_key] < 300):
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    last_convergence_notification[notification_key] = current_time

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
    arb_type_name = "DEX –ê—Ä–±–∏—Ç—Ä–∞–∂"
    emoji = "üöÄ"

    utc_plus_3 = timezone(timedelta(hours=3))
    current_time_str = datetime.now(utc_plus_3).strftime('%H:%M:%S')

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–º—ã
    def format_volume(vol):
        if vol is None:
            return "N/A"
        if vol >= 1_000_000:
            return f"${vol / 1_000_000:.1f}M"
        if vol >= 1_000:
            return f"${vol / 1_000:.1f}K"
        return f"${vol:.1f}"

    volume1_str = format_volume(volume1)
    volume2_str = format_volume(volume2)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    duration_str = format_duration(duration) if duration is not None else "N/A"

    # –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è DEX
    dex1_config = DEX_AGGREGATORS[exchange1]
    dex2_config = DEX_AGGREGATORS[exchange2]
    
    url1 = dex1_config["url_format"](TOKEN_ADDRESSES.get(base, base))
    url2 = dex2_config["url_format"](TOKEN_ADDRESSES.get(base, base))

    safe_base = html.escape(base)

    # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    message = (
        f"üéØ <b>–¶–ï–ù–´ –°–†–ê–í–ù–ò–õ–ò–°–¨!</b> {emoji}\n\n"
        f"‚ñ´Ô∏è <b>–¢–∏–ø:</b> {arb_type_name}\n"
        f"‚ñ´Ô∏è <b>–ú–æ–Ω–µ—Ç–∞:</b> <code>{safe_base}</code>\n"
        f"‚ñ´Ô∏è <b>–†–∞–∑–Ω–∏—Ü–∞ —Ü–µ–Ω:</b> <code>{spread:.2f}%</code>\n"
        f"‚ñ´Ô∏è <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—Ä–±–∏—Ç—Ä–∞–∂–∞:</b> {duration_str}\n\n"

        f"üü¢ <b><a href='{url1}'>{exchange1.upper()}</a>:</b>\n"
        f"   üí∞ –¶–µ–Ω–∞: <code>${price1:.8f}</code>\n"
        f"   üìä –û–±—ä–µ–º: {volume1_str}\n\n"

        f"üîµ <b><a href='{url2}'>{exchange2.upper()}</a>:</b>\n"
        f"   üí∞ –¶–µ–Ω–∞: <code>${price2:.8f}</code>\n"
        f"   üìä –û–±—ä–µ–º: {volume2_str}\n\n"

        f"‚è∞ <i>{current_time_str}</i>\n"
        f"üîî <i>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ü–µ–Ω</i>"
    )

    await send_telegram_message(message)
    logger.info(
        f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ü–µ–Ω –¥–ª—è {base} ({arb_type}): {spread:.4f}%, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_str}")

    # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∫—É –∏–∑ –≤—Å–µ—Ö —Å–ª–æ–≤–∞—Ä–µ–π, —á—Ç–æ–±—ã –æ–Ω–∞ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–ª–∞—Å—å –≤ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö
    key = f"{arb_type}_{base}_{exchange1}_{exchange2}"
    if key in sent_arbitrage_opportunities:
        del sent_arbitrage_opportunities[key]
    if key in current_arbitrage_opportunities:
        del current_arbitrage_opportunities[key]
    if key in arbitrage_start_times:
        del arbitrage_start_times[key]
    if key in previous_arbitrage_opportunities:
        del previous_arbitrage_opportunities[key]

    logger.info(f"–°–≤—è–∑–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –ø–æ—Å–ª–µ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ü–µ–Ω: {key}")

def update_arbitrage_duration(arb_type: str, base: str, exchange1: str, exchange2: str, spread: float):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"""
    key = f"{arb_type}_{base}_{exchange1}_{exchange2}"
    current_time = time.time()

    # –ï—Å–ª–∏ —Å–≤—è–∑–∫–∞ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram –∏ —Å–ø—Ä–µ–¥ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ø–æ—Ä–æ–≥ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ - –Ω–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å—á–µ—Ç
    if (key in sent_arbitrage_opportunities and
            SETTINGS[arb_type]['THRESHOLD_PERCENT'] <= spread <= SETTINGS[arb_type]['MAX_THRESHOLD_PERCENT'] and
            key not in arbitrage_start_times):
        arbitrage_start_times[key] = current_time
        previous_arbitrage_opportunities[key] = True
        logger.debug(f"–ù–∞—á–∞–ª–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –¥–ª—è {key}")

    # –ï—Å–ª–∏ —Å–ø—Ä–µ–¥ —É–ø–∞–ª –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏ - –≤—ã—á–∏—Å–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –æ—á–∏—â–∞–µ–º
    elif (spread <= SETTINGS[arb_type]['PRICE_CONVERGENCE_THRESHOLD'] and
          key in arbitrage_start_times):
        start_time = arbitrage_start_times.pop(key)
        duration = current_time - start_time
        logger.debug(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –¥–ª—è {key}, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration:.0f} —Å–µ–∫")
        return duration

    return None

def update_current_arbitrage_opportunities(arb_type: str, base: str, exchange1: str, exchange2: str, spread: float,
                                           price1: float, price2: float, volume1: float = None, volume2: float = None,
                                           min_entry_amount: float = None, max_entry_amount: float = None,
                                           profit_min: dict = None, profit_max: dict = None):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–≤—è–∑–æ–∫)"""
    key = f"{arb_type}_{base}_{exchange1}_{exchange2}"
    current_time = time.time()

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–≤—è–∑–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram
    if key in sent_arbitrage_opportunities:
        current_arbitrage_opportunities[key] = {
            'arb_type': arb_type,
            'base': base,
            'exchange1': exchange1,
            'exchange2': exchange2,
            'spread': spread,
            'price1': price1,
            'price2': price2,
            'volume1': volume1,
            'volume2': volume2,
            'min_entry_amount': min_entry_amount,
            'max_entry_amount': max_entry_amount,
            'profit_min': profit_min,
            'profit_max': profit_max,
            'start_time': sent_arbitrage_opportunities[key]['start_time'],
            'last_updated': current_time
        }

async def get_current_arbitrage_opportunities():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ (—Ç–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –≤ Telegram)"""

    # –û—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
    cleanup_old_opportunities()

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–≤—è–∑–∫–∏
    filtered_opportunities = {}
    current_time = time.time()

    for key, opportunity in sent_arbitrage_opportunities.items():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–≤—è–∑–∫–∞ –Ω–µ —É—Å—Ç–∞—Ä–µ–ª–∞
        if (current_time - opportunity['last_updated']) <= 3600:
            filtered_opportunities[key] = opportunity

    if not filtered_opportunities:
        return "üìä <b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ DEX –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ —Å–≤—è–∑–∫–∏</b>\n\n" \
               "‚è≥ –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ."

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø—É –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
    spot_opportunities = []

    for key, opportunity in filtered_opportunities.items():
        arb_type = opportunity['arb_type']
        duration = time.time() - opportunity['start_time']

        opportunity_info = {
            'base': opportunity['base'],
            'exchange1': opportunity['exchange1'],
            'exchange2': opportunity['exchange2'],
            'spread': opportunity['spread'],
            'price1': opportunity['price1'],
            'price2': opportunity['price2'],
            'min_entry_amount': opportunity.get('min_entry_amount'),
            'max_entry_amount': opportunity.get('max_entry_amount'),
            'profit_min': opportunity.get('profit_min'),
            'profit_max': opportunity.get('profit_max'),
            'duration': duration
        }

        if arb_type == 'SPOT':
            spot_opportunities.append(opportunity_info)

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–ø—Ä–µ–¥—É (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
    spot_opportunities.sort(key=lambda x: x['spread'], reverse=True)

    utc_plus_3 = timezone(timedelta(hours=3))
    current_time_str = datetime.now(utc_plus_3).strftime('%H:%M:%S')

    message = "üìä <b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ DEX –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ —Å–≤—è–∑–∫–∏</b>\n\n"

    # –î–æ–±–∞–≤–ª—è–µ–º DEX –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
    if spot_opportunities:
        message += "üöÄ <b>DEX –ê—Ä–±–∏—Ç—Ä–∞–∂:</b>\n"
        for opp in spot_opportunities:
            duration_str = format_duration(opp['duration'])

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –≤—Ö–æ–¥–∞ –∏ –ø—Ä–∏–±—ã–ª—å
            entry_amount_str = f"${opp['min_entry_amount']:.2f}-${opp['max_entry_amount']:.2f}" if opp.get(
                'min_entry_amount') and opp.get('max_entry_amount') else "N/A"

            profit_str = "N/A"
            if opp.get('profit_min') and opp.get('profit_max'):
                profit_min_net = opp['profit_min'].get('net', 0)
                profit_max_net = opp['profit_max'].get('net', 0)
                profit_str = f"${profit_min_net:.2f}-${profit_max_net:.2f}"

            message += (
                f"   ‚ñ´Ô∏è <code>{opp['base']}</code>: {opp['spread']:.2f}%\n"
                f"      üü¢ {opp['exchange1'].upper()} ‚Üí üî¥ {opp['exchange2'].upper()}\n"
                f"      üí∞ –°—É–º–º–∞ –≤—Ö–æ–¥–∞: {entry_amount_str}\n"
                f"      üíµ –ü—Ä–∏–±—ã–ª—å: {profit_str}\n"
                f"      ‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_str}\n\n"
            )

    message += f"‚è∞ <i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {current_time_str}</i>\n"
    message += f"üìà <i>–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–≤—è–∑–æ–∫: {len(filtered_opportunities)}</i>"

    return message

def cleanup_old_opportunities():
    """–û—á–∏—â–∞–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ (—Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞)"""
    current_time = time.time()
    keys_to_remove = []

    for key, opportunity in sent_arbitrage_opportunities.items():
        # –£–¥–∞–ª—è–µ–º –µ—Å–ª–∏ —Å–≤—è–∑–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞ (—Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞)
        if current_time - opportunity['last_updated'] > 3600:
            keys_to_remove.append(key)

    for key in keys_to_remove:
        del sent_arbitrage_opportunities[key]
        if key in current_arbitrage_opportunities:
            del current_arbitrage_opportunities[key]
        if key in arbitrage_start_times:
            del arbitrage_start_times[key]
        logger.debug(f"–£–¥–∞–ª–µ–Ω–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∞—è —Å–≤—è–∑–∫–∞: {key}")

async def fetch_dex_price(dex_name: str, base_token: str, quote_token: str = "USDT"):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—É —Å DEX –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞"""
    try:
        dex_config = DEX_AGGREGATORS[dex_name]
        
        # –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å mock –¥–∞–Ω–Ω—ã–µ, —Ç–∞–∫ –∫–∞–∫ —Ä–µ–∞–ª—å–Ω—ã–µ API —Ç—Ä–µ–±—É—é—Ç —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ API –≤—ã–∑–æ–≤—ã –∫ DEX –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞–º
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—É—é —Ü–µ–Ω—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ DEX –∏ —Ç–æ–∫–µ–Ω–∞
        import hashlib
        price_hash = hashlib.md5(f"{dex_name}_{base_token}".encode()).hexdigest()
        price = 100 + (int(price_hash[:8], 16) % 1000) / 1000  # –¶–µ–Ω–∞ –º–µ–∂–¥—É 100 –∏ 101
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—É—é –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        import random
        price *= (0.95 + random.random() * 0.1)
        
        volume = 1000000 + (int(price_hash[8:16], 16) % 9000000)  # –û–±—ä–µ–º –º–µ–∂–¥—É 1M –∏ 10M
        
        return {
            'price': price,
            'volume': volume,
            'dex': dex_name
        }
        
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã —Å {dex_name}: {e}")
        return None

async def check_dex_arbitrage():
    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ DEX –∞—Ä–±–∏—Ç—Ä–∞–∂–∞")

    if not SETTINGS['SPOT']['ENABLED']:
        logger.info("DEX –∞—Ä–±–∏—Ç—Ä–∞–∂ –æ—Ç–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ DEX
    await load_dex_aggregators()

    if len(DEX_LOADED) < SETTINGS['SPOT']['MIN_EXCHANGES_FOR_PAIR']:
        logger.error(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ DEX –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–æ–≤ (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º {SETTINGS['SPOT']['MIN_EXCHANGES_FOR_PAIR']})")
        return

    # –°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    popular_tokens = ["ETH", "USDC", "DAI", "WBTC", "MATIC", "AVAX"]

    logger.info(f"–ù–∞—á–∞—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ {len(popular_tokens)} —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ {len(DEX_LOADED)} DEX –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞—Ö")

    while SETTINGS['SPOT']['ENABLED']:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ DEX
            if LAST_DEX_SETTINGS != SETTINGS['DEX']:
                logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ DEX. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä—ã...")
                await load_dex_aggregators()

                if len(DEX_LOADED) < SETTINGS['SPOT']['MIN_EXCHANGES_FOR_PAIR']:
                    logger.error(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ DEX –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–æ–≤ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏")
                    await asyncio.sleep(SETTINGS['SPOT']['CHECK_INTERVAL'])
                    continue

            found_opportunities = 0
            for base in popular_tokens:
                try:
                    price_data = {}

                    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã —Å–æ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö DEX –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–æ–≤
                    for dex_name in DEX_LOADED.keys():
                        try:
                            data = await fetch_dex_price(dex_name, base)
                            if data and data['price'] is not None:
                                # –ï—Å–ª–∏ –æ–±—ä–µ–º –∏–∑–≤–µ—Å—Ç–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º
                                if data['volume'] is None:
                                    logger.debug(f"–û–±—ä–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω –¥–ª—è {base} –Ω–∞ {dex_name}, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É")
                                    price_data[dex_name] = data
                                elif data['volume'] >= SETTINGS['SPOT']['MIN_VOLUME_USD']:
                                    price_data[dex_name] = data
                                else:
                                    logger.debug(f"–û–±—ä–µ–º {base} –Ω–∞ {dex_name} —Å–ª–∏—à–∫–æ–º –º–∞–ª: {data['volume']}")
                            else:
                                logger.debug(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {base} –Ω–∞ {dex_name}")
                        except Exception as e:
                            logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö {base} –Ω–∞ {dex_name}: {e}")

                    if len(price_data) < SETTINGS['SPOT']['MIN_EXCHANGES_FOR_PAIR']:
                        continue

                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º DEX –ø–æ —Ü–µ–Ω–µ
                    sorted_data = sorted(price_data.items(), key=lambda x: x[1]['price'])
                    min_dex = sorted_data[0]  # –°–∞–º–∞—è –Ω–∏–∑–∫–∞—è —Ü–µ–Ω–∞ (–ø–æ–∫—É–ø–∫–∞)
                    max_dex = sorted_data[-1]  # –°–∞–º–∞—è –≤—ã—Å–æ–∫–∞—è —Ü–µ–Ω–∞ (–ø—Ä–æ–¥–∞–∂–∞)

                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ø—Ä–µ–¥
                    spread = (max_dex[1]['price'] - min_dex[1]['price']) / min_dex[1]['price'] * 100

                    logger.debug(f"–¢–æ–∫–µ–Ω {base}: —Å–ø—Ä–µ–¥ {spread:.2f}% (min: {min_dex[0]} {min_dex[1]['price']}, max: {max_dex[0]} {max_dex[1]['price']})")

                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö
                    update_current_arbitrage_opportunities(
                        'SPOT', base, min_dex[0], max_dex[0], spread,
                        min_dex[1]['price'], max_dex[1]['price'],
                        min_dex[1]['volume'], max_dex[1]['volume']
                    )

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–æ–¥–∏–º–æ—Å—Ç—å —Ü–µ–Ω –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    duration = update_arbitrage_duration('SPOT', base, min_dex[0], max_dex[0], spread)
                    if duration is not None:
                        await send_price_convergence_notification(
                            'SPOT', base, min_dex[0], max_dex[0],
                            min_dex[1]['price'], max_dex[1]['price'], spread,
                            min_dex[1]['volume'], max_dex[1]['volume'], duration
                        )

                    if SETTINGS['SPOT']['THRESHOLD_PERCENT'] <= spread <= SETTINGS['SPOT']['MAX_THRESHOLD_PERCENT']:
                        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∏—Å—Å–∏–∏
                        buy_fee = DEX_AGGREGATORS[min_dex[0]]["taker_fee"]
                        sell_fee = DEX_AGGREGATORS[max_dex[0]]["taker_fee"]

                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –¥–ª—è MIN_NET_PROFIT_USD
                        min_amount_for_profit = calculate_min_entry_amount(
                            buy_price=min_dex[1]['price'],
                            sell_price=max_dex[1]['price'],
                            min_profit=SETTINGS['SPOT']['MIN_NET_PROFIT_USD'],
                            buy_fee_percent=buy_fee,
                            sell_fee_percent=sell_fee
                        )

                        if min_amount_for_profit <= 0:
                            logger.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º {base}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –ø—Ä–∏–±—ã–ª—å")
                            continue

                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω—É—é —Å—É–º–º—É –≤—Ö–æ–¥–∞
                        max_entry_amount = SETTINGS['SPOT']['MAX_ENTRY_AMOUNT_USDT']
                        min_entry_amount = max(min_amount_for_profit, SETTINGS['SPOT']['MIN_ENTRY_AMOUNT_USDT'])

                        if min_entry_amount > max_entry_amount:
                            logger.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º {base}: min_entry_amount > max_entry_amount")
                            continue

                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å
                        profit_min = calculate_profit(
                            buy_price=min_dex[1]['price'],
                            sell_price=max_dex[1]['price'],
                            amount=min_entry_amount / min_dex[1]['price'],
                            buy_fee_percent=buy_fee,
                            sell_fee_percent=sell_fee
                        )

                        profit_max = calculate_profit(
                            buy_price=min_dex[1]['price'],
                            sell_price=max_dex[1]['price'],
                            amount=max_entry_amount / min_dex[1]['price'],
                            buy_fee_percent=buy_fee,
                            sell_fee_percent=sell_fee
                        )

                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        utc_plus_3 = timezone(timedelta(hours=3))
                        current_time = datetime.now(utc_plus_3).strftime('%H:%M:%S')

                        def format_volume(vol):
                            if vol is None:
                                return "N/A"
                            if vol >= 1_000_000:
                                return f"${vol / 1_000_000:.1f}M"
                            if vol >= 1_000:
                                return f"${vol / 1_000:.1f}K"
                            return f"${vol:.1f}"

                        min_volume = format_volume(min_dex[1]['volume'])
                        max_volume = format_volume(max_dex[1]['volume'])

                        safe_base = html.escape(base)
                        buy_dex_config = DEX_AGGREGATORS[min_dex[0]]
                        sell_dex_config = DEX_AGGREGATORS[max_dex[0]]

                        buy_url = buy_dex_config["url_format"](TOKEN_ADDRESSES.get(base, base))
                        sell_url = sell_dex_config["url_format"](TOKEN_ADDRESSES.get(base, base))

                        message = (
                            f"üöÄ <b>DEX –ê—Ä–±–∏—Ç—Ä–∞–∂:</b> <code>{safe_base}</code>\n"
                            f"‚ñ´Ô∏è <b>–†–∞–∑–Ω–∏—Ü–∞ —Ü–µ–Ω:</b> {spread:.2f}%\n"
                            f"‚ñ´Ô∏è <b>–°—É–º–º–∞ –≤—Ö–æ–¥–∞:</b> ${min_entry_amount:.2f}-${max_entry_amount:.2f}\n\n"
                            f"üü¢ <b>–ü–æ–∫—É–ø–∫–∞ –Ω–∞ <a href='{buy_url}'>{min_dex[0].upper()}</a>:</b> ${min_dex[1]['price']:.8f}\n"
                            f"   <b>–û–±—ä—ë–º:</b> {min_volume}\n"
                            f"   <b>–ö–æ–º–∏—Å—Å–∏—è:</b> {buy_fee * 100:.2f}%\n"
                            f"   <b>–°–µ—Ç–∏:</b> {', '.join(buy_dex_config['chains'])}\n\n"
                            f"üî¥ <b>–ü—Ä–æ–¥–∞–∂–∞ –Ω–∞ <a href='{sell_url}'>{max_dex[0].upper()}</a>:</b> ${max_dex[1]['price']:.8f}\n"
                            f"   <b>–û–±—ä—ë–º:</b> {max_volume}\n"
                            f"   <b>–ö–æ–º–∏—Å—Å–∏—è:</b> {sell_fee * 100:.2f}%\n"
                            f"   <b>–°–µ—Ç–∏:</b> {', '.join(sell_dex_config['chains'])}\n\n"
                            f"üí∞ <b>–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å:</b> ${profit_min['net']:.2f}-${profit_max['net']:.2f} ({profit_max['percent']:.2f}%)\n\n"
                            f"‚è± {current_time}\n"
                        )

                        logger.info(f"–ù–∞–π–¥–µ–Ω–∞ DEX –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å: {base} ({spread:.2f}%)")

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
                        await send_telegram_message(message)

                        # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑–∫—É –≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
                        add_opportunity_to_sent(
                            'SPOT', base, min_dex[0], max_dex[0], spread,
                            min_dex[1]['price'], max_dex[1]['price'],
                            min_dex[1]['volume'], max_dex[1]['volume'],
                            min_entry_amount, max_entry_amount, profit_min, profit_max
                        )

                        found_opportunities += 1

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–∫–µ–Ω–∞ {base}: {e}")

            # –û—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
            cleanup_old_opportunities()

            logger.info(f"–¶–∏–∫–ª DEX –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {found_opportunities}")
            await asyncio.sleep(SETTINGS['SPOT']['CHECK_INTERVAL'])

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ DEX –∞—Ä–±–∏—Ç—Ä–∞–∂–∞: {e}")
            await asyncio.sleep(60)

async def load_dex_aggregators():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç DEX –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    global DEX_LOADED, LAST_DEX_SETTINGS

    aggregators = {}
    for name, config in DEX_AGGREGATORS.items():
        if not SETTINGS['DEX'][name]['ENABLED']:
            continue

        try:
            aggregators[name] = config
            logger.info(f"DEX –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä {name.upper()} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ {name}: {e}")

    DEX_LOADED = aggregators
    LAST_DEX_SETTINGS = SETTINGS['DEX'].copy()
    return aggregators

def calculate_min_entry_amount(buy_price: float, sell_price: float, min_profit: float, buy_fee_percent: float,
                               sell_fee_percent: float) -> float:
    profit_per_unit = sell_price * (1 - sell_fee_percent) - buy_price * (1 + buy_fee_percent)
    if profit_per_unit <= 0:
        return 0
    min_amount = min_profit / profit_per_unit
    return min_amount * buy_price

def calculate_profit(buy_price: float, sell_price: float, amount: float, buy_fee_percent: float,
                     sell_fee_percent: float) -> dict:
    buy_cost = amount * buy_price * (1 + buy_fee_percent)
    sell_revenue = amount * sell_price * (1 - sell_fee_percent)
    net_profit = sell_revenue - buy_cost
    profit_percent = (net_profit / buy_cost) * 100 if buy_cost > 0 else 0

    return {
        "net": net_profit,
        "percent": profit_percent,
        "entry_amount": amount * buy_price
    }

def format_price(price: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ü–µ–Ω—É –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if price is None:
        return "N/A"

    if price >= 1000:
        return f"$<code>{price:.2f}</code>"

    if price >= 1:
        return f"$<code>{price:.4f}</code>"

    return f"$<code>{price:.8f}</code>"

def format_volume(vol: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–±—ä–µ–º –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if vol is None:
        return "N/A"

    if vol >= 1_000_000:
        return f"${vol / 1_000_000:.1f}M"

    if vol >= 1_000:
        return f"${vol / 1_000:.1f}K"

    return f"${vol:.0f}"

async def get_coin_prices(coin: str):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—ã –º–æ–Ω–µ—Ç—ã –Ω–∞ –≤—Å–µ—Ö DEX –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞—Ö"""
    coin = coin.upper()

    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º DEX –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
    if LAST_DEX_SETTINGS != SETTINGS['DEX']:
        await load_dex_aggregators()
        aggregators = DEX_LOADED
    else:
        aggregators = DEX_LOADED

    if not aggregators:
        return "‚ùå DEX –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä—ã –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    results = []
    found_on = 0
    filtered_out = 0

    min_volume = SETTINGS['SPOT']['MIN_VOLUME_USD']
    min_entry = SETTINGS['SPOT']['MIN_ENTRY_AMOUNT_USDT']
    max_entry = SETTINGS['SPOT']['MAX_ENTRY_AMOUNT_USDT']

    for name, config in aggregators.items():
        try:
            price_data = await fetch_dex_price(name, coin)
            if price_data and price_data['price']:
                if price_data.get('volume') is not None and price_data['volume'] < min_volume:
                    filtered_out += 1
                    logger.debug(f"DEX {name} –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω –ø–æ –æ–±—ä–µ–º—É: {price_data['volume']} < {min_volume}")
                    continue

                found_on += 1
                price = price_data['price']
                volume = price_data.get('volume')

                url = config["url_format"](TOKEN_ADDRESSES.get(coin, coin))

                results.append({
                    "price": price,
                    "name": name.upper(),
                    "volume": volume,
                    "url": url,
                    "emoji": config.get("emoji", "üîÑ"),
                    "chains": config.get("chains", [])
                })
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã {coin} –Ω–∞ {name}: {e}")

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ü–µ–Ω–µ (–æ—Ç –Ω–∏–∑–∫–æ–π –∫ –≤—ã—Å–æ–∫–æ–π)
    results.sort(key=lambda x: x["price"])

    utc_plus_3 = timezone(timedelta(hours=3))
    current_time = datetime.now(utc_plus_3).strftime('%H:%M:%S')

    if results:
        min_price = results[0]["price"]
        max_price = results[-1]["price"]
        price_diff_percent = ((max_price - min_price) / min_price) * 100

        response = f"üöÄ <b>DEX –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä—ã –¥–ª—è <code>{coin}</code>:</b>\n\n"
        response += f"<i>–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º: ${min_volume:,.0f}</i>\n"
        response += f"<i>–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ DEX: {filtered_out}</i>\n\n"

        for idx, item in enumerate(results, 1):
            response += (
                f"{item['emoji']} <a href='{item['url']}'><b>{item['name']}</b></a>\n"
                f"‚ñ´Ô∏è –¶–µ–Ω–∞: {format_price(item['price'])}\n"
                f"‚ñ´Ô∏è –û–±—ä–µ–º: {format_volume(item['volume'])}\n"
                f"‚ñ´Ô∏è –°–µ—Ç–∏: {', '.join(item['chains'])}\n"
            )

            if idx < len(results):
                response += "\n"

        if len(results) >= 2 and min_price < max_price:
            min_dex = results[0]
            max_dex = results[-1]

            buy_fee = DEX_AGGREGATORS[min_dex['name'].lower()]["taker_fee"]
            sell_fee = DEX_AGGREGATORS[max_dex['name'].lower()]["taker_fee"]

            profit_min = calculate_profit(
                buy_price=min_price,
                sell_price=max_price,
                amount=min_entry / min_price,
                buy_fee_percent=buy_fee,
                sell_fee_percent=sell_fee
            )

            profit_max = calculate_profit(
                buy_price=min_price,
                sell_price=max_price,
                amount=max_entry / min_price,
                buy_fee_percent=buy_fee,
                sell_fee_percent=sell_fee
            )

            response += f"\nüíº <b>–í–æ–∑–º–æ–∂–Ω—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂:</b>\n"
            response += f"üü¢ –ü–æ–∫—É–ø–∫–∞ –Ω–∞ {min_dex['name']}: {format_price(min_price)}\n"
            response += f"üî¥ –ü—Ä–æ–¥–∞–∂–∞ –Ω–∞ {max_dex['name']}: {format_price(max_price)}\n"
            response += f"üí∞ –°—É–º–º–∞ –≤—Ö–æ–¥–∞: ${min_entry:.2f}-${max_entry:.2f}\n"
            response += f"üíµ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: ${profit_min['net']:.2f}-${profit_max['net']:.2f}\n"

        response += f"\nüìà <b>–†–∞–∑–Ω–∏—Ü–∞ —Ü–µ–Ω:</b> {price_diff_percent:.2f}%\n"
        response += f"‚è± {current_time} | DEX: {found_on}"
    else:
        if filtered_out > 0:
            response = f"‚ùå –ú–æ–Ω–µ—Ç–∞ {coin} –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ {filtered_out} DEX, –Ω–æ –æ–±—ä–µ–º –º–µ–Ω—å—à–µ ${min_volume:,.0f}"
        else:
            response = f"‚ùå –ú–æ–Ω–µ—Ç–∞ {coin} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ DEX –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞—Ö"

    return response

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = str(update.effective_user.id)
    if user_id not in TELEGRAM_CHAT_IDS:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    await update.message.reply_text(
        "ü§ñ <b>DEX Crypto Arbitrage Bot</b>\n\n"
        "–ë–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –Ω–∞ DEX –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞—Ö\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º:",
        parse_mode="HTML",
        reply_markup=get_main_keyboard()
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = str(update.effective_user.id)
    if user_id not in TELEGRAM_CHAT_IDS:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    text = update.message.text

    if text == "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        await update.message.reply_text(
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ DEX –±–æ—Ç–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            parse_mode="HTML",
            reply_markup=get_settings_keyboard()
        )
        return SETTINGS_MENU

    elif text == "üìà –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∫–∏":
        await update.message.reply_text(
            "‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö DEX –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö...",
            parse_mode="HTML"
        )

        response = await get_current_arbitrage_opportunities()

        await update.message.reply_text(
            text=response,
            parse_mode="HTML",
            disable_web_page_preview=True,
            reply_markup=get_main_keyboard()
        )
        return

    elif text == "üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞":
        spot_status = "‚úÖ –í–ö–õ" if SETTINGS['SPOT']['ENABLED'] else "‚ùå –í–´–ö–õ"

        enabled_dex = [name for name, config in SETTINGS['DEX'].items() if config['ENABLED']]
        dex_status = ", ".join(enabled_dex) if enabled_dex else "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö DEX"

        await update.message.reply_text(
            f"ü§ñ <b>–°—Ç–∞—Ç—É—Å DEX –±–æ—Ç–∞</b>\n\n"
            f"üöÄ DEX –∞—Ä–±–∏—Ç—Ä–∞–∂: {spot_status}\n"
            f"üèõ –ê–∫—Ç–∏–≤–Ω—ã–µ DEX: {dex_status}\n"
            f"üìà –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–≤—è–∑–æ–∫: {len(sent_arbitrage_opportunities)}",
            parse_mode="HTML",
            reply_markup=get_main_keyboard()
        )
        return

    elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        await update.message.reply_text(
            "ü§ñ <b>DEX Crypto Arbitrage Bot</b>\n\n"
            "üîç <b>–ü–æ–∏—Å–∫ –º–æ–Ω–µ—Ç—ã</b> - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ü–µ–Ω—ã –Ω–∞ —Ä–∞–∑–Ω—ã—Ö DEX –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞—Ö, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã (ETH, USDC, DAI...)\n"
            "üîß <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b> - –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –∏ DEX –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä—ã\n"
            "üìä <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞</b> - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞\n"
            "üìà <b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∫–∏</b> - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ –∏—Ö –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\n\n"
            "–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—â–µ—Ç –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –º–µ–∂–¥—É DEX –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞–º–∏ –∏ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.",
            parse_mode="HTML",
            reply_markup=get_main_keyboard()
        )
        return

    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã
    if not text.startswith('/'):
        if re.match(r'^[A-Z0-9]{1,15}$', text.upper()):
            context.user_data['coin'] = text.upper()
            await update.message.reply_text(
                f"‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è <b><code>{text.upper()}</code></b> —Å DEX –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–æ–≤...",
                parse_mode="HTML"
            )

            response = await get_coin_prices(text.upper())

            await update.message.reply_text(
                text=response,
                parse_mode="HTML",
                disable_web_page_preview=True,
                reply_markup=get_main_keyboard()
            )
            return ConversationHandler.END
        else:
            await update.message.reply_text(
                "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–Ω–µ—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä ETH –∏–ª–∏ USDC)",
                reply_markup=get_main_keyboard()
            )
            return

    await update.message.reply_text(
        "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
        reply_markup=get_main_keyboard()
    )

async def handle_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    text = update.message.text

    if text == "üöÄÔ∏è DEX –ê—Ä–±–∏—Ç—Ä–∞–∂":
        await update.message.reply_text(
            "üöÄÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ DEX –∞—Ä–±–∏—Ç—Ä–∞–∂–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
            parse_mode="HTML",
            reply_markup=get_spot_settings_keyboard()
        )
        return SPOT_SETTINGS

    elif text == "üèõ DEX –ê–≥—Ä–µ–≥–∞—Ç–æ—Ä—ã":
        await update.message.reply_text(
            "üèõ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ DEX –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–æ–≤</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è:",
            parse_mode="HTML",
            reply_markup=get_dex_settings_keyboard()
        )
        return EXCHANGE_SETTINGS_MENU

    elif text == "üîÑ –°–±—Ä–æ—Å":
        global SETTINGS, LAST_DEX_SETTINGS
        SETTINGS = {
            "SPOT": DEFAULT_SPOT_SETTINGS.copy(),
            "DEX": DEX_SETTINGS.copy()
        }
        save_settings(SETTINGS)
        LAST_DEX_SETTINGS = None
        await update.message.reply_text(
            "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
            reply_markup=get_settings_keyboard()
        )
        return SETTINGS_MENU

    elif text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await update.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_keyboard()
        )
        return ConversationHandler.END

    await update.message.reply_text(
        "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
        reply_markup=get_settings_keyboard()
    )
    return SETTINGS_MENU

async def handle_spot_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ DEX –∞—Ä–±–∏—Ç—Ä–∞–∂–∞"""
    text = update.message.text

    if text == "üîô –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏":
        await update.message.reply_text(
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ DEX –±–æ—Ç–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            parse_mode="HTML",
            reply_markup=get_settings_keyboard()
        )
        return SETTINGS_MENU

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if text.startswith("–ü–æ—Ä–æ–≥:"):
        context.user_data['setting'] = ('SPOT', 'THRESHOLD_PERCENT')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ—Ä–æ–≥–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ (—Ç–µ–∫—É—â–µ–µ: {SETTINGS['SPOT']['THRESHOLD_PERCENT']}%):"
        )
        return SETTING_VALUE

    elif text.startswith("–ú–∞–∫—Å. –ø–æ—Ä–æ–≥:"):
        context.user_data['setting'] = ('SPOT', 'MAX_THRESHOLD_PERCENT')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞ (—Ç–µ–∫—É—â–µ–µ: {SETTINGS['SPOT']['MAX_THRESHOLD_PERCENT']}%):"
        )
        return SETTING_VALUE

    elif text.startswith("–ò–Ω—Ç–µ—Ä–≤–∞–ª:"):
        context.user_data['setting'] = ('SPOT', 'CHECK_INTERVAL')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Ç–µ–∫—É—â–µ–µ: {SETTINGS['SPOT']['CHECK_INTERVAL']} —Å–µ–∫):"
        )
        return SETTING_VALUE

    elif text.startswith("–û–±—ä–µ–º:"):
        context.user_data['setting'] = ('SPOT', 'MIN_VOLUME_USD')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–º–∞ (—Ç–µ–∫—É—â–µ–µ: ${SETTINGS['SPOT']['MIN_VOLUME_USD']}):"
        )
        return SETTING_VALUE

    elif text.startswith("–ú–∏–Ω. —Å—É–º–º–∞:"):
        context.user_data['setting'] = ('SPOT', 'MIN_ENTRY_AMOUNT_USDT')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã –≤—Ö–æ–¥–∞ (—Ç–µ–∫—É—â–µ–µ: ${SETTINGS['SPOT']['MIN_ENTRY_AMOUNT_USDT']}):"
        )
        return SETTING_VALUE

    elif text.startswith("–ú–∞–∫—Å. —Å—É–º–º–∞:"):
        context.user_data['setting'] = ('SPOT', 'MAX_ENTRY_AMOUNT_USDT')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã –≤—Ö–æ–¥–∞ (—Ç–µ–∫—É—â–µ–µ: ${SETTINGS['SPOT']['MAX_ENTRY_AMOUNT_USDT']}):"
        )
        return SETTING_VALUE

    elif text.startswith("–í–ª–∏—è–Ω–∏–µ:"):
        context.user_data['setting'] = ('SPOT', 'MAX_IMPACT_PERCENT')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤–ª–∏—è–Ω–∏—è (—Ç–µ–∫—É—â–µ–µ: {SETTINGS['SPOT']['MAX_IMPACT_PERCENT']}%):"
        )
        return SETTING_VALUE

    elif text.startswith("–°—Ç–∞–∫–∞–Ω:"):
        context.user_data['setting'] = ('SPOT', 'ORDER_BOOK_DEPTH')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≥–ª—É–±–∏–Ω—ã —Å—Ç–∞–∫–∞–Ω–∞ (—Ç–µ–∫—É—â–µ–µ: {SETTINGS['SPOT']['ORDER_BOOK_DEPTH']}):"
        )
        return SETTING_VALUE

    elif text.startswith("–ü—Ä–∏–±—ã–ª—å:"):
        context.user_data['setting'] = ('SPOT', 'MIN_NET_PROFIT_USD')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏ (—Ç–µ–∫—É—â–µ–µ: ${SETTINGS['SPOT']['MIN_NET_PROFIT_USD']}):"
        )
        return SETTING_VALUE

    elif text.startswith("–°—Ö–æ–¥–∏–º–æ—Å—Ç—å:"):
        context.user_data['setting'] = ('SPOT', 'PRICE_CONVERGENCE_THRESHOLD')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ—Ä–æ–≥–∞ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ü–µ–Ω (—Ç–µ–∫—É—â–µ–µ: {SETTINGS['SPOT']['PRICE_CONVERGENCE_THRESHOLD']}%):"
        )
        return SETTING_VALUE

    elif text.startswith("–£–≤–µ–¥. —Å—Ä–∞–≤–Ω.:"):
        SETTINGS['SPOT']['PRICE_CONVERGENCE_ENABLED'] = not SETTINGS['SPOT']['PRICE_CONVERGENCE_ENABLED']
        save_settings(SETTINGS)
        status = "üîî –í–ö–õ" if SETTINGS['SPOT']['PRICE_CONVERGENCE_ENABLED'] else "üîï –í–´–ö–õ"
        await update.message.reply_text(
            f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ —Ü–µ–Ω {status}",
            reply_markup=get_spot_settings_keyboard()
        )
        return SPOT_SETTINGS

    elif text.startswith("–°—Ç–∞—Ç—É—Å:"):
        SETTINGS['SPOT']['ENABLED'] = not SETTINGS['SPOT']['ENABLED']
        save_settings(SETTINGS)
        status = "–í–ö–õ" if SETTINGS['SPOT']['ENABLED'] else "–í–´–ö–õ"
        await update.message.reply_text(
            f"‚úÖ DEX –∞—Ä–±–∏—Ç—Ä–∞–∂ {status}",
            reply_markup=get_spot_settings_keyboard()
        )
        return SPOT_SETTINGS

    await update.message.reply_text(
        "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
        reply_markup=get_spot_settings_keyboard()
    )
    return SPOT_SETTINGS

async def handle_dex_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ DEX –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–æ–≤"""
    text = update.message.text

    if text == "üîô –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏":
        await update.message.reply_text(
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ DEX –±–æ—Ç–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            parse_mode="HTML",
            reply_markup=get_settings_keyboard()
        )
        return SETTINGS_MENU

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è DEX –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–æ–≤
    for dex in SETTINGS['DEX'].keys():
        if text.startswith(f"{dex}:"):
            SETTINGS['DEX'][dex]['ENABLED'] = not SETTINGS['DEX'][dex]['ENABLED']
            save_settings(SETTINGS)

            status = "‚úÖ –í–ö–õ" if SETTINGS['DEX'][dex]['ENABLED'] else "‚ùå –í–´–ö–õ"
            await update.message.reply_text(
                f"‚úÖ DEX –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä {dex.upper()} {status}",
                reply_markup=get_dex_settings_keyboard()
            )
            return EXCHANGE_SETTINGS_MENU

    await update.message.reply_text(
        "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
        reply_markup=get_dex_settings_keyboard()
    )
    return EXCHANGE_SETTINGS_MENU

async def handle_setting_value(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    text = update.message.text
    setting_info = context.user_data.get('setting')

    if not setting_info:
        await update.message.reply_text(
            "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=get_settings_keyboard()
        )
        return SETTINGS_MENU

    arb_type, setting_key = setting_info

    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        if setting_key in ['THRESHOLD_PERCENT', 'MAX_THRESHOLD_PERCENT', 'MAX_IMPACT_PERCENT',
                           'PRICE_CONVERGENCE_THRESHOLD']:
            value = float(text)
        elif setting_key in ['CHECK_INTERVAL', 'ORDER_BOOK_DEPTH']:
            value = int(text)
        elif setting_key in ['MIN_VOLUME_USD', 'MIN_ENTRY_AMOUNT_USDT', 'MAX_ENTRY_AMOUNT_USDT', 'MIN_NET_PROFIT_USD']:
            value = float(text)
        else:
            value = text

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        SETTINGS[arb_type][setting_key] = value
        save_settings(SETTINGS)

        await update.message.reply_text(
            f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ {setting_key} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {text}",
            reply_markup=get_spot_settings_keyboard()
        )

        return SPOT_SETTINGS

    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.",
            reply_markup=get_spot_settings_keyboard()
        )
        return SETTING_VALUE

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞"""
    await update.message.reply_text(
        "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=get_main_keyboard()
    )
    return ConversationHandler.END

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}", exc_info=context.error)

    if update and update.effective_message:
        await update.effective_message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard()
        )

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # Conversation handler –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
        ],
        states={
            SETTINGS_MENU: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_settings)
            ],
            SPOT_SETTINGS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_spot_settings)
            ],
            EXCHANGE_SETTINGS_MENU: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_dex_settings)
            ],
            SETTING_VALUE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_setting_value)
            ]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(conv_handler)
    application.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º DEX –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—É—é –∑–∞–¥–∞—á—É –≤ —Ñ–æ–Ω–µ
    loop = asyncio.get_event_loop()
    loop.create_task(check_dex_arbitrage())

    logger.info("DEX –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
