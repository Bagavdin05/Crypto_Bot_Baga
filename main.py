import ccxt
import asyncio
from telegram import Bot, Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
    ConversationHandler
)
from telegram.error import TelegramError
import logging
from datetime import datetime, timezone, timedelta
import html
import json
import os
import time
import aiohttp
from typing import Dict, List, Optional

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = "7990034184:AAFTx--E5GE0NIPA0Yghr6KpBC80aVtSACs"
TELEGRAM_CHAT_IDS = ["1167694150", "7916502470", "5381553894", "1111230981"]

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è DEX-CEX –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
DEFAULT_DEX_CEX_SETTINGS = {
    "THRESHOLD_PERCENT": 2.0,
    "MAX_THRESHOLD_PERCENT": 20.0,
    "CHECK_INTERVAL": 30,
    "MIN_VOLUME_USD": 10000,
    "MIN_ENTRY_AMOUNT_USDT": 10,
    "MAX_ENTRY_AMOUNT_USDT": 500,
    "MIN_NET_PROFIT_USDT": 5,
    "ENABLED": True,
    "PRICE_CONVERGENCE_THRESHOLD": 0.5,
    "PRICE_CONVERGENCE_ENABLED": True
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SETTINGS_MENU, DEX_CEX_SETTINGS, SETTING_VALUE = range(3)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger("DexCexArbBot")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
SHARED_BOT = None
SETTINGS = {"DEX_CEX": DEFAULT_DEX_CEX_SETTINGS.copy()}
MEXC_EXCHANGE = None

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π
open_positions = {}
position_history = {}
sent_opportunities = {}

# Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    return ReplyKeyboardMarkup([
        [KeyboardButton("üìà –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∫–∏")], 
        [KeyboardButton("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
        [KeyboardButton("üìä –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏"), KeyboardButton("üìã –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫")],
        [KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
    ], resize_keyboard=True)

def get_settings_keyboard():
    return ReplyKeyboardMarkup([
        [KeyboardButton("üîÑ DEX-CEX –ê—Ä–±–∏—Ç—Ä–∞–∂")],
        [KeyboardButton("üîÑ –°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫")],
        [KeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ], resize_keyboard=True)

def get_dex_cex_settings_keyboard():
    dex_cex = SETTINGS['DEX_CEX']
    return ReplyKeyboardMarkup([
        [KeyboardButton(f"–ü–æ—Ä–æ–≥: {dex_cex['THRESHOLD_PERCENT']}%"),
         KeyboardButton(f"–ú–∞–∫—Å. –ø–æ—Ä–æ–≥: {dex_cex['MAX_THRESHOLD_PERCENT']}%")],
        [KeyboardButton(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª: {dex_cex['CHECK_INTERVAL']}—Å"),
         KeyboardButton(f"–û–±—ä–µ–º: ${dex_cex['MIN_VOLUME_USD'] / 1000:.0f}K")],
        [KeyboardButton(f"–ú–∏–Ω. —Å—É–º–º–∞: ${dex_cex['MIN_ENTRY_AMOUNT_USDT']}"),
         KeyboardButton(f"–ú–∞–∫—Å. —Å—É–º–º–∞: ${dex_cex['MAX_ENTRY_AMOUNT_USDT']}")],
        [KeyboardButton(f"–ü—Ä–∏–±—ã–ª—å: ${dex_cex['MIN_NET_PROFIT_USDT']}"),
         KeyboardButton(f"–°—Ç–∞—Ç—É—Å: {'–í–ö–õ' if dex_cex['ENABLED'] else '–í–´–ö–õ'}")],
        [KeyboardButton(f"–°—Ö–æ–¥–∏–º–æ—Å—Ç—å: {dex_cex['PRICE_CONVERGENCE_THRESHOLD']}%"),
         KeyboardButton(f"–£–≤–µ–¥. —Å—Ä–∞–≤–Ω.: {'üîî' if dex_cex['PRICE_CONVERGENCE_ENABLED'] else 'üîï'}")],
        [KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")]
    ], resize_keyboard=True)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
def load_settings():
    try:
        if os.path.exists('settings.json'):
            with open('settings.json', 'r') as f:
                return json.load(f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
    return {"DEX_CEX": DEFAULT_DEX_CEX_SETTINGS.copy()}

def save_settings(settings):
    try:
        with open('settings.json', 'w') as f:
            json.dump(settings, f, indent=4)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

SETTINGS = load_settings()

async def send_telegram_message(message: str, chat_id: str = None, reply_markup: ReplyKeyboardMarkup = None):
    global SHARED_BOT
    if not SHARED_BOT:
        SHARED_BOT = Bot(token=TELEGRAM_TOKEN)

    targets = [chat_id] if chat_id else TELEGRAM_CHAT_IDS

    for target_id in targets:
        try:
            await SHARED_BOT.send_message(
                chat_id=target_id,
                text=message,
                parse_mode="HTML",
                disable_web_page_preview=True,
                reply_markup=reply_markup
            )
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {target_id}")
        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ {target_id}: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MEXC
async def init_mexc():
    global MEXC_EXCHANGE
    try:
        MEXC_EXCHANGE = ccxt.mexc({
            "enableRateLimit": True,
            "options": {
                "defaultType": "swap"
            }
        })
        await asyncio.get_event_loop().run_in_executor(None, MEXC_EXCHANGE.load_markets)
        logger.info("MEXC —Ñ—å—é—á–µ—Ä—Å—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MEXC: {e}")
        return False

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å DexScreener
async def get_dex_screener_data():
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–ø —Ç–æ–∫–µ–Ω–∞—Ö —Å DexScreener"""
    url = "https://api.dexscreener.com/latest/dex/tokens/your_tokens_here"  # –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å API DexScreener
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—Ä–æ—Å –∫ DexScreener API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–∫–µ–Ω–∞—Ö
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, timeout=10) as response:
                if response.status == 200:
                    data = await response.json()
                    return data.get('pairs', [])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å DexScreener: {e}")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    return [
        {
            'baseToken': {'symbol': 'BTC', 'name': 'Bitcoin'},
            'quoteToken': {'symbol': 'USDT'},
            'priceUsd': '45000.00',
            'volume': {'h24': '1000000'},
            'url': 'https://dexscreener.com/ethereum/0x...',
            'chainId': 'ethereum'
        },
        {
            'baseToken': {'symbol': 'ETH', 'name': 'Ethereum'},
            'quoteToken': {'symbol': 'USDT'},
            'priceUsd': '3000.00',
            'volume': {'h24': '500000'},
            'url': 'https://dexscreener.com/ethereum/0x...',
            'chainId': 'ethereum'
        }
    ]

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã —Ñ—å—é—á–µ—Ä—Å–∞ —Å MEXC
async def get_mexc_futures_price(symbol: str):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—É —Ñ—å—é—á–µ—Ä—Å–∞ —Å MEXC"""
    if not MEXC_EXCHANGE:
        return None
    
    try:
        futures_symbol = f"{symbol}/USDT:USDT"
        ticker = await asyncio.get_event_loop().run_in_executor(
            None, MEXC_EXCHANGE.fetch_ticker, futures_symbol
        )
        return float(ticker['last']) if ticker and ticker.get('last') else None
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã {symbol} –Ω–∞ MEXC: {e}")
        return None

# –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏
def calculate_profit(dex_price: float, cex_price: float, amount: float, position_type: str):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏–±—ã–ª—å –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π —Å–¥–µ–ª–∫–∏"""
    if position_type == "LONG":
        # –ü–æ–∫—É–ø–∞–µ–º –Ω–∞ CEX, –ø—Ä–æ–¥–∞–µ–º –Ω–∞ DEX (–∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ DEX –≤—ã—à–µ)
        profit = (dex_price - cex_price) * amount
        profit_percent = ((dex_price - cex_price) / cex_price) * 100
    else:  # SHORT
        # –ü—Ä–æ–¥–∞–µ–º –Ω–∞ CEX, –ø–æ–∫—É–ø–∞–µ–º –Ω–∞ DEX (–∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ DEX –Ω–∏–∂–µ)
        profit = (cex_price - dex_price) * amount
        profit_percent = ((cex_price - dex_price) / cex_price) * 100
    
    return {
        "net": profit,
        "percent": profit_percent,
        "entry_amount": amount * cex_price
    }

# –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏
async def open_position(symbol: str, dex_price: float, cex_price: float, position_type: str, amount: float):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—É—é –ø–æ–∑–∏—Ü–∏—é"""
    position_id = f"{symbol}_{position_type}_{int(time.time())}"
    
    position = {
        'id': position_id,
        'symbol': symbol,
        'position_type': position_type,
        'dex_price': dex_price,
        'cex_price': cex_price,
        'amount': amount,
        'open_time': time.time(),
        'status': 'OPEN'
    }
    
    open_positions[position_id] = position
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    profit_info = calculate_profit(dex_price, cex_price, amount, position_type)
    
    message = (
        f"üéØ <b>–û–¢–ö–†–´–¢–ê –ü–û–ó–ò–¶–ò–Ø</b> üéØ\n\n"
        f"‚ñ´Ô∏è <b>–ú–æ–Ω–µ—Ç–∞:</b> <code>{symbol}</code>\n"
        f"‚ñ´Ô∏è <b>–¢–∏–ø –ø–æ–∑–∏—Ü–∏–∏:</b> {position_type}\n"
        f"‚ñ´Ô∏è <b>–¶–µ–Ω–∞ DEX:</b> ${dex_price:.8f}\n"
        f"‚ñ´Ô∏è <b>–¶–µ–Ω–∞ CEX:</b> ${cex_price:.8f}\n"
        f"‚ñ´Ô∏è <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {amount:.6f} {symbol}\n"
        f"‚ñ´Ô∏è <b>–°—É–º–º–∞ –≤—Ö–æ–¥–∞:</b> ${amount * cex_price:.2f}\n"
        f"‚ñ´Ô∏è <b>–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å:</b> ${profit_info['net']:.2f} ({profit_info['percent']:.2f}%)\n\n"
        f"üîó <a href='https://dexscreener.com/'>DEX Screener</a> | "
        f"<a href='https://futures.mexc.com/exchange/{symbol}_USDT'>MEXC Futures</a>\n"
        f"‚è± {datetime.now(timezone(timedelta(hours=3))).strftime('%H:%M:%S')}"
    )
    
    await send_telegram_message(message)
    return position_id

# –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏
async def close_position(position_id: str, current_dex_price: float, current_cex_price: float):
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—É—é –ø–æ–∑–∏—Ü–∏—é"""
    if position_id not in open_positions:
        return None
    
    position = open_positions[position_id]
    position['close_time'] = time.time()
    position['current_dex_price'] = current_dex_price
    position['current_cex_price'] = current_cex_price
    position['status'] = 'CLOSED'
    
    # –†–∞—Å—á–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏
    duration = position['close_time'] - position['open_time']
    profit_info = calculate_profit(
        current_dex_price, 
        current_cex_price, 
        position['amount'], 
        position['position_type']
    )
    
    position['profit'] = profit_info['net']
    position['profit_percent'] = profit_info['percent']
    position['duration'] = duration
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    position_history[position_id] = position.copy()
    
    # –£–¥–∞–ª—è–µ–º –∏–∑ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
    del open_positions[position_id]
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–¥–µ–ª–∫–∏
    result = "‚úÖ –ü–†–ò–ë–´–õ–¨" if profit_info['net'] > 0 else "‚ùå –£–ë–´–¢–û–ö"
    
    message = (
        f"üèÅ <b>–ü–û–ó–ò–¶–ò–Ø –ó–ê–ö–†–´–¢–ê</b> üèÅ\n\n"
        f"‚ñ´Ô∏è <b>–ú–æ–Ω–µ—Ç–∞:</b> <code>{position['symbol']}</code>\n"
        f"‚ñ´Ô∏è <b>–¢–∏–ø –ø–æ–∑–∏—Ü–∏–∏:</b> {position['position_type']}\n"
        f"‚ñ´Ô∏è <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b> {result}\n"
        f"‚ñ´Ô∏è <b>–ü—Ä–∏–±—ã–ª—å:</b> ${profit_info['net']:.2f} ({profit_info['percent']:.2f}%)\n"
        f"‚ñ´Ô∏è <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {format_duration(duration)}\n"
        f"‚ñ´Ô∏è <b>–ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ DEX:</b> ${position['dex_price']:.8f}\n"
        f"‚ñ´Ô∏è <b>–ö–æ–Ω–µ—á–Ω–∞—è —Ü–µ–Ω–∞ DEX:</b> ${current_dex_price:.8f}\n"
        f"‚ñ´Ô∏è <b>–ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ CEX:</b> ${position['cex_price']:.8f}\n"
        f"‚ñ´Ô∏è <b>–ö–æ–Ω–µ—á–Ω–∞—è —Ü–µ–Ω–∞ CEX:</b> ${current_cex_price:.8f}\n\n"
        f"‚è± {datetime.now(timezone(timedelta(hours=3))).strftime('%H:%M:%S')}"
    )
    
    await send_telegram_message(message)
    return position

def format_duration(seconds):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    if seconds < 60:
        return f"{int(seconds)} —Å–µ–∫"
    elif seconds < 3600:
        minutes = int(seconds // 60)
        seconds_remaining = int(seconds % 60)
        return f"{minutes} –º–∏–Ω {seconds_remaining} —Å–µ–∫"
    else:
        hours = int(seconds // 3600)
        minutes = int((seconds % 3600) // 60)
        return f"{hours} —á {minutes} –º–∏–Ω"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
async def check_dex_cex_arbitrage():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ DEX-CEX –∞—Ä–±–∏—Ç—Ä–∞–∂–∞"""
    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ DEX-CEX –∞—Ä–±–∏—Ç—Ä–∞–∂–∞")
    
    if not SETTINGS['DEX_CEX']['ENABLED']:
        logger.info("DEX-CEX –∞—Ä–±–∏—Ç—Ä–∞–∂ –æ—Ç–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MEXC
    if not await init_mexc():
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å MEXC")
        return
    
    while SETTINGS['DEX_CEX']['ENABLED']:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å DexScreener
            dex_data = await get_dex_screener_data()
            
            found_opportunities = 0
            
            for token_data in dex_data:
                try:
                    symbol = token_data['baseToken']['symbol']
                    dex_price = float(token_data['priceUsd'])
                    volume_24h = float(token_data['volume']['h24'])
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ä–µ–º
                    if volume_24h < SETTINGS['DEX_CEX']['MIN_VOLUME_USD']:
                        continue
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É —Å MEXC
                    cex_price = await get_mexc_futures_price(symbol)
                    if not cex_price:
                        continue
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ø—Ä–µ–¥
                    spread = ((dex_price - cex_price) / cex_price) * 100
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
                    if abs(spread) >= SETTINGS['DEX_CEX']['THRESHOLD_PERCENT']:
                        
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–∑–∏—Ü–∏–∏
                        if spread > 0:
                            position_type = "LONG"  # –¶–µ–Ω–∞ DEX –≤—ã—à–µ - –ø–æ–∫—É–ø–∞–µ–º –Ω–∞ CEX
                        else:
                            position_type = "SHORT"  # –¶–µ–Ω–∞ DEX –Ω–∏–∂–µ - –ø—Ä–æ–¥–∞–µ–º –Ω–∞ CEX
                        
                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã
                        amount_min = SETTINGS['DEX_CEX']['MIN_ENTRY_AMOUNT_USDT'] / cex_price
                        amount_max = SETTINGS['DEX_CEX']['MAX_ENTRY_AMOUNT_USDT'] / cex_price
                        
                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å
                        profit_min = calculate_profit(dex_price, cex_price, amount_min, position_type)
                        profit_max = calculate_profit(dex_price, cex_price, amount_max, position_type)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –ø—Ä–∏–±—ã–ª—å
                        if profit_min['net'] < SETTINGS['DEX_CEX']['MIN_NET_PROFIT_USDT']:
                            continue
                        
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        utc_plus_3 = timezone(timedelta(hours=3))
                        current_time = datetime.now(utc_plus_3).strftime('%H:%M:%S')
                        
                        safe_symbol = html.escape(symbol)
                        dex_url = token_data['url']
                        mexc_url = f"https://futures.mexc.com/exchange/{symbol}_USDT"
                        
                        message = (
                            f"üîÑ <b>DEX-CEX –ê–†–ë–ò–¢–†–ê–ñ</b> üîÑ\n\n"
                            f"‚ñ´Ô∏è <b>–ú–æ–Ω–µ—Ç–∞:</b> <code>{safe_symbol}</code>\n"
                            f"‚ñ´Ô∏è <b>–¢–∏–ø –ø–æ–∑–∏—Ü–∏–∏:</b> {position_type}\n"
                            f"‚ñ´Ô∏è <b>–°–ø—Ä–µ–¥:</b> {abs(spread):.2f}%\n"
                            f"‚ñ´Ô∏è <b>–¶–µ–Ω–∞ DEX:</b> ${dex_price:.8f}\n"
                            f"‚ñ´Ô∏è <b>–¶–µ–Ω–∞ CEX:</b> ${cex_price:.8f}\n"
                            f"‚ñ´Ô∏è <b>–û–±—ä–µ–º 24h:</b> ${volume_24h:,.0f}\n"
                            f"‚ñ´Ô∏è <b>–°—É–º–º–∞ –≤—Ö–æ–¥–∞:</b> ${SETTINGS['DEX_CEX']['MIN_ENTRY_AMOUNT_USDT']}-${SETTINGS['DEX_CEX']['MAX_ENTRY_AMOUNT_USDT']}\n"
                            f"‚ñ´Ô∏è <b>–ü—Ä–∏–±—ã–ª—å:</b> ${profit_min['net']:.2f}-${profit_max['net']:.2f}\n\n"
                            f"üí° <i>–°–∏–≥–Ω–∞–ª: {f'–ü–æ–∫—É–ø–∞—Ç—å –Ω–∞ CEX, –ø—Ä–æ–¥–∞–≤–∞—Ç—å –Ω–∞ DEX' if position_type == 'LONG' else '–ü—Ä–æ–¥–∞–≤–∞—Ç—å –Ω–∞ CEX, –ø–æ–∫—É–ø–∞—Ç—å –Ω–∞ DEX'}</i>\n\n"
                            f"üîó <a href='{dex_url}'>DEX Screener</a> | <a href='{mexc_url}'>MEXC Futures</a>\n"
                            f"‚è± {current_time}"
                        )
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        await send_telegram_message(message)
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
                        opportunity_id = f"{symbol}_{position_type}_{int(time.time())}"
                        sent_opportunities[opportunity_id] = {
                            'symbol': symbol,
                            'position_type': position_type,
                            'dex_price': dex_price,
                            'cex_price': cex_price,
                            'spread': spread,
                            'timestamp': time.time()
                        }
                        
                        found_opportunities += 1
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–∫–µ–Ω–∞ {token_data.get('baseToken', {}).get('symbol', 'Unknown')}: {e}")
            
            logger.info(f"–¶–∏–∫–ª DEX-CEX –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {found_opportunities}")
            await asyncio.sleep(SETTINGS['DEX_CEX']['CHECK_INTERVAL'])
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ DEX-CEX –∞—Ä–±–∏—Ç—Ä–∞–∂–∞: {e}")
            await asyncio.sleep(60)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å–≤—è–∑–æ–∫
async def get_current_opportunities():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"""
    current_time = time.time()
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–≤–µ–∂–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –º–∏–Ω—É—Ç)
    recent_opportunities = {
        k: v for k, v in sent_opportunities.items() 
        if current_time - v['timestamp'] < 1800
    }
    
    if not recent_opportunities:
        return "üìä <b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ —Å–≤—è–∑–∫–∏</b>\n\n‚è≥ –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ."
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
    opportunities_list = list(recent_opportunities.values())
    opportunities_list.sort(key=lambda x: abs(x['spread']), reverse=True)
    
    utc_plus_3 = timezone(timedelta(hours=3))
    current_time_str = datetime.now(utc_plus_3).strftime('%H:%M:%S')
    
    message = "üìä <b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ —Å–≤—è–∑–∫–∏</b>\n\n"
    
    for opp in opportunities_list:
        duration = current_time - opp['timestamp']
        duration_str = format_duration(duration)
        
        message += (
            f"‚ñ´Ô∏è <code>{opp['symbol']}</code>: {abs(opp['spread']):.2f}% ({opp['position_type']})\n"
            f"   üí∞ DEX: ${opp['dex_price']:.8f} | CEX: ${opp['cex_price']:.8f}\n"
            f"   ‚è± –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞: {duration_str} –Ω–∞–∑–∞–¥\n\n"
        )
    
    message += f"‚è∞ <i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {current_time_str}</i>\n"
    message += f"üìà <i>–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–≤—è–∑–æ–∫: {len(recent_opportunities)}</i>"
    
    return message

# –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
async def get_open_positions():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö"""
    if not open_positions:
        return "üìä <b>–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏</b>\n\n‚è≥ –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π."
    
    utc_plus_3 = timezone(timedelta(hours=3))
    current_time_str = datetime.now(utc_plus_3).strftime('%H:%M:%S')
    
    message = "üìä <b>–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏</b>\n\n"
    
    for pos_id, position in open_positions.items():
        duration = time.time() - position['open_time']
        duration_str = format_duration(duration)
        
        # –¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã)
        current_profit = calculate_profit(
            position['dex_price'],  # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã
            position['cex_price'], 
            position['amount'], 
            position['position_type']
        )
        
        message += (
            f"‚ñ´Ô∏è <code>{position['symbol']}</code> ({position['position_type']})\n"
            f"   üí∞ –û—Ç–∫—Ä—ã—Ç–∞ –ø–æ: DEX ${position['dex_price']:.8f} | CEX ${position['cex_price']:.8f}\n"
            f"   üíµ –¢–µ–∫—É—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${current_profit['net']:.2f}\n"
            f"   ‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_str}\n\n"
        )
    
    message += f"‚è∞ <i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {current_time_str}</i>\n"
    message += f"üìà <i>–í—Å–µ–≥–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(open_positions)}</i>"
    
    return message

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫
async def get_trade_history():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫"""
    if not position_history:
        return "üìã <b>–ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫</b>\n\n‚è≥ –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫ –ø—É—Å—Ç–∞."
    
    utc_plus_3 = timezone(timedelta(hours=3))
    current_time_str = datetime.now(utc_plus_3).strftime('%H:%M:%S')
    
    # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–¥–µ–ª–æ–∫
    recent_history = sorted(
        position_history.values(), 
        key=lambda x: x.get('close_time', 0), 
        reverse=True
    )[:10]
    
    message = "üìã <b>–ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫</b>\n\n"
    
    total_profit = 0
    winning_trades = 0
    
    for trade in recent_history:
        profit = trade.get('profit', 0)
        total_profit += profit
        if profit > 0:
            winning_trades += 1
        
        duration_str = format_duration(trade.get('duration', 0))
        result = "‚úÖ" if profit > 0 else "‚ùå"
        
        message += (
            f"{result} <code>{trade['symbol']}</code> ({trade['position_type']})\n"
            f"   üí∞ –ü—Ä–∏–±—ã–ª—å: ${profit:.2f}\n"
            f"   ‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_str}\n\n"
        )
    
    win_rate = (winning_trades / len(recent_history)) * 100 if recent_history else 0
    
    message += (
        f"üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"   –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${total_profit:.2f}\n"
        f"   –í–∏–Ω—Ä–µ–π—Ç: {win_rate:.1f}%\n"
        f"   –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {len(recent_history)}\n\n"
        f"‚è∞ <i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {current_time_str}</i>"
    )
    
    return message

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = str(update.effective_user.id)
    if user_id not in TELEGRAM_CHAT_IDS:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    await update.message.reply_text(
        "ü§ñ <b>DEX-CEX Arbitrage Bot</b>\n\n"
        "–ê—Ä–±–∏—Ç—Ä–∞–∂ –º–µ–∂–¥—É DEX (DexScreener) –∏ CEX (MEXC Futures)\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è:",
        parse_mode="HTML",
        reply_markup=get_main_keyboard()
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = str(update.effective_user.id)
    if user_id not in TELEGRAM_CHAT_IDS:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    text = update.message.text

    if text == "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        await update.message.reply_text(
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            parse_mode="HTML",
            reply_markup=get_settings_keyboard()
        )
        return SETTINGS_MENU

    elif text == "üìà –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∫–∏":
        await update.message.reply_text(
            "‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö...",
            parse_mode="HTML"
        )
        response = await get_current_opportunities()
        await update.message.reply_text(
            text=response,
            parse_mode="HTML",
            disable_web_page_preview=True,
            reply_markup=get_main_keyboard()
        )
        return

    elif text == "üìä –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏":
        response = await get_open_positions()
        await update.message.reply_text(
            text=response,
            parse_mode="HTML",
            reply_markup=get_main_keyboard()
        )
        return

    elif text == "üìã –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫":
        response = await get_trade_history()
        await update.message.reply_text(
            text=response,
            parse_mode="HTML",
            reply_markup=get_main_keyboard()
        )
        return

    elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        await update.message.reply_text(
            "ü§ñ <b>DEX-CEX Arbitrage Bot</b>\n\n"
            "üîç <b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞—Ä–±–∏—Ç—Ä–∞–∂:</b>\n"
            "‚Ä¢ DEX —Ü–µ–Ω–∞ > CEX —Ü–µ–Ω–∞: LONG (–ø–æ–∫—É–ø–∞–µ–º –Ω–∞ CEX)\n"
            "‚Ä¢ DEX —Ü–µ–Ω–∞ < CEX —Ü–µ–Ω–∞: SHORT (–ø—Ä–æ–¥–∞–µ–º –Ω–∞ CEX)\n\n"
            "üìä <b>–§—É–Ω–∫—Ü–∏–∏:</b>\n"
            "‚Ä¢ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∫–∏ - —Ç–µ–∫—É—â–∏–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏\n"
            "‚Ä¢ –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ - –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏\n"
            "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫ - –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏\n"
            "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞—Ä–±–∏—Ç—Ä–∞–∂–∞\n\n"
            "‚ö° –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—â–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!",
            parse_mode="HTML",
            reply_markup=get_main_keyboard()
        )
        return

    await update.message.reply_text(
        "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
        reply_markup=get_main_keyboard()
    )

async def handle_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    text = update.message.text

    if text == "üîÑ DEX-CEX –ê—Ä–±–∏—Ç—Ä–∞–∂":
        await update.message.reply_text(
            "üîÑ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ DEX-CEX –∞—Ä–±–∏—Ç—Ä–∞–∂–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
            parse_mode="HTML",
            reply_markup=get_dex_cex_settings_keyboard()
        )
        return DEX_CEX_SETTINGS

    elif text == "üîÑ –°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫":
        global SETTINGS
        SETTINGS = {"DEX_CEX": DEFAULT_DEX_CEX_SETTINGS.copy()}
        save_settings(SETTINGS)
        await update.message.reply_text(
            "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
            reply_markup=get_settings_keyboard()
        )
        return SETTINGS_MENU

    elif text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await update.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_keyboard()
        )
        return ConversationHandler.END

    await update.message.reply_text(
        "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
        reply_markup=get_settings_keyboard()
    )
    return SETTINGS_MENU

async def handle_dex_cex_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ DEX-CEX –∞—Ä–±–∏—Ç—Ä–∞–∂–∞"""
    text = update.message.text

    if text == "üîô –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏":
        await update.message.reply_text(
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            parse_mode="HTML",
            reply_markup=get_settings_keyboard()
        )
        return SETTINGS_MENU

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if text.startswith("–ü–æ—Ä–æ–≥:"):
        context.user_data['setting'] = ('DEX_CEX', 'THRESHOLD_PERCENT')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ—Ä–æ–≥–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ (—Ç–µ–∫—É—â–µ–µ: {SETTINGS['DEX_CEX']['THRESHOLD_PERCENT']}%):"
        )
        return SETTING_VALUE

    elif text.startswith("–ú–∞–∫—Å. –ø–æ—Ä–æ–≥:"):
        context.user_data['setting'] = ('DEX_CEX', 'MAX_THRESHOLD_PERCENT')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞ (—Ç–µ–∫—É—â–µ–µ: {SETTINGS['DEX_CEX']['MAX_THRESHOLD_PERCENT']}%):"
        )
        return SETTING_VALUE

    elif text.startswith("–ò–Ω—Ç–µ—Ä–≤–∞–ª:"):
        context.user_data['setting'] = ('DEX_CEX', 'CHECK_INTERVAL')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Ç–µ–∫—É—â–µ–µ: {SETTINGS['DEX_CEX']['CHECK_INTERVAL']} —Å–µ–∫):"
        )
        return SETTING_VALUE

    elif text.startswith("–û–±—ä–µ–º:"):
        context.user_data['setting'] = ('DEX_CEX', 'MIN_VOLUME_USD')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–º–∞ (—Ç–µ–∫—É—â–µ–µ: ${SETTINGS['DEX_CEX']['MIN_VOLUME_USD']}):"
        )
        return SETTING_VALUE

    elif text.startswith("–ú–∏–Ω. —Å—É–º–º–∞:"):
        context.user_data['setting'] = ('DEX_CEX', 'MIN_ENTRY_AMOUNT_USDT')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã –≤—Ö–æ–¥–∞ (—Ç–µ–∫—É—â–µ–µ: ${SETTINGS['DEX_CEX']['MIN_ENTRY_AMOUNT_USDT']}):"
        )
        return SETTING_VALUE

    elif text.startswith("–ú–∞–∫—Å. —Å—É–º–º–∞:"):
        context.user_data['setting'] = ('DEX_CEX', 'MAX_ENTRY_AMOUNT_USDT')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã –≤—Ö–æ–¥–∞ (—Ç–µ–∫—É—â–µ–µ: ${SETTINGS['DEX_CEX']['MAX_ENTRY_AMOUNT_USDT']}):"
        )
        return SETTING_VALUE

    elif text.startswith("–ü—Ä–∏–±—ã–ª—å:"):
        context.user_data['setting'] = ('DEX_CEX', 'MIN_NET_PROFIT_USDT')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏ (—Ç–µ–∫—É—â–µ–µ: ${SETTINGS['DEX_CEX']['MIN_NET_PROFIT_USDT']}):"
        )
        return SETTING_VALUE

    elif text.startswith("–°—Ö–æ–¥–∏–º–æ—Å—Ç—å:"):
        context.user_data['setting'] = ('DEX_CEX', 'PRICE_CONVERGENCE_THRESHOLD')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ—Ä–æ–≥–∞ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ü–µ–Ω (—Ç–µ–∫—É—â–µ–µ: {SETTINGS['DEX_CEX']['PRICE_CONVERGENCE_THRESHOLD']}%):"
        )
        return SETTING_VALUE

    elif text.startswith("–£–≤–µ–¥. —Å—Ä–∞–≤–Ω.:"):
        SETTINGS['DEX_CEX']['PRICE_CONVERGENCE_ENABLED'] = not SETTINGS['DEX_CEX']['PRICE_CONVERGENCE_ENABLED']
        save_settings(SETTINGS)
        status = "üîî –í–ö–õ" if SETTINGS['DEX_CEX']['PRICE_CONVERGENCE_ENABLED'] else "üîï –í–´–ö–õ"
        await update.message.reply_text(
            f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ —Ü–µ–Ω {status}",
            reply_markup=get_dex_cex_settings_keyboard()
        )
        return DEX_CEX_SETTINGS

    elif text.startswith("–°—Ç–∞—Ç—É—Å:"):
        SETTINGS['DEX_CEX']['ENABLED'] = not SETTINGS['DEX_CEX']['ENABLED']
        save_settings(SETTINGS)
        status = "–í–ö–õ" if SETTINGS['DEX_CEX']['ENABLED'] else "–í–´–ö–õ"
        await update.message.reply_text(
            f"‚úÖ DEX-CEX –∞—Ä–±–∏—Ç—Ä–∞–∂ {status}",
            reply_markup=get_dex_cex_settings_keyboard()
        )
        return DEX_CEX_SETTINGS

    await update.message.reply_text(
        "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
        reply_markup=get_dex_cex_settings_keyboard()
    )
    return DEX_CEX_SETTINGS

async def handle_setting_value(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    text = update.message.text
    setting_info = context.user_data.get('setting')

    if not setting_info:
        await update.message.reply_text(
            "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=get_settings_keyboard()
        )
        return SETTINGS_MENU

    category, setting_key = setting_info

    try:
        if setting_key in ['THRESHOLD_PERCENT', 'MAX_THRESHOLD_PERCENT', 'PRICE_CONVERGENCE_THRESHOLD']:
            value = float(text)
        elif setting_key in ['CHECK_INTERVAL']:
            value = int(text)
        elif setting_key in ['MIN_VOLUME_USD', 'MIN_ENTRY_AMOUNT_USDT', 'MAX_ENTRY_AMOUNT_USDT', 'MIN_NET_PROFIT_USDT']:
            value = float(text)
        else:
            value = text

        SETTINGS[category][setting_key] = value
        save_settings(SETTINGS)

        await update.message.reply_text(
            f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ {setting_key} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {text}",
            reply_markup=get_dex_cex_settings_keyboard()
        )

        return DEX_CEX_SETTINGS

    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.",
            reply_markup=get_dex_cex_settings_keyboard()
        )
        return SETTING_VALUE

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞"""
    await update.message.reply_text(
        "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=get_main_keyboard()
    )
    return ConversationHandler.END

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}", exc_info=context.error)

    if update and update.effective_message:
        await update.effective_message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard()
        )

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # Conversation handler –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
        ],
        states={
            SETTINGS_MENU: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_settings)
            ],
            DEX_CEX_SETTINGS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_dex_cex_settings)
            ],
            SETTING_VALUE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_setting_value)
            ]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(conv_handler)
    application.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—É—é –∑–∞–¥–∞—á—É –≤ —Ñ–æ–Ω–µ
    loop = asyncio.get_event_loop()
    loop.create_task(check_dex_cex_arbitrage())

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
