import ccxt
import asyncio
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
    CallbackQueryHandler
)
from telegram.error import TelegramError
import logging
from datetime import datetime, timezone, timedelta
from collections import defaultdict
import html
import re

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
ADMIN_USER_ID = "1167694150"  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
TELEGRAM_TOKEN = "8357883688:AAG5E-IwqpbTn7hJ_320wpvKQpNfkm_QQeo"
TELEGRAM_CHAT_IDS = ["1167694150", "7916502470", "5381553894"]  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ—Å—Ç—É–ø–æ–º

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_SETTINGS = {
    # –°–ø–æ—Ç
    "SPOT_THRESHOLD_PERCENT": 0.5,
    "SPOT_MAX_THRESHOLD_PERCENT": 40,
    "SPOT_CHECK_INTERVAL": 30,
    "SPOT_MIN_EXCHANGES_FOR_PAIR": 2,
    "SPOT_MIN_VOLUME_USD": 800000,
    "SPOT_MIN_ENTRY_AMOUNT_USDT": 5,
    "SPOT_MAX_ENTRY_AMOUNT_USDT": 120,
    "SPOT_MAX_IMPACT_PERCENT": 0.5,
    "SPOT_ORDER_BOOK_DEPTH": 10,
    "SPOT_MIN_NET_PROFIT_USD": 4,

    # –§—å—é—á–µ—Ä—Å—ã
    "FUTURES_THRESHOLD_PERCENT": 0.5,
    "FUTURES_MAX_THRESHOLD_PERCENT": 20,
    "FUTURES_CHECK_INTERVAL": 30,
    "FUTURES_MIN_VOLUME_USD": 800000,
    "FUTURES_MIN_EXCHANGES_FOR_PAIR": 2,
    "FUTURES_MIN_ENTRY_AMOUNT_USDT": 5,
    "FUTURES_MAX_ENTRY_AMOUNT_USDT": 60,
    "FUTURES_MIN_NET_PROFIT_USD": 2.5
}

# –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
CURRENT_SETTINGS = DEFAULT_SETTINGS.copy()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger("CryptoArbBot")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∏—Ä–∂ –¥–ª—è —Å–ø–æ—Ç–∞
SPOT_EXCHANGES = {
    "bybit": {
        "api": ccxt.bybit({"enableRateLimit": True}),
        "symbol_format": lambda s: f"{s}/USDT",
        "is_spot": lambda m: m.get('spot', False) and m['quote'] == 'USDT',
        "taker_fee": 0.001,
        "maker_fee": 0.001,
        "url_format": lambda s: f"https://www.bybit.com/trade/spot/{s.replace('/', '')}",
        "withdraw_url": lambda c: f"https://www.bybit.com/user/assets/withdraw",
        "deposit_url": lambda c: f"https://www.bybit.com/user/assets/deposit",
        "emoji": "üèõ"
    },
    "mexc": {
        "api": ccxt.mexc({"enableRateLimit": True}),
        "symbol_format": lambda s: f"{s}/USDT",
        "is_spot": lambda m: m.get('spot', False) and m['quote'] == 'USDT',
        "taker_fee": 0.002,
        "maker_fee": 0.002,
        "url_format": lambda s: f"https://www.mexc.com/exchange/{s.replace('/', '_')}",
        "withdraw_url": lambda c: f"https://www.mexc.com/ru-RU/assets/withdraw/{c}",
        "deposit_url": lambda c: f"https://www.mexc.com/ru-RU/assets/deposit/{c}",
        "emoji": "üèõ"
    },
    "okx": {
        "api": ccxt.okx({"enableRateLimit": True}),
        "symbol_format": lambda s: f"{s}/USDT",
        "is_spot": lambda m: m.get('spot', False) and m['quote'] == 'USDT',
        "taker_fee": 0.001,
        "maker_fee": 0.0008,
        "url_format": lambda s: f"https://www.okx.com/trade-spot/{s.replace('/', '-').lower()}",
        "withdraw_url": lambda c: f"https://www.okx.com/ru/balance/withdrawal/{c.lower()}-chain",
        "deposit_url": lambda c: f"https://www.okx.com/ru/balance/recharge/{c.lower()}",
        "emoji": "üèõ"
    },
    "gate": {
        "api": ccxt.gateio({"enableRateLimit": True}),
        "symbol_format": lambda s: f"{s}/USDT",
        "is_spot": lambda m: m.get('spot', False) and m['quote'] == 'USDT',
        "taker_fee": 0.002,
        "maker_fee": 0.002,
        "url_format": lambda s: f"https://www.gate.io/trade/{s.replace('/', '_')}",
        "withdraw_url": lambda c: f"https://www.gate.io/myaccount/withdraw/{c}",
        "deposit_url": lambda c: f"https://www.gate.io/myaccount/deposit/{c}",
        "emoji": "üèõ"
    },
    "bitget": {
        "api": ccxt.bitget({"enableRateLimit": True}),
        "symbol_format": lambda s: f"{s}/USDT",
        "is_spot": lambda m: m.get('spot', False) and m['quote'] == 'USDT',
        "taker_fee": 0.001,
        "maker_fee": 0.001,
        "url_format": lambda s: f"https://www.bitget.com/spot/{s.replace('/', '')}_SPBL",
        "withdraw_url": lambda c: f"https://www.bitget.com/ru/asset/withdraw?coinId={c}",
        "deposit_url": lambda c: f"https://www.bitget.com/ru/asset/recharge?coinId={c}",
        "emoji": "üèõ"
    },
    "kucoin": {
        "api": ccxt.kucoin({"enableRateLimit": True}),
        "symbol_format": lambda s: f"{s}/USDT",
        "is_spot": lambda m: m.get('spot', False) and m['quote'] == 'USDT',
        "taker_fee": 0.001,
        "maker_fee": 0.001,
        "url_format": lambda s: f"https://www.kucoin.com/trade/{s.replace('/', '-')}",
        "withdraw_url": lambda c: f"https://www.kucoin.com/ru/assets/withdraw/{c}",
        "deposit_url": lambda c: f"https://www.kucoin.com/ru/assets/coin/{c}",
        "emoji": "üèõ"
    },
    "htx": {
        "api": ccxt.htx({"enableRateLimit": True}),
        "symbol_format": lambda s: f"{s}/USDT",
        "is_spot": lambda m: m.get('spot', False) and m['quote'] == 'USDT',
        "taker_fee": 0.002,
        "maker_fee": 0.002,
        "url_format": lambda s: f"https://www.htx.com/trade/{s.replace('/', '_').lower()}",
        "withdraw_url": lambda c: f"https://www.htx.com/ru-ru/finance/withdraw/{c.lower()}",
        "deposit_url": lambda c: f"https://www.htx.com/ru-ru/finance/deposit/{c.lower()}",
        "emoji": "üèõ"
    },
    "bingx": {
        "api": ccxt.bingx({"enableRateLimit": True}),
        "symbol_format": lambda s: f"{s}/USDT",
        "is_spot": lambda m: m.get('spot', False) and m['quote'] == 'USDT',
        "taker_fee": 0.001,
        "maker_fee": 0.001,
        "url_format": lambda s: f"https://bingx.com/en-us/spot/{s.replace('/', '')}",
        "withdraw_url": lambda c: f"https://bingx.com/en-us/assets/withdraw/{c}",
        "deposit_url": lambda c: f"https://bingx.com/en-us/assets/deposit/{c}",
        "emoji": "üèõ"
    },
    "phemex": {
        "api": ccxt.phemex({"enableRateLimit": True}),
        "symbol_format": lambda s: f"{s}/USDT",
        "is_spot": lambda m: m.get('spot', False) and m['quote'] == 'USDT',
        "taker_fee": 0.001,
        "maker_fee": 0.001,
        "url_format": lambda s: f"https://phemex.com/spot/trade/{s.replace('/', '').replace(':USDT', '')}",
        "withdraw_url": lambda c: f"https://phemex.com/assets/withdraw?asset={c}",
        "deposit_url": lambda c: f"https://phemex.com/assets/deposit?asset={c}",
        "emoji": "üèõ"
    }
}

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∏—Ä–∂ –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤
FUTURES_EXCHANGES = {
    "bybit": {
        "api": ccxt.bybit({"enableRateLimit": True}),
        "symbol_format": lambda s: f"{s}/USDT:USDT",
        "is_futures": lambda m: (m.get('swap', False) or m.get('future', False)) and m['settle'] == 'USDT',
        "taker_fee": 0.0006,
        "maker_fee": 0.0001,
        "url_format": lambda s: f"https://www.bybit.com/trade/usdt/{s.replace('/', '').replace(':USDT', '')}",
        "blacklist": ["BTC", "ETH"],
        "emoji": "üèõ"
    },
    "mexc": {
        "api": ccxt.mexc({"enableRateLimit": True}),
        "symbol_format": lambda s: f"{s}/USDT:USDT",
        "is_futures": lambda m: m.get('swap', False) and 'USDT' in m['id'],
        "taker_fee": 0.0006,
        "maker_fee": 0.0002,
        "url_format": lambda s: f"https://futures.mexc.com/exchange/{s.replace('/', '_').replace(':USDT', '')}",
        "blacklist": [],
        "emoji": "üèõ"
    },
    "okx": {
        "api": ccxt.okx({"enableRateLimit": True}),
        "symbol_format": lambda s: f"{s}/USDT:USDT",
        "is_futures": lambda m: (m.get('swap', False) or m.get('future', False)) and m['settle'] == 'USDT',
        "taker_fee": 0.0005,
        "maker_fee": 0.0002,
        "url_format": lambda s: f"https://www.okx.com/trade-swap/{s.replace('/', '-').replace(':USDT', '').lower()}",
        "blacklist": [],
        "emoji": "üèõ"
    },
    "gate": {
        "api": ccxt.gateio({"enableRateLimit": True}),
        "symbol_format": lambda s: f"{s}/USDT:USDT",
        "is_futures": lambda m: m.get('swap', False) and '_USDT' in m['id'],
        "taker_fee": 0.0006,
        "maker_fee": 0.0002,
        "url_format": lambda s: f"https://www.gate.io/futures_trade/{s.replace('/', '_').replace(':USDT', '')}",
        "blacklist": [],
        "emoji": "üèõ"
    },
    "bitget": {
        "api": ccxt.bitget({"enableRateLimit": True}),
        "symbol_format": lambda s: f"{s}/USDT:USDT",
        "is_futures": lambda m: m.get('swap', False) and 'USDT' in m['id'],
        "taker_fee": 0.0006,
        "maker_fee": 0.0002,
        "url_format": lambda s: f"https://www.bitget.com/ru/futures/{s.replace('/', '').replace(':USDT', '')}",
        "blacklist": [],
        "emoji": "üèõ"
    },
    "kucoin": {
        "api": ccxt.kucoin({"enableRateLimit": True}),
        "symbol_format": lambda s: f"{s}/USDT:USDT",
        "is_futures": lambda m: m.get('swap', False) and 'USDT' in m['id'],
        "taker_fee": 0.0006,
        "maker_fee": 0.0002,
        "url_format": lambda s: f"https://www.kucoin.com/futures/trade/{s.replace('/', '-').replace(':USDT', '')}",
        "blacklist": [],
        "emoji": "üèõ"
    },
    "htx": {
        "api": ccxt.htx({
            "enableRateLimit": True,
            "options": {
                "defaultType": "swap",  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤
                "fetchMarkets": ["swap"]  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ swap-—Ä—ã–Ω–∫–∏
            }
        }),
        "symbol_format": lambda s: f"{s}/USDT:USDT",
        "is_futures": lambda m: m.get('swap', False) and m.get('linear', False),
        "taker_fee": 0.0006,
        "maker_fee": 0.0002,
        "url_format": lambda s: f"https://www.htx.com/futures/exchange/{s.split(':')[0].replace('/', '_').lower()}",
        "blacklist": [],
        "emoji": "üèõ"
    },
    "bingx": {
        "api": ccxt.bingx({"enableRateLimit": True}),
        "symbol_format": lambda s: f"{s}/USDT:USDT",
        "is_futures": lambda m: m.get('swap', False) and 'USDT' in m['id'],
        "taker_fee": 0.0005,
        "maker_fee": 0.0002,
        "url_format": lambda s: f"https://bingx.com/en-us/futures/{s.replace('/', '')}",
        "blacklist": [],
        "emoji": "üèõ"
    },
    "phemex": {
        "api": ccxt.phemex({
            "enableRateLimit": True,
            "options": {
                "defaultType": "swap",  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤
            }
        }),
        "symbol_format": lambda s: f"{s}/USDT:USDT",
        "is_futures": lambda m: m.get('swap', False) and m['settle'] == 'USDT',
        "taker_fee": 0.0006,
        "maker_fee": 0.0002,
        "url_format": lambda s: f"https://phemex.com/futures/trade/{s.replace('/', '').replace(':USDT', '')}",
        "blacklist": [],
        "emoji": "üèõ"
    }
}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
SHARED_BOT = None
SPOT_EXCHANGES_LOADED = {}
FUTURES_EXCHANGES_LOADED = {}


async def send_telegram_message(message: str, chat_id: str = None, reply_markup: InlineKeyboardMarkup = None):
    global SHARED_BOT
    if not SHARED_BOT:
        SHARED_BOT = Bot(token=TELEGRAM_TOKEN)

    targets = [chat_id] if chat_id else TELEGRAM_CHAT_IDS

    for target_id in targets:
        try:
            await SHARED_BOT.send_message(
                chat_id=target_id,
                text=message,
                parse_mode="HTML",
                disable_web_page_preview=True,
                reply_markup=reply_markup
            )
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {target_id}")
        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ {target_id}: {e}")


def load_markets_sync(exchange):
    try:
        exchange.load_markets()
        logger.info(f"–†—ã–Ω–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è {exchange.id}")
        return exchange
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {exchange.id}: {e}")
        return None


async def fetch_ticker_data(exchange, symbol: str):
    try:
        ticker = await asyncio.get_event_loop().run_in_executor(
            None, exchange.fetch_ticker, symbol
        )
        if ticker:
            price = float(ticker['last']) if ticker.get('last') else None

            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–º –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            volume = None
            if ticker.get('quoteVolume') is not None:
                volume = float(ticker['quoteVolume'])
            elif ticker.get('baseVolume') is not None and price:
                volume = float(ticker['baseVolume']) * price

            logger.debug(f"–î–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä–∞ {symbol} –Ω–∞ {exchange.id}: —Ü–µ–Ω–∞={price}, –æ–±—ä–µ–º={volume}")

            return {
                'price': price,
                'volume': volume,
                'symbol': symbol
            }
        return None
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö {symbol} –Ω–∞ {exchange.id}: {e}")
        return None


async def fetch_order_book(exchange, symbol: str, depth: int = CURRENT_SETTINGS["SPOT_ORDER_BOOK_DEPTH"]):
    try:
        order_book = await asyncio.get_event_loop().run_in_executor(
            None, exchange.fetch_order_book, symbol, depth)
        logger.debug(f"–°—Ç–∞–∫–∞–Ω –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è {symbol} –Ω–∞ {exchange.id}")
        return order_book
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ —Å—Ç–∞–∫–∞–Ω–∞ {symbol} –Ω–∞ {exchange.id}: {e}")
        return None


def calculate_available_volume(order_book, side: str, max_impact_percent: float):
    if not order_book:
        return 0

    if side == 'buy':
        asks = order_book['asks']
        if not asks:
            return 0
        best_ask = asks[0][0]
        max_allowed_price = best_ask * (1 + max_impact_percent / 100)
        total_volume = 0
        for price, volume in asks:
            if price > max_allowed_price:
                break
            total_volume += volume
        return total_volume
    elif side == 'sell':
        bids = order_book['bids']
        if not bids:
            return 0
        best_bid = bids[0][0]
        min_allowed_price = best_bid * (1 - max_impact_percent / 100)
        total_volume = 0
        for price, volume in bids:
            if price < min_allowed_price:
                break
            total_volume += volume
        return total_volume
    return 0


async def check_deposit_withdrawal_status(exchange, currency: str, check_type: str = 'deposit'):
    try:
        try:
            currencies = await asyncio.get_event_loop().run_in_executor(
                None, exchange.fetch_currencies)
            if currency in currencies:
                currency_info = currencies[currency]
                if check_type == 'deposit':
                    status = currency_info.get('deposit', False)
                else:
                    status = currency_info.get('withdraw', False)
                logger.debug(
                    f"–°—Ç–∞—Ç—É—Å {check_type} –¥–ª—è {currency} –Ω–∞ {exchange.id}: {status} (—á–µ—Ä–µ–∑ fetch_currencies)"
                )
                return status
        except (ccxt.NotSupported, AttributeError) as e:
            logger.debug(
                f"fetch_currencies –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞ {exchange.id}: {e}")

        try:
            symbol = f"{currency}/USDT"
            market = exchange.market(symbol)
            if market:
                if check_type == 'deposit':
                    status = market.get('deposit', True)
                else:
                    status = market.get('withdraw', True)
                logger.debug(
                    f"–°—Ç–∞—Ç—É—Å {check_type} –¥–ª—è {currency} –Ω–∞ {exchange.id}: {status} (—á–µ—Ä–µ–∑ market)"
                )
                return status
        except (ccxt.BadSymbol, KeyError) as e:
            logger.debug(
                f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ market –¥–ª—è {currency} –Ω–∞ {exchange.id}: {e}")

        try:
            currency_info = exchange.currency(currency)
            if check_type == 'deposit':
                status = currency_info.get(
                    'active', False) and currency_info.get('deposit', True)
            else:
                status = currency_info.get(
                    'active', False) and currency_info.get('withdraw', True)
            logger.debug(
                f"–°—Ç–∞—Ç—É—Å {check_type} –¥–ª—è {currency} –Ω–∞ {exchange.id}: {status} (—á–µ—Ä–µ–∑ currency)"
            )
            return status
        except (KeyError, AttributeError) as e:
            logger.debug(
                f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ currency –¥–ª—è {currency} –Ω–∞ {exchange.id}: {e}"
            )

        logger.debug(
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å {check_type} –¥–ª—è {currency} –Ω–∞ {exchange.id}, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º True"
        )
        return True
    except Exception as e:
        logger.warning(
            f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {check_type} {currency} –Ω–∞ {exchange.id}: {e}")
        return True


def calculate_min_entry_amount(buy_price: float, sell_price: float, min_profit: float, buy_fee_percent: float,
                               sell_fee_percent: float) -> float:
    profit_per_unit = sell_price * (1 - sell_fee_percent) - buy_price * (1 + buy_fee_percent)
    if profit_per_unit <= 0:
        return 0
    min_amount = min_profit / profit_per_unit
    return min_amount * buy_price


def calculate_profit(buy_price: float, sell_price: float, amount: float, buy_fee_percent: float,
                     sell_fee_percent: float) -> dict:
    buy_cost = amount * buy_price * (1 + buy_fee_percent)
    sell_revenue = amount * sell_price * (1 - sell_fee_percent)
    net_profit = sell_revenue - buy_cost
    profit_percent = (net_profit / buy_cost) * 100 if buy_cost > 0 else 0

    return {
        "net": net_profit,
        "percent": profit_percent,
        "entry_amount": amount * buy_price
    }


async def check_spot_arbitrage():
    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ø–æ—Ç–æ–≤–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏—Ä–∂
    global SPOT_EXCHANGES_LOADED
    exchanges = {}
    for name, config in SPOT_EXCHANGES.items():
        try:
            exchange = await asyncio.get_event_loop().run_in_executor(
                None, load_markets_sync, config["api"])
            if exchange:
                exchanges[name] = {"api": exchange, "config": config}
                logger.info(f"{name.upper()} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ {name}: {e}")

    SPOT_EXCHANGES_LOADED = exchanges

    if len(exchanges) < CURRENT_SETTINGS["SPOT_MIN_EXCHANGES_FOR_PAIR"]:
        logger.error(
            f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∏—Ä–∂ (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º {CURRENT_SETTINGS['SPOT_MIN_EXCHANGES_FOR_PAIR']})")
        return

    # –°–±–æ—Ä –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
    all_pairs = defaultdict(set)
    for name, data in exchanges.items():
        exchange = data["api"]
        config = data["config"]
        for symbol, market in exchange.markets.items():
            try:
                if config["is_spot"](market):
                    base = market['base']
                    all_pairs[base].add((name, symbol))
            except Exception as e:
                logger.warning(
                    f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä—ã {symbol} –Ω–∞ {name}: {e}")

    valid_pairs = {
        base: list(pairs)
        for base, pairs in all_pairs.items()
        if len(pairs) >= CURRENT_SETTINGS["SPOT_MIN_EXCHANGES_FOR_PAIR"]
    }

    if not valid_pairs:
        logger.error("–ù–µ—Ç –ø–∞—Ä, —Ç–æ—Ä–≥—É–µ–º—ã—Ö —Ö–æ—Ç—è –±—ã –Ω–∞ –¥–≤—É—Ö –±–∏—Ä–∂–∞—Ö")
        return

    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(valid_pairs)} –ø–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")

    while True:
        try:
            found_opportunities = 0
            for base, exchange_symbols in valid_pairs.items():
                try:
                    ticker_data = {}

                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è –≤—Å–µ—Ö –±–∏—Ä–∂
                    for name, symbol in exchange_symbols:
                        try:
                            data = await fetch_ticker_data(
                                exchanges[name]["api"], symbol)
                            if data and data['price'] is not None:
                                # –ï—Å–ª–∏ –æ–±—ä–µ–º –∏–∑–≤–µ—Å—Ç–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º
                                if data['volume'] is None:
                                    logger.debug(f"–û–±—ä–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω –¥–ª—è {symbol} –Ω–∞ {name}, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É")
                                    ticker_data[name] = data
                                elif data['volume'] >= CURRENT_SETTINGS["SPOT_MIN_VOLUME_USD"]:
                                    ticker_data[name] = data
                                else:
                                    logger.debug(
                                        f"–û–±—ä–µ–º {symbol} –Ω–∞ {name} —Å–ª–∏—à–∫–æ–º –º–∞–ª: {data['volume']}"
                                    )
                            else:
                                logger.debug(
                                    f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol} –Ω–∞ {name}")
                        except Exception as e:
                            logger.warning(
                                f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö {base} –Ω–∞ {name}: {e}"
                            )

                    if len(ticker_data) < CURRENT_SETTINGS["SPOT_MIN_EXCHANGES_FOR_PAIR"]:
                        continue

                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏—Ä–∂–∏ –ø–æ —Ü–µ–Ω–µ
                    sorted_data = sorted(ticker_data.items(),
                                         key=lambda x: x[1]['price'])
                    min_ex = sorted_data[0]  # –°–∞–º–∞—è –Ω–∏–∑–∫–∞—è —Ü–µ–Ω–∞ (–ø–æ–∫—É–ø–∫–∞)
                    max_ex = sorted_data[-1]  # –°–∞–º–∞—è –≤—ã—Å–æ–∫–∞—è —Ü–µ–Ω–∞ (–ø—Ä–æ–¥–∞–∂–∞)

                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ø—Ä–µ–¥
                    spread = (max_ex[1]['price'] -
                              min_ex[1]['price']) / min_ex[1]['price'] * 100

                    logger.debug(
                        f"–ü–∞—Ä–∞ {base}: —Å–ø—Ä–µ–¥ {spread:.2f}% (min: {min_ex[0]} {min_ex[1]['price']}, max: {max_ex[0]} {max_ex[1]['price']})"
                    )

                    if CURRENT_SETTINGS["SPOT_THRESHOLD_PERCENT"] <= spread <= CURRENT_SETTINGS[
                        "SPOT_MAX_THRESHOLD_PERCENT"]:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–µ–ø–æ–∑–∏—Ç–∞ –∏ –≤—ã–≤–æ–¥–∞
                        deposit_available = await check_deposit_withdrawal_status(
                            exchanges[max_ex[0]]["api"], base, 'deposit')
                        withdrawal_available = await check_deposit_withdrawal_status(
                            exchanges[min_ex[0]]["api"], base, 'withdrawal')

                        logger.debug(
                            f"–ü–∞—Ä–∞ {base}: –¥–µ–ø–æ–∑–∏—Ç={deposit_available}, –≤—ã–≤–æ–¥={withdrawal_available}"
                        )

                        if not (deposit_available and withdrawal_available):
                            logger.debug(
                                f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º {base}: –¥–µ–ø–æ–∑–∏—Ç –∏–ª–∏ –≤—ã–≤–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                            )
                            continue

                        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–∫–∞–Ω—ã –æ—Ä–¥–µ—Ä–æ–≤
                        buy_exchange = exchanges[min_ex[0]]["api"]
                        sell_exchange = exchanges[max_ex[0]]["api"]
                        buy_symbol = min_ex[1]['symbol']
                        sell_symbol = max_ex[1]['symbol']

                        buy_order_book, sell_order_book = await asyncio.gather(
                            fetch_order_book(buy_exchange, buy_symbol),
                            fetch_order_book(sell_exchange, sell_symbol))

                        if not buy_order_book or not sell_order_book:
                            logger.debug(
                                f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º {base}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞–∫–∞–Ω–∞")
                            continue

                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –æ–±—ä–µ–º
                        buy_volume = calculate_available_volume(
                            buy_order_book, 'buy', CURRENT_SETTINGS["SPOT_MAX_IMPACT_PERCENT"])
                        sell_volume = calculate_available_volume(
                            sell_order_book, 'sell', CURRENT_SETTINGS["SPOT_MAX_IMPACT_PERCENT"])
                        available_volume = min(buy_volume, sell_volume)

                        logger.debug(
                            f"–ü–∞—Ä–∞ {base}: –¥–æ—Å—Ç—É–ø–Ω—ã–π –æ–±—ä–µ–º {available_volume}")

                        if available_volume <= 0:
                            continue

                        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∏—Å—Å–∏–∏
                        buy_fee = exchanges[min_ex[0]]["config"]["taker_fee"]
                        sell_fee = exchanges[max_ex[0]]["config"]["taker_fee"]

                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –¥–ª—è MIN_NET_PROFIT_USD
                        min_amount_for_profit = calculate_min_entry_amount(
                            buy_price=min_ex[1]['price'],
                            sell_price=max_ex[1]['price'],
                            min_profit=CURRENT_SETTINGS["SPOT_MIN_NET_PROFIT_USD"],
                            buy_fee_percent=buy_fee,
                            sell_fee_percent=sell_fee)

                        if min_amount_for_profit <= 0:
                            logger.debug(
                                f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º {base}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –ø—Ä–∏–±—ã–ª—å")
                            continue

                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω—É—é —Å—É–º–º—É –≤—Ö–æ–¥–∞
                        max_possible_amount = min(
                            available_volume,
                            CURRENT_SETTINGS["SPOT_MAX_ENTRY_AMOUNT_USDT"] / min_ex[1]['price'])

                        max_entry_amount = max_possible_amount * min_ex[1][
                            'price']
                        min_entry_amount = max(min_amount_for_profit,
                                               CURRENT_SETTINGS["SPOT_MIN_ENTRY_AMOUNT_USDT"])

                        if min_entry_amount > max_entry_amount:
                            logger.debug(
                                f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º {base}: min_entry_amount > max_entry_amount"
                            )
                            continue

                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å
                        profit_min = calculate_profit(
                            buy_price=min_ex[1]['price'],
                            sell_price=max_ex[1]['price'],
                            amount=min_entry_amount / min_ex[1]['price'],
                            buy_fee_percent=buy_fee,
                            sell_fee_percent=sell_fee)

                        profit_max = calculate_profit(
                            buy_price=min_ex[1]['price'],
                            sell_price=max_ex[1]['price'],
                            amount=max_possible_amount,
                            buy_fee_percent=buy_fee,
                            sell_fee_percent=sell_fee)

                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        utc_plus_3 = timezone(timedelta(hours=3))
                        current_time = datetime.now(utc_plus_3).strftime(
                            '%H:%M:%S')

                        def format_volume(vol):
                            if vol is None:
                                return "N/A"
                            if vol >= 1_000_000:
                                return f"${vol / 1_000_000:.1f}M"
                            if vol >= 1_000:
                                return f"${vol / 1_000:.1f}K"
                            return f"${vol:.1f}"

                        min_volume = format_volume(min_ex[1]['volume'])
                        max_volume = format_volume(max_ex[1]['volume'])

                        safe_base = html.escape(base)
                        buy_exchange_config = SPOT_EXCHANGES[min_ex[0]]
                        sell_exchange_config = SPOT_EXCHANGES[max_ex[0]]

                        buy_url = buy_exchange_config["url_format"](buy_symbol)
                        sell_url = sell_exchange_config["url_format"](
                            sell_symbol)
                        withdraw_url = buy_exchange_config["withdraw_url"](
                            base)
                        deposit_url = sell_exchange_config["deposit_url"](base)

                        message = (
                            f"üöÄ <b>–°–ø–æ—Ç–æ–≤—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂:</b> <code>{safe_base}</code>\n"
                            f"‚ñ´Ô∏è <b>–†–∞–∑–Ω–∏—Ü–∞ —Ü–µ–Ω:</b> {spread:.2f}%\n"
                            f"‚ñ´Ô∏è <b>–î–æ—Å—Ç—É–ø–Ω—ã–π –æ–±—ä–µ–º:</b> {available_volume:.6f} {safe_base}\n"
                            f"‚ñ´Ô∏è <b>–°—É–º–º–∞ –≤—Ö–æ–¥–∞:</b> ${min_entry_amount:.2f}-${max_entry_amount:.2f}\n\n"
                            f"üü¢ <b>–ü–æ–∫—É–ø–∫–∞ –Ω–∞ <a href='{buy_url}'>{min_ex[0].upper()}</a>:</b> ${min_ex[1]['price']:.8f}\n"
                            f"   <b>–û–±—ä—ë–º:</b> {min_volume}\n"
                            f"   <b>–ö–æ–º–∏—Å—Å–∏—è:</b> {buy_fee * 100:.2f}%\n"
                            f"   <b><a href='{withdraw_url}'>–í—ã–≤–æ–¥</a></b>\n\n"
                            f"üî¥ <b>–ü—Ä–æ–¥–∞–∂–∞ –Ω–∞ <a href='{sell_url}'>{max_ex[0].upper()}</a>:</b> ${max_ex[1]['price']:.8f}\n"
                            f"   <b>–û–±—ä—ë–º:</b> {max_volume}\n"
                            f"   <b>–ö–æ–º–∏—Å—Å–∏—è:</b> {sell_fee * 100:.2f}%\n"
                            f"   <b><a href='{deposit_url}'>–î–µ–ø–æ–∑–∏—Ç</a></b>\n\n"
                            f"üí∞Ô∏è <b>–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å:</b> ${profit_min['net']:.2f}-${profit_max['net']:.2f} ({profit_max['percent']:.2f}%)\n\n"
                            f"‚è± {current_time}\n")

                        logger.info(
                            f"–ù–∞–π–¥–µ–Ω–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å: {base} ({spread:.2f}%)"
                        )
                        await send_telegram_message(message)
                        found_opportunities += 1

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä—ã {base}: {e}")

            logger.info(
                f"–¶–∏–∫–ª —Å–ø–æ—Ç–æ–≤–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {found_opportunities}")
            await asyncio.sleep(CURRENT_SETTINGS["SPOT_CHECK_INTERVAL"])

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ —Å–ø–æ—Ç–æ–≤–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞: {e}")
            await asyncio.sleep(60)


async def check_futures_arbitrage():
    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—å—é—á–µ—Ä—Å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏—Ä–∂
    global FUTURES_EXCHANGES_LOADED
    exchanges = {}
    for name, config in FUTURES_EXCHANGES.items():
        try:
            exchange = await asyncio.get_event_loop().run_in_executor(
                None, load_markets_sync, config["api"]
            )
            if exchange:
                exchanges[name] = {
                    "api": exchange,
                    "config": config
                }
                logger.info(f"{name.upper()} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ {name}: {e}")

    FUTURES_EXCHANGES_LOADED = exchanges

    if len(exchanges) < CURRENT_SETTINGS["FUTURES_MIN_EXCHANGES_FOR_PAIR"]:
        logger.error(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∏—Ä–∂ (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º {CURRENT_SETTINGS['FUTURES_MIN_EXCHANGES_FOR_PAIR']})")
        return

    # –°–±–æ—Ä –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä USDT
    all_pairs = defaultdict(set)
    for name, data in exchanges.items():
        exchange = data["api"]
        config = data["config"]
        for symbol, market in exchange.markets.items():
            try:
                if config["is_futures"](market):
                    base = market['base']
                    if base not in config["blacklist"]:
                        all_pairs[base].add((name, symbol))
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä—ã {symbol} –Ω–∞ {name}: {e}")

    valid_pairs = {
        base: list(pairs) for base, pairs in all_pairs.items()
        if len(pairs) >= CURRENT_SETTINGS["FUTURES_MIN_EXCHANGES_FOR_PAIR"]
    }

    if not valid_pairs:
        logger.error("–ù–µ—Ç —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö USDT –ø–∞—Ä, —Ç–æ—Ä–≥—É–µ–º—ã—Ö —Ö–æ—Ç—è –±—ã –Ω–∞ –¥–≤—É—Ö –±–∏—Ä–∂–∞—Ö")
        return

    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(valid_pairs)} —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö USDT –ø–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")

    while True:
        try:
            found_opportunities = 0
            for base, exchange_symbols in valid_pairs.items():
                try:
                    ticker_data = {}

                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è –≤—Å–µ—Ö –±–∏—Ä–∂
                    for name, symbol in exchange_symbols:
                        try:
                            data = await fetch_ticker_data(exchanges[name]["api"], symbol)
                            if data and data['price'] is not None:
                                # –ï—Å–ª–∏ –æ–±—ä–µ–º –∏–∑–≤–µ—Å—Ç–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º
                                if data['volume'] is None:
                                    logger.debug(f"–û–±—ä–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω –¥–ª—è {symbol} –Ω–∞ {name}, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É")
                                    ticker_data[name] = data
                                elif data['volume'] >= CURRENT_SETTINGS["FUTURES_MIN_VOLUME_USD"]:
                                    ticker_data[name] = data
                                else:
                                    logger.debug(f"–û–±—ä–µ–º {symbol} –Ω–∞ {name} —Å–ª–∏—à–∫–æ–º –º–∞–ª: {data['volume']}")
                            else:
                                logger.debug(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol} –Ω–∞ {name}")
                        except Exception as e:
                            logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö {base} –Ω–∞ {name}: {e}")

                    if len(ticker_data) < CURRENT_SETTINGS["FUTURES_MIN_EXCHANGES_FOR_PAIR"]:
                        continue

                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏—Ä–∂–∏ –ø–æ —Ü–µ–Ω–µ
                    sorted_data = sorted(ticker_data.items(), key=lambda x: x[1]['price'])
                    min_ex = sorted_data[0]  # –°–∞–º–∞—è –Ω–∏–∑–∫–∞—è —Ü–µ–Ω–∞ (–ø–æ–∫—É–ø–∫–∞)
                    max_ex = sorted_data[-1]  # –°–∞–º–∞—è –≤—ã—Å–æ–∫–∞—è —Ü–µ–Ω–∞ (–ø—Ä–æ–¥–∞–∂–∞)

                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ø—Ä–µ–¥
                    spread = (max_ex[1]['price'] - min_ex[1]['price']) / min_ex[1]['price'] * 100

                    logger.debug(
                        f"–ü–∞—Ä–∞ {base}: —Å–ø—Ä–µ–¥ {spread:.2f}% (min: {min_ex[0]} {min_ex[1]['price']}, max: {max_ex[0]} {max_ex[1]['price']})")

                    if CURRENT_SETTINGS["FUTURES_THRESHOLD_PERCENT"] <= spread <= CURRENT_SETTINGS[
                        "FUTURES_MAX_THRESHOLD_PERCENT"]:
                        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∏—Å—Å–∏–∏
                        buy_fee = exchanges[min_ex[0]]["config"]["taker_fee"]
                        sell_fee = exchanges[max_ex[0]]["config"]["taker_fee"]

                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –¥–ª—è MIN_NET_PROFIT_USD
                        min_amount_for_profit = calculate_min_entry_amount(
                            buy_price=min_ex[1]['price'],
                            sell_price=max_ex[1]['price'],
                            min_profit=CURRENT_SETTINGS["FUTURES_MIN_NET_PROFIT_USD"],
                            buy_fee_percent=buy_fee,
                            sell_fee_percent=sell_fee
                        )

                        if min_amount_for_profit <= 0:
                            logger.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º {base}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –ø—Ä–∏–±—ã–ª—å")
                            continue

                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω—É—é —Å—É–º–º—É –≤—Ö–æ–¥–∞
                        max_entry_amount = CURRENT_SETTINGS["FUTURES_MAX_ENTRY_AMOUNT_USDT"]
                        min_entry_amount = max(min_amount_for_profit, CURRENT_SETTINGS["FUTURES_MIN_ENTRY_AMOUNT_USDT"])

                        if min_entry_amount > max_entry_amount:
                            logger.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º {base}: min_entry_amount > max_entry_amount")
                            continue

                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å
                        profit_min = calculate_profit(
                            buy_price=min_ex[1]['price'],
                            sell_price=max_ex[1]['price'],
                            amount=min_entry_amount / min_ex[1]['price'],
                            buy_fee_percent=buy_fee,
                            sell_fee_percent=sell_fee
                        )

                        profit_max = calculate_profit(
                            buy_price=min_ex[1]['price'],
                            sell_price=max_ex[1]['price'],
                            amount=max_entry_amount / min_ex[1]['price'],
                            buy_fee_percent=buy_fee,
                            sell_fee_percent=sell_fee
                        )

                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        utc_plus_3 = timezone(timedelta(hours=3))
                        current_time = datetime.now(utc_plus_3).strftime('%H:%M:%S')

                        def format_volume(vol):
                            if vol is None:
                                return "N/A"
                            if vol >= 1_000_000:
                                return f"${vol / 1_000_000:.1f}M"
                            if vol >= 1_000:
                                return f"${vol / 1_000:.1f}K"
                            return f"${vol:.1f}"

                        min_volume = format_volume(min_ex[1]['volume'])
                        max_volume = format_volume(max_ex[1]['volume'])

                        safe_base = html.escape(base)
                        buy_exchange_config = FUTURES_EXCHANGES[min_ex[0]]
                        sell_exchange_config = FUTURES_EXCHANGES[max_ex[0]]

                        buy_url = buy_exchange_config["url_format"](min_ex[1]['symbol'].replace(':USDT', ''))
                        sell_url = sell_exchange_config["url_format"](max_ex[1]['symbol'].replace(':USDT', ''))

                        message = (
                            f"üìä <b>–§—å—é—á–µ—Ä—Å–Ω—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂:</b> <code>{safe_base}</code>\n"
                            f"‚ñ´Ô∏è <b>–†–∞–∑–Ω–∏—Ü–∞ —Ü–µ–Ω:</b> {spread:.2f}%\n"
                            f"‚ñ´Ô∏è <b>–°—É–º–º–∞ –≤—Ö–æ–¥–∞:</b> ${min_entry_amount:.2f}-${max_entry_amount:.2f}\n\n"
                            f"üü¢ <b>–õ–æ–Ω–≥ –Ω–∞ <a href='{buy_url}'>{min_ex[0].upper()}</a>:</b> ${min_ex[1]['price']:.8f}\n"
                            f"   <b>–û–±—ä—ë–º:</b> {min_volume}\n"
                            f"   <b>–ö–æ–º–∏—Å—Å–∏—è:</b> {buy_fee * 100:.3f}%\n\n"
                            f"üî¥ <b>–®–æ—Ä—Ç –Ω–∞ <a href='{sell_url}'>{max_ex[0].upper()}</a>:</b> ${max_ex[1]['price']:.8f}\n"
                            f"   <b>–û–±—ä—ë–º:</b> {max_volume}\n"
                            f"   <b>–ö–æ–º–∏—Å—Å–∏—è:</b> {sell_fee * 100:.3f}%\n\n"
                            f"üí∞ <b>–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å:</b> ${profit_min['net']:.2f}-${profit_max['net']:.2f} ({profit_max['percent']:.2f}%)\n\n"
                            f"‚è± {current_time}\n"
                        )

                        logger.info(f"–ù–∞–π–¥–µ–Ω–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å: {base} ({spread:.2f}%)")
                        await send_telegram_message(message)
                        found_opportunities += 1

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä—ã {base}: {e}")

            logger.info(f"–¶–∏–∫–ª —Ñ—å—é—á–µ—Ä—Å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {found_opportunities}")
            await asyncio.sleep(CURRENT_SETTINGS["FUTURES_CHECK_INTERVAL"])

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ —Ñ—å—é—á–µ—Ä—Å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞: {e}")
            await asyncio.sleep(60)


def format_price(price: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ü–µ–Ω—É –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if price is None:
        return "N/A"

    # –î–ª—è —Ü–µ–Ω > 1000 –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø—è—Ç—ã–µ –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ —Ç—ã—Å—è—á
    if price >= 1000:
        return f"${price:,.2f}"

    # –î–ª—è —Ü–µ–Ω > 1 –∏—Å–ø–æ–ª—å–∑—É–µ–º 4 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    if price >= 1:
        return f"${price:.4f}"

    # –î–ª—è —Ü–µ–Ω < 1 –∏—Å–ø–æ–ª—å–∑—É–µ–º 8 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    return f"${price:.8f}"


def format_volume(vol: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–±—ä–µ–º –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if vol is None:
        return "N/A"

    # –î–ª—è –æ–±—ä–µ–º–æ–≤ > 1 –º–∏–ª–ª–∏–æ–Ω–∞
    if vol >= 1_000_000:
        return f"${vol / 1_000_000:,.1f}M"

    # –î–ª—è –æ–±—ä–µ–º–æ–≤ > 1000
    if vol >= 1_000:
        return f"${vol / 1_000:,.1f}K"

    # –î–ª—è –æ–±—ä–µ–º–æ–≤ < 1000
    return f"${vol:,.0f}"


async def get_coin_prices(coin: str, market_type: str):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—ã –º–æ–Ω–µ—Ç—ã –Ω–∞ –≤—Å–µ—Ö –±–∏—Ä–∂–∞—Ö –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞"""
    coin = coin.upper()
    exchanges = SPOT_EXCHANGES_LOADED if market_type == "spot" else FUTURES_EXCHANGES_LOADED

    if not exchanges:
        return "‚ùå –ë–∏—Ä–∂–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    results = []
    found_on = 0

    for name, data in exchanges.items():
        exchange = data["api"]
        config = data["config"]

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ä—ã–Ω–∫–∞
        symbol = config["symbol_format"](coin)

        try:
            market = exchange.market(symbol)
            if (market_type == "spot" and config["is_spot"](market)) or \
                    (market_type == "futures" and config["is_futures"](market)):

                ticker = await fetch_ticker_data(exchange, symbol)
                if ticker and ticker['price']:
                    found_on += 1
                    price = ticker['price']
                    volume = ticker.get('volume')

                    # –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è –±–∏—Ä–∂–∏
                    url = config["url_format"](symbol)

                    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
                    results.append({
                        "price": price,
                        "name": name.upper(),
                        "volume": volume,
                        "url": url,
                        "emoji": config.get("emoji", "üèõ")
                    })
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã {symbol} –Ω–∞ {name}: {e}")

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ü–µ–Ω–µ (–æ—Ç –Ω–∏–∑–∫–æ–π –∫ –≤—ã—Å–æ–∫–æ–π)
    results.sort(key=lambda x: x["price"])

    utc_plus_3 = timezone(timedelta(hours=3))
    current_time = datetime.now(utc_plus_3).strftime('%H:%M:%S')

    market_name = "–°–ø–æ—Ç" if market_type == "spot" else "–§—å—é—á–µ—Ä—Å—ã"
    market_color = "üöÄ" if market_type == "spot" else "üìä"

    if results:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        response = f"{market_color} <b>{market_name} —Ä—ã–Ω–∫–∏ –¥–ª—è <code>{coin}</code>:</b>\n\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–∂–¥–æ–π –±–∏—Ä–∂–µ
        for idx, item in enumerate(results, 1):
            # –°–¥–µ–ª–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∏—Ä–∂–∏ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π
            response += (
                f"{item['emoji']} <a href='{item['url']}'><b>{item['name']}</b></a>\n"
                f"‚ñ´Ô∏è –¶–µ–Ω–∞: {format_price(item['price'])}\n"
                f"‚ñ´Ô∏è –û–±—ä–µ–º: {format_volume(item['volume'])}\n"
            )

            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
            if idx < len(results):
                response += "\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏—Ä–∂
        response += f"\n‚è± {current_time} | –ë–∏—Ä–∂: {found_on}"
    else:
        response = f"‚ùå –ú–æ–Ω–µ—Ç–∞ {coin} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ {market_name} —Ä—ã–Ω–∫–µ"

    return response


async def handle_coin_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –º–æ–Ω–µ—Ç—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
    user_id = str(update.effective_user.id)

    if user_id not in TELEGRAM_CHAT_IDS:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    coin = update.message.text.strip().upper()
    if not coin:
        await update.message.reply_text("‚ÑπÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä BTC)")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω –¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å–∏–º–≤–æ–ª (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã)
    if not re.match(r'^[A-Z0-9]{2,8}$', coin):
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–Ω–µ—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä BTC –∏–ª–∏ ETH)")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞
    keyboard = [
        [
            InlineKeyboardButton("üöÄ –°–ø–æ—Ç", callback_data=f"spot_{coin}"),
            InlineKeyboardButton("üìä –§—å—é—á–µ—Ä—Å—ã", callback_data=f"futures_{coin}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        f"üîç –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä—ã–Ω–∫–∞ –¥–ª—è <b><code>{coin}</code></b>:",
        parse_mode="HTML",
        reply_markup=reply_markup
    )


async def handle_button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()

    user_id = str(query.from_user.id)
    if user_id not in TELEGRAM_CHAT_IDS:
        await query.edit_message_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    data = query.data.split("_")
    if len(data) < 2:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫
    if data[0] == "admin":
        if user_id != ADMIN_USER_ID:
            await query.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é", show_alert=True)
            return
            
        if data[1] == "panel":
            await show_admin_panel(query)
        elif data[1] == "spot":
            await show_spot_settings_help(query)
        elif data[1] == "futures":
            await show_futures_settings_help(query)
        elif data[1] == "reset":
            await reset_settings_callback(query)
        elif data[1] == "view":
            await show_settings_callback(query)
        elif data[1] == "back":
            await query.edit_message_text("üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        return

    market_type = data[0]
    coin = "_".join(data[1:])  # –ù–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ coin —Å–æ–¥–µ—Ä–∂–∏—Ç _

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–ó–∞–≥—Ä—É–∑–∫–∞..."
    await query.edit_message_text(
        text=f"‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è <b><code>{coin}</code></b> –Ω–∞ {'—Å–ø–æ—Ç–µ' if market_type == 'spot' else '—Ñ—å—é—á–µ—Ä—Å–∞—Ö'}...",
        parse_mode="HTML"
    )

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    response = await get_coin_prices(coin, market_type)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    await query.edit_message_text(
        text=response,
        parse_mode="HTML",
        disable_web_page_preview=True
    )


async def show_admin_panel(query: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    keyboard = [
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ø–æ—Ç–∞", callback_data="admin_spot")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ—å—é—á–µ—Ä—Å–æ–≤", callback_data="admin_futures")],
        [InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_reset")],
        [InlineKeyboardButton("üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫", callback_data="admin_view")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text="üëë <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="HTML",
        reply_markup=reply_markup
    )


async def show_spot_settings_help(query: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–º–æ—â—å –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —Å–ø–æ—Ç–∞"""
    help_text = (
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ø–æ—Ç–æ–≤–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞</b>\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>/set_spot min_threshold=0.5 max_threshold=40 interval=30 min_exchanges=2 "
        "min_volume=800000 min_entry=5 max_entry=120 max_impact=0.5 depth=10 min_profit=4</code>\n\n"
        "üîπ <b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>\n"
        "min_threshold - –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ (%)\n"
        "max_threshold - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ (%)\n"
        "interval - –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Å–µ–∫)\n"
        "min_exchanges - –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏—Ä–∂\n"
        "min_volume - –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º (USD)\n"
        "min_entry - –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—Ö–æ–¥–∞ (USDT)\n"
        "max_entry - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—Ö–æ–¥–∞ (USDT)\n"
        "max_impact - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Ü–µ–Ω—É (%)\n"
        "depth - –ì–ª—É–±–∏–Ω–∞ —Å—Ç–∞–∫–∞–Ω–∞\n"
        "min_profit - –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å (USD)\n\n"
        "–ü—Ä–∏–º–µ—Ä: <code>/set_spot min_threshold=1.0 max_threshold=30 interval=45 min_volume=1000000</code>"
    )
    
    await query.edit_message_text(
        text=help_text,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]])
    )


async def show_futures_settings_help(query: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–º–æ—â—å –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —Ñ—å—é—á–µ—Ä—Å–æ–≤"""
    help_text = (
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ—å—é—á–µ—Ä—Å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞</b>\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>/set_futures min_threshold=0.5 max_threshold=20 interval=30 "
        "min_volume=800000 min_exchanges=2 min_entry=5 max_entry=60 min_profit=2.5</code>\n\n"
        "üîπ <b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>\n"
        "min_threshold - –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ (%)\n"
        "max_threshold - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ (%)\n"
        "interval - –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Å–µ–∫)\n"
        "min_volume - –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º (USD)\n"
        "min_exchanges - –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏—Ä–∂\n"
        "min_entry - –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—Ö–æ–¥–∞ (USDT)\n"
        "max_entry - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—Ö–æ–¥–∞ (USDT)\n"
        "min_profit - –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å (USD)\n\n"
        "–ü—Ä–∏–º–µ—Ä: <code>/set_futures min_threshold=0.8 max_threshold=25 interval=40 min_volume=1500000</code>"
    )
    
    await query.edit_message_text(
        text=help_text,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]])
    )


async def reset_settings_callback(query: CallbackQuery):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    global CURRENT_SETTINGS
    CURRENT_SETTINGS = DEFAULT_SETTINGS.copy()
    
    await query.edit_message_text(
        text="‚úÖ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é!",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]])
    )


async def show_settings_callback(query: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    settings_message = (
        "‚öôÔ∏è <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞</b>\n\n"
        "<b>–°–ø–æ—Ç–æ–≤—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂:</b>\n"
        f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥: {CURRENT_SETTINGS['SPOT_THRESHOLD_PERCENT']}%\n"
        f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥: {CURRENT_SETTINGS['SPOT_MAX_THRESHOLD_PERCENT']}%\n"
        f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {CURRENT_SETTINGS['SPOT_CHECK_INTERVAL']} —Å–µ–∫\n"
        f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ –±–∏—Ä–∂: {CURRENT_SETTINGS['SPOT_MIN_EXCHANGES_FOR_PAIR']}\n"
        f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º: ${CURRENT_SETTINGS['SPOT_MIN_VOLUME_USD']:,.0f}\n"
        f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—Ö–æ–¥–∞: ${CURRENT_SETTINGS['SPOT_MIN_ENTRY_AMOUNT_USDT']}\n"
        f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—Ö–æ–¥–∞: ${CURRENT_SETTINGS['SPOT_MAX_ENTRY_AMOUNT_USDT']}\n"
        f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Ü–µ–Ω—É: {CURRENT_SETTINGS['SPOT_MAX_IMPACT_PERCENT']}%\n"
        f"–ì–ª—É–±–∏–Ω–∞ —Å—Ç–∞–∫–∞–Ω–∞: {CURRENT_SETTINGS['SPOT_ORDER_BOOK_DEPTH']}\n"
        f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: ${CURRENT_SETTINGS['SPOT_MIN_NET_PROFIT_USD']}\n\n"
        "<b>–§—å—é—á–µ—Ä—Å–Ω—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂:</b>\n"
        f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥: {CURRENT_SETTINGS['FUTURES_THRESHOLD_PERCENT']}%\n"
        f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥: {CURRENT_SETTINGS['FUTURES_MAX_THRESHOLD_PERCENT']}%\n"
        f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {CURRENT_SETTINGS['FUTURES_CHECK_INTERVAL']} —Å–µ–∫\n"
        f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º: ${CURRENT_SETTINGS['FUTURES_MIN_VOLUME_USD']:,.0f}\n"
        f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ –±–∏—Ä–∂: {CURRENT_SETTINGS['FUTURES_MIN_EXCHANGES_FOR_PAIR']}\n"
        f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—Ö–æ–¥–∞: ${CURRENT_SETTINGS['FUTURES_MIN_ENTRY_AMOUNT_USDT']}\n"
        f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—Ö–æ–¥–∞: ${CURRENT_SETTINGS['FUTURES_MAX_ENTRY_AMOUNT_USDT']}\n"
        f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: ${CURRENT_SETTINGS['FUTURES_MIN_NET_PROFIT_USD']}"
    )
    
    await query.edit_message_text(
        text=settings_message,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]])
    )


async def handle_any_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–æ–º–∞–Ω–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    user_id = str(update.effective_user.id)
    message_text = update.message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
    if user_id not in TELEGRAM_CHAT_IDS:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user_id == ADMIN_USER_ID:
        if message_text.startswith('/set_spot'):
            await set_spot_settings(update, context)
            return
        elif message_text.startswith('/set_futures'):
            await set_futures_settings(update, context)
            return
        elif message_text.startswith('/reset_settings'):
            await reset_settings(update, context)
            return
        elif message_text == '/admin':
            keyboard = [[InlineKeyboardButton("üëë –û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_panel")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
                reply_markup=reply_markup
            )
            return

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if message_text in ['/start', '/help']:
        response = (
            "ü§ñ <b>Crypto Arbitrage Bot</b>\n\n"
            "üîç –î–ª—è –ø–æ–∏—Å–∫–∞ —Ü–µ–Ω –Ω–∞ –º–æ–Ω–µ—Ç—É –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä <code>BTC</code> –∏–ª–∏ <code>ETH</code>)\n\n"
            "‚öôÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/settings - –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
            "üìä –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—â–µ—Ç –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞ —Å–ø–æ—Ç–æ–≤–æ–º –∏ —Ñ—å—é—á–µ—Ä—Å–Ω–æ–º —Ä—ã–Ω–∫–∞—Ö –∏ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
        )
        await update.message.reply_text(response, parse_mode="HTML")
    elif message_text == '/settings':
        await show_settings(update, context)
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ–∏—Å–∫ –º–æ–Ω–µ—Ç—ã)
        await handle_coin_search(update, context)


async def show_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    settings_message = (
        "‚öôÔ∏è <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞</b>\n\n"
        "<b>–°–ø–æ—Ç–æ–≤—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂:</b>\n"
        f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥: {CURRENT_SETTINGS['SPOT_THRESHOLD_PERCENT']}%\n"
        f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥: {CURRENT_SETTINGS['SPOT_MAX_THRESHOLD_PERCENT']}%\n"
        f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {CURRENT_SETTINGS['SPOT_CHECK_INTERVAL']} —Å–µ–∫\n"
        f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ –±–∏—Ä–∂: {CURRENT_SETTINGS['SPOT_MIN_EXCHANGES_FOR_PAIR']}\n"
        f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º: ${CURRENT_SETTINGS['SPOT_MIN_VOLUME_USD']:,.0f}\n"
        f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—Ö–æ–¥–∞: ${CURRENT_SETTINGS['SPOT_MIN_ENTRY_AMOUNT_USDT']}\n"
        f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—Ö–æ–¥–∞: ${CURRENT_SETTINGS['SPOT_MAX_ENTRY_AMOUNT_USDT']}\n"
        f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Ü–µ–Ω—É: {CURRENT_SETTINGS['SPOT_MAX_IMPACT_PERCENT']}%\n"
        f"–ì–ª—É–±–∏–Ω–∞ —Å—Ç–∞–∫–∞–Ω–∞: {CURRENT_SETTINGS['SPOT_ORDER_BOOK_DEPTH']}\n"
        f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: ${CURRENT_SETTINGS['SPOT_MIN_NET_PROFIT_USD']}\n\n"
        "<b>–§—å—é—á–µ—Ä—Å–Ω—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂:</b>\n"
        f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥: {CURRENT_SETTINGS['FUTURES_THRESHOLD_PERCENT']}%\n"
        f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥: {CURRENT_SETTINGS['FUTURES_MAX_THRESHOLD_PERCENT']}%\n"
        f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {CURRENT_SETTINGS['FUTURES_CHECK_INTERVAL']} —Å–µ–∫\n"
        f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º: ${CURRENT_SETTINGS['FUTURES_MIN_VOLUME_USD']:,.0f}\n"
        f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ –±–∏—Ä–∂: {CURRENT_SETTINGS['FUTURES_MIN_EXCHANGES_FOR_PAIR']}\n"
        f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—Ö–æ–¥–∞: ${CURRENT_SETTINGS['FUTURES_MIN_ENTRY_AMOUNT_USDT']}\n"
        f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—Ö–æ–¥–∞: ${CURRENT_SETTINGS['FUTURES_MAX_ENTRY_AMOUNT_USDT']}\n"
        f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: ${CURRENT_SETTINGS['FUTURES_MIN_NET_PROFIT_USD']}"
    )

    await update.message.reply_text(settings_message, parse_mode="HTML")


async def set_spot_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–ø–æ—Ç–æ–≤–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞"""
    if not context.args:
        await update.message.reply_text(
            "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_spot min_threshold=0.5 max_threshold=40 interval=30 "
            "min_exchanges=2 min_volume=800000 min_entry=5 max_entry=120 max_impact=0.5 depth=10 min_profit=4"
        )
        return

    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    params = {}
    for arg in context.args:
        if '=' not in arg:
            continue

        key, value = arg.split('=', 1)
        key = key.lower()

        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            if key in ['min_threshold', 'max_threshold', 'max_impact']:
                params[key] = float(value)
            elif key in ['min_volume', 'min_entry', 'max_entry', 'min_profit']:
                params[key] = float(value)
            elif key in ['interval', 'min_exchanges', 'depth']:
                params[key] = int(value)
        except ValueError:
            await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –∑–Ω–∞—á–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ {key}")
            return

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    if 'min_threshold' in params:
        CURRENT_SETTINGS["SPOT_THRESHOLD_PERCENT"] = params['min_threshold']
    if 'max_threshold' in params:
        CURRENT_SETTINGS["SPOT_MAX_THRESHOLD_PERCENT"] = params['max_threshold']
    if 'interval' in params:
        CURRENT_SETTINGS["SPOT_CHECK_INTERVAL"] = params['interval']
    if 'min_exchanges' in params:
        CURRENT_SETTINGS["SPOT_MIN_EXCHANGES_FOR_PAIR"] = params['min_exchanges']
    if 'min_volume' in params:
        CURRENT_SETTINGS["SPOT_MIN_VOLUME_USD"] = params['min_volume']
    if 'min_entry' in params:
        CURRENT_SETTINGS["SPOT_MIN_ENTRY_AMOUNT_USDT"] = params['min_entry']
    if 'max_entry' in params:
        CURRENT_SETTINGS["SPOT_MAX_ENTRY_AMOUNT_USDT"] = params['max_entry']
    if 'max_impact' in params:
        CURRENT_SETTINGS["SPOT_MAX_IMPACT_PERCENT"] = params['max_impact']
    if 'depth' in params:
        CURRENT_SETTINGS["SPOT_ORDER_BOOK_DEPTH"] = params['depth']
    if 'min_profit' in params:
        CURRENT_SETTINGS["SPOT_MIN_NET_PROFIT_USD"] = params['min_profit']

    await update.message.reply_text("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ø–æ—Ç–æ–≤–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")


async def set_futures_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞"""
    if not context.args:
        await update.message.reply_text(
            "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_futures min_threshold=0.5 max_threshold=20 interval=30 "
            "min_volume=800000 min_exchanges=2 min_entry=5 max_entry=60 min_profit=2.5"
        )
        return

    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    params = {}
    for arg in context.args:
        if '=' not in arg:
            continue

        key, value = arg.split('=', 1)
        key = key.lower()

        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            if key in ['min_threshold', 'max_threshold']:
                params[key] = float(value)
            elif key in ['min_volume', 'min_entry', 'max_entry', 'min_profit']:
                params[key] = float(value)
            elif key in ['interval', 'min_exchanges']:
                params[key] = int(value)
        except ValueError:
            await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –∑–Ω–∞—á–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ {key}")
            return

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    if 'min_threshold' in params:
        CURRENT_SETTINGS["FUTURES_THRESHOLD_PERCENT"] = params['min_threshold']
    if 'max_threshold' in params:
        CURRENT_SETTINGS["FUTURES_MAX_THRESHOLD_PERCENT"] = params['max_threshold']
    if 'interval' in params:
        CURRENT_SETTINGS["FUTURES_CHECK_INTERVAL"] = params['interval']
    if 'min_volume' in params:
        CURRENT_SETTINGS["FUTURES_MIN_VOLUME_USD"] = params['min_volume']
    if 'min_exchanges' in params:
        CURRENT_SETTINGS["FUTURES_MIN_EXCHANGES_FOR_PAIR"] = params['min_exchanges']
    if 'min_entry' in params:
        CURRENT_SETTINGS["FUTURES_MIN_ENTRY_AMOUNT_USDT"] = params['min_entry']
    if 'max_entry' in params:
        CURRENT_SETTINGS["FUTURES_MAX_ENTRY_AMOUNT_USDT"] = params['max_entry']
    if 'min_profit' in params:
        CURRENT_SETTINGS["FUTURES_MIN_NET_PROFIT_USD"] = params['min_profit']

    await update.message.reply_text("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ—å—é—á–µ—Ä—Å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")


async def reset_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    global CURRENT_SETTINGS
    CURRENT_SETTINGS = DEFAULT_SETTINGS.copy()
    await update.message.reply_text("‚úÖ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é!")


async def start_bot():
    """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –∫–æ–º–∞–Ω–¥"""
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏:
    application.add_handler(CommandHandler("start", handle_any_message))
    application.add_handler(CommandHandler("help", handle_any_message))
    application.add_handler(CommandHandler("settings", show_settings))
    application.add_handler(CommandHandler("admin", handle_any_message))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.COMMAND, handle_any_message))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_any_message))
    application.add_handler(CallbackQueryHandler(handle_button_click))

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫
    await application.initialize()
    await application.start()
    await application.updater.start_polling()
    return application


async def main():
    global SHARED_BOT
    SHARED_BOT = Bot(token=TELEGRAM_TOKEN)

    logger.info("–ó–∞–ø—É—Å–∫ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–≥–æ –±–æ—Ç–∞")
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç
        app = await start_bot()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        spot_task = asyncio.create_task(check_spot_arbitrage())
        futures_task = asyncio.create_task(check_futures_arbitrage())

        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
        while True:
            await asyncio.sleep(3600)

    except Exception as e:
        logger.error(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.getLogger("CryptoArbBot").setLevel(logging.DEBUG)
    logging.getLogger("ccxt").setLevel(logging.INFO)

    # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    asyncio.run(main())