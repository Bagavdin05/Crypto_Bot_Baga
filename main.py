import ccxt
import asyncio
from telegram import Bot, Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
    ConversationHandler
)
from telegram.error import TelegramError
import logging
from datetime import datetime, timezone, timedelta
from collections import defaultdict
import html
import re
import json
import os
import time

# –û–±—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = "7990034184:AAFTx--E5GE0NIPA0Yghr6KpBC80aVtSACs"
TELEGRAM_CHAT_IDS = ["1167694150", "7916502470", "5381553894", "1111230981"]

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–ø–æ—Ç–æ–≤–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
DEFAULT_SPOT_SETTINGS = {
    "THRESHOLD_PERCENT": 0.5,
    "MAX_THRESHOLD_PERCENT": 40,
    "CHECK_INTERVAL": 30,
    "MIN_EXCHANGES_FOR_PAIR": 2,
    "MIN_VOLUME_USD": 1000000,
    "MIN_ENTRY_AMOUNT_USDT": 5,
    "MAX_ENTRY_AMOUNT_USDT": 350,
    "MAX_IMPACT_PERCENT": 0.5,
    "ORDER_BOOK_DEPTH": 10,
    "MIN_NET_PROFIT_USD": 4,
    "ENABLED": True,
    "PRICE_CONVERGENCE_THRESHOLD": 0.5,
    "PRICE_CONVERGENCE_ENABLED": True
}

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ñ—å—é—á–µ—Ä—Å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
DEFAULT_FUTURES_SETTINGS = {
    "THRESHOLD_PERCENT": 0.5,
    "MAX_THRESHOLD_PERCENT": 20,
    "CHECK_INTERVAL": 30,
    "MIN_VOLUME_USD": 1000000,
    "MIN_EXCHANGES_FOR_PAIR": 2,
    "MIN_ENTRY_AMOUNT_USDT": 5,
    "MAX_ENTRY_AMOUNT_USDT": 170,
    "MIN_NET_PROFIT_USD": 3,
    "ENABLED": True,
    "PRICE_CONVERGENCE_THRESHOLD": 0.5,
    "PRICE_CONVERGENCE_ENABLED": True
}

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–ø–æ—Ç-—Ñ—å—é—á–µ—Ä—Å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
DEFAULT_SPOT_FUTURES_SETTINGS = {
    "THRESHOLD_PERCENT": 0.5,
    "MAX_THRESHOLD_PERCENT": 20,
    "CHECK_INTERVAL": 30,
    "MIN_VOLUME_USD": 1000000,
    "MIN_EXCHANGES_FOR_PAIR": 2,
    "MIN_ENTRY_AMOUNT_USDT": 5,
    "MAX_ENTRY_AMOUNT_USDT": 170,
    "MIN_NET_PROFIT_USD": 3,
    "ENABLED": True,
    "PRICE_CONVERGENCE_THRESHOLD": 0.5,
    "PRICE_CONVERGENCE_ENABLED": True
}

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–Ω—É—Ç—Ä–∏–±–∏—Ä–∂–µ–≤–æ–≥–æ (—Ç—Ä–µ—É–≥–æ–ª—å–Ω–æ–≥–æ) –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) <-- NEW
DEFAULT_TRIANGULAR_SETTINGS = {
    "THRESHOLD_PERCENT": 0.3,
    "MAX_THRESHOLD_PERCENT": 5,
    "CHECK_INTERVAL": 15,
    "MIN_VOLUME_USD": 50000,
    "MIN_NET_PROFIT_USD": 2,
    "ENABLED": True,
    "ENTRY_AMOUNT_USDT": 50, # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞ –≤—Ö–æ–¥–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
    "CONVERGENCE_THRESHOLD": 0.1,
    "PRICE_CONVERGENCE_ENABLED": True
}
# –ö–æ–Ω–µ—Ü NEW

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∏—Ä–∂
EXCHANGE_SETTINGS = {
    "bybit": {"ENABLED": True},
    "mexc": {"ENABLED": True},
    "okx": {"ENABLED": True},
    "gate": {"ENABLED": True},
    "bitget": {"ENABLED": True},
    "kucoin": {"ENABLED": True},
    "htx": {"ENABLED": True},
    "bingx": {"ENABLED": True},
    "phemex": {"ENABLED": True},
    "coinex": {"ENABLED": True},
    "blofin": {"ENABLED": True}
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SETTINGS_MENU, SPOT_SETTINGS, FUTURES_SETTINGS, SPOT_FUTURES_SETTINGS, TRIANGULAR_SETTINGS, EXCHANGE_SETTINGS_MENU, SETTING_VALUE, COIN_SELECTION = range(
    8) # –ò–∑–º–µ–Ω–µ–Ω–æ —Å 7 –Ω–∞ 8 –∏–∑-–∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è TRIANGULAR_SETTINGS

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger("CryptoArbBot")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
price_convergence_history = defaultdict(dict)
last_convergence_notification = defaultdict(dict)
arbitrage_start_times = defaultdict(dict)  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
current_arbitrage_opportunities = defaultdict(dict)  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
previous_arbitrage_opportunities = defaultdict(dict)  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
sent_arbitrage_opportunities = defaultdict(dict)  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤ Telegram –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–∏—Ä–∂
LAST_EXCHANGE_SETTINGS = None


# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
def load_settings():
    try:
        if os.path.exists('settings.json'):
            with open('settings.json', 'r') as f:
                settings = json.load(f)
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ —Ñ–∞–π–ª–µ
                if 'TRIANGULAR' not in settings:
                    settings['TRIANGULAR'] = DEFAULT_TRIANGULAR_SETTINGS.copy()
                return settings
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    return {
        "SPOT": DEFAULT_SPOT_SETTINGS.copy(),
        "FUTURES": DEFAULT_FUTURES_SETTINGS.copy(),
        "SPOT_FUTURES": DEFAULT_SPOT_FUTURES_SETTINGS.copy(),
        "TRIANGULAR": DEFAULT_TRIANGULAR_SETTINGS.copy(), # <-- NEW
        "EXCHANGES": EXCHANGE_SETTINGS.copy()
    }


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
def save_settings(settings):
    try:
        with open('settings.json', 'w') as f:
            json.dump(settings, f, indent=4)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
SHARED_BOT = None
SPOT_EXCHANGES_LOADED = {}
FUTURES_EXCHANGES_LOADED = {}
SETTINGS = load_settings()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∏—Ä–∂ –¥–ª—è —Å–ø–æ—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞)
SPOT_EXCHANGES = {
    "bybit": {
        "api": ccxt.bybit({"enableRateLimit": True}),
        "symbol_format": lambda s: f"{s}/USDT",
        "is_spot": lambda m: m.get('spot', False) and m['quote'] == 'USDT',
        "taker_fee": 0.001,
        "maker_fee": 0.001,
        "url_format": lambda s: f"https://www.bybit.com/trade/spot/{s.replace('/', '')}",
        "withdraw_url": lambda c: f"https://www.bybit.com/user/assets/withdraw",
        "deposit_url": lambda c: f"https://www.bybit.com/user/assets/deposit",
        "emoji": "üèõ",
        "blacklist": []
    },
    "mexc": {
        "api": ccxt.mexc({"enableRateLimit": True}),
        "symbol_format": lambda s: f"{s}/USDT",
        "is_spot": lambda m: m.get('spot', False) and m['quote'] == 'USDT',
        "taker_fee": 0.002,
        "maker_fee": 0.002,
        "url_format": lambda s: f"https://www.mexc.com/exchange/{s.replace('/', '_')}",
        "withdraw_url": lambda c: f"https://www.mexc.com/ru-RU/assets/withdraw/{c}",
        "deposit_url": lambda c: f"https://www.mexc.com/ru-RU/assets/deposit/{c}",
        "emoji": "üèõ",
        "blacklist": []
    },
    "okx": {
        "api": ccxt.okx({"enableRateLimit": True}),
        "symbol_format": lambda s: f"{s}/USDT",
        "is_spot": lambda m: m.get('spot', False) and m['quote'] == 'USDT',
        "taker_fee": 0.001,
        "maker_fee": 0.0008,
        "url_format": lambda s: f"https://www.okx.com/trade-spot/{s.replace('/', '-').lower()}",
        "withdraw_url": lambda c: f"https://www.okx.com/ru/balance/withdrawal/{c.lower()}-chain",
        "deposit_url": lambda c: f"https://www.okx.com/ru/balance/recharge/{c.lower()}",
        "emoji": "üèõ",
        "blacklist": ["BTC"]
    },
    "gate": {
        "api": ccxt.gateio({"enableRateLimit": True}),
        "symbol_format": lambda s: f"{s}/USDT",
        "is_spot": lambda m: m.get('spot', False) and m['quote'] == 'USDT',
        "taker_fee": 0.002,
        "maker_fee": 0.002,
        "url_format": lambda s: f"https://www.gate.io/trade/{s.replace('/', '_')}",
        "withdraw_url": lambda c: f"https://www.gate.io/myaccount/withdraw/{c}",
        "deposit_url": lambda c: f"https://www.gate.io/myaccount/deposit/{c}",
        "emoji": "üèõ",
        "blacklist": []
    },
    "bitget": {
        "api": ccxt.bitget({"enableRateLimit": True}),
        "symbol_format": lambda s: f"{s}/USDT",
        "is_spot": lambda m: m.get('spot', False) and m['quote'] == 'USDT',
        "taker_fee": 0.001,
        "maker_fee": 0.001,
        "url_format": lambda s: f"https://www.bitget.com/spot/{s.replace('/', '')}_SPBL",
        "withdraw_url": lambda c: f"https://www.bitget.com/ru/asset/withdraw?coinId={c}",
        "deposit_url": lambda c: f"https://www.bitget.com/ru/asset/recharge?coinId={c}",
        "emoji": "üèõ",
        "blacklist": []
    },
    "kucoin": {
        "api": ccxt.kucoin({"enableRateLimit": True}),
        "symbol_format": lambda s: f"{s}/USDT",
        "is_spot": lambda m: m.get('spot', False) and m['quote'] == 'USDT',
        "taker_fee": 0.001,
        "maker_fee": 0.001,
        "url_format": lambda s: f"https://www.kucoin.com/trade/{s.replace('/', '-')}",
        "withdraw_url": lambda c: f"https://www.kucoin.com/ru/assets/withdraw/{c}",
        "deposit_url": lambda c: f"https://www.kucoin.com/ru/assets/coin/{c}",
        "emoji": "üèõ",
        "blacklist": []
    },
    "htx": {
        "api": ccxt.htx({"enableRateLimit": True}),
        "symbol_format": lambda s: f"{s}/USDT",
        "is_spot": lambda m: m.get('spot', False) and m['quote'] == 'USDT',
        "taker_fee": 0.002,
        "maker_fee": 0.002,
        "url_format": lambda s: f"https://www.htx.com/trade/{s.replace('/', '_').lower()}",
        "withdraw_url": lambda c: f"https://www.htx.com/ru-ru/finance/withdraw/{c.lower()}",
        "deposit_url": lambda c: f"https://www.htx.com/ru-ru/finance/deposit/{c.lower()}",
        "emoji": "üèõ",
        "blacklist": []
    },
    "bingx": {
        "api": ccxt.bingx({"enableRateLimit": True}),
        "symbol_format": lambda s: f"{s}/USDT",
        "is_spot": lambda m: m.get('spot', False) and m['quote'] == 'USDT',
        "taker_fee": 0.001,
        "maker_fee": 0.001,
        "url_format": lambda s: f"https://bingx.com/en-us/spot/{s.replace('/', '')}",
        "withdraw_url": lambda c: f"https://bingx.com/en-us/assets/withdraw/{c}",
        "deposit_url": lambda c: f"https://bingx.com/en-us/assets/deposit/{c}",
        "emoji": "üèõ",
        "blacklist": []
    },
    "phemex": {
        "api": ccxt.phemex({"enableRateLimit": True}),
        "symbol_format": lambda s: f"{s}/USDT",
        "is_spot": lambda m: m.get('spot', False) and m['quote'] == 'USDT',
        "taker_fee": 0.001,
        "maker_fee": 0.001,
        "url_format": lambda s: f"https://phemex.com/spot/trade/{s.replace('/', '')}",
        "withdraw_url": lambda c: f"https://phemex.com/assets/withdraw?asset={c}",
        "deposit_url": lambda c: f"https://phemex.com/assets/deposit?asset={c}",
        "emoji": "üèõ",
        "blacklist": []
    },
    "coinex": {
        "api": ccxt.coinex({"enableRateLimit": True}),
        "symbol_format": lambda s: f"{s}/USDT",
        "is_spot": lambda m: m.get('spot', False) and m['quote'] == 'USDT',
        "taker_fee": 0.002,
        "maker_fee": 0.001,
        "url_format": lambda s: f"https://www.coinex.com/exchange/{s.replace('/', '-')}",
        "withdraw_url": lambda c: f"https://www.coinex.com/asset/withdraw/{c}",
        "deposit_url": lambda c: f"https://www.coinex.com/asset/deposit/{c}",
        "emoji": "üèõ",
        "blacklist": []
    },
    "blofin": {
        "api": ccxt.blofin({
            "enableRateLimit": True,
            "options": {
                "defaultType": "spot"
            }
        }),
        "symbol_format": lambda s: f"{s}/USDT",
        "is_spot": lambda m: (
                m.get('type') == 'spot' and
                m['quote'] == 'USDT'
        ),
        "taker_fee": 0.001,
        "maker_fee": 0.001,
        "url_format": lambda s: f"https://www.blofin.com/spot/{s.replace('/', '-')}",
        "withdraw_url": lambda c: f"https://www.blofin.com/assets/withdraw/{c}",
        "deposit_url": lambda c: f"https://www.blofin.com/assets/deposit/{c}",
        "emoji": "üèõ",
        "blacklist": []
    }
}

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∏—Ä–∂ –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤
FUTURES_EXCHANGES = {
    "bybit": {
        "api": ccxt.bybit({"enableRateLimit": True}),
        "symbol_format": lambda s: f"{s}/USDT:USDT",
        "is_futures": lambda m: (m.get('swap', False) or m.get('future', False)) and m['settle'] == 'USDT',
        "taker_fee": 0.0006,
        "maker_fee": 0.0001,
        "url_format": lambda s: f"https://www.bybit.com/trade/usdt/{s.replace('/', '').replace(':USDT', '')}",
        "blacklist": ["BTC", "ETH"],
        "emoji": "üìä"
    },
    "mexc": {
        "api": ccxt.mexc({"enableRateLimit": True}),
        "symbol_format": lambda s: f"{s}/USDT:USDT",
        "is_futures": lambda m: m.get('swap', False) and 'USDT' in m['id'],
        "taker_fee": 0.0006,
        "maker_fee": 0.0002,
        "url_format": lambda s: f"https://futures.mexc.com/exchange/{s.replace('/', '_').replace(':USDT', '')}",
        "blacklist": [],
        "emoji": "üìä"
    },
    "okx": {
        "api": ccxt.okx({"enableRateLimit": True}),
        "symbol_format": lambda s: f"{s}/USDT:USDT",
        "is_futures": lambda m: (m.get('swap', False) or m.get('future', False)) and m['settle'] == 'USDT',
        "taker_fee": 0.0005,
        "maker_fee": 0.0002,
        "url_format": lambda s: f"https://www.okx.com/trade-swap/{s.replace('/', '-').replace(':USDT', '').lower()}",
        "blacklist": ["BTC", "ETH"],
        "emoji": "üìä"
    },
    "gate": {
        "api": ccxt.gateio({"enableRateLimit": True}),
        "symbol_format": lambda s: f"{s}/USDT:USDT",
        "is_futures": lambda m: m.get('swap', False) and '_USDT' in m['id'],
        "taker_fee": 0.0006,
        "maker_fee": 0.0002,
        "url_format": lambda s: f"https://www.gate.io/futures_trade/{s.replace('/', '_').replace(':USDT', '')}",
        "blacklist": [],
        "emoji": "üìä"
    },
    "bitget": {
        "api": ccxt.bitget({"enableRateLimit": True}),
        "symbol_format": lambda s: f"{s}/USDT:USDT",
        "is_futures": lambda m: m.get('swap', False) and 'USDT' in m['id'],
        "taker_fee": 0.0006,
        "maker_fee": 0.0002,
        "url_format": lambda s: f"https://www.bitget.com/ru/futures/{s.replace('/', '').replace(':USDT', '')}",
        "blacklist": [],
        "emoji": "üìä"
    },
    "kucoin": {
        "api": ccxt.kucoin({"enableRateLimit": True}),
        "symbol_format": lambda s: f"{s}/USDT:USDT",
        "is_futures": lambda m: m.get('swap', False) and 'USDT' in m['id'],
        "taker_fee": 0.0006,
        "maker_fee": 0.0002,
        "url_format": lambda s: f"https://www.kucoin.com/futures/trade/{s.replace('/', '-').replace(':USDT', '')}",
        "blacklist": [],
        "emoji": "üìä"
    },
    "htx": {
        "api": ccxt.htx({
            "enableRateLimit": True,
            "options": {
                "defaultType": "swap",
                "fetchMarkets": ["swap"]
            }
        }),
        "symbol_format": lambda s: f"{s}/USDT:USDT",
        "is_futures": lambda m: m.get('swap', False) and m.get('linear', False),
        "taker_fee": 0.0006,
        "maker_fee": 0.0002,
        "url_format": lambda s: f"https://www.htx.com/futures/exchange/{s.split(':')[0].replace('/', '_').lower()}",
        "blacklist": [],
        "emoji": "üìä"
    },
    "bingx": {
        "api": ccxt.bingx({"enableRateLimit": True}),
        "symbol_format": lambda s: f"{s}/USDT:USDT",
        "is_futures": lambda m: m.get('swap', False) and 'USDT' in m['id'],
        "taker_fee": 0.0005,
        "maker_fee": 0.0002,
        "url_format": lambda s: f"https://bingx.com/en-us/futures/{s.replace('/', '')}",
        "blacklist": [],
        "emoji": "üìä"
    },
    "phemex": {
        "api": ccxt.phemex({
            "enableRateLimit": True,
            "options": {
                "defaultType": "swap",
            }
        }),
        "symbol_format": lambda s: f"{s}/USDT:USDT",
        "is_futures": lambda m: m.get('swap', False) and m['settle'] == 'USDT',
        "taker_fee": 0.0006,
        "maker_fee": 0.0002,
        "url_format": lambda s: f"https://phemex.com/futures/trade/{s.replace('/', '').replace(':USDT', '')}",
        "blacklist": [],
        "emoji": "üìä"
    },
    "coinex": {
        "api": ccxt.coinex({"enableRateLimit": True}),
        "symbol_format": lambda s: f"{s}/USDT:USDT",
        "is_futures": lambda m: (m.get('swap', False) or m.get('future', False)) and m['settle'] == 'USDT',
        "taker_fee": 0.001,
        "maker_fee": 0.001,
        "url_format": lambda s: f"https://www.coinex.com/perpetual/{s.replace('/', '-').replace(':USDT', '')}",
        "blacklist": [],
        "emoji": "üìä"
    },
    "blofin": {
        "api": ccxt.blofin({
            "enableRateLimit": True,
            "options": {
                "defaultType": "swap"
            }
        }),
        "symbol_format": lambda s: f"{s}/USDT:USDT",
        "is_futures": lambda m: (
                m.get('type') in ['swap', 'future'] and
                m.get('settle') == 'USDT' and
                m.get('linear', False)
        ),
        "taker_fee": 0.0006,
        "maker_fee": 0.0002,
        "url_format": lambda s: f"https://www.blofin.com/futures/{s.replace('/', '-').replace(':USDT', '')}",
        "blacklist": [],
        "emoji": "üìä"
    }
}


# Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    return ReplyKeyboardMarkup([
        [KeyboardButton("üìà –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∫–∏")], [KeyboardButton("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
        [KeyboardButton("üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞"), KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
    ], resize_keyboard=True)


def get_settings_keyboard():
    # –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
    return ReplyKeyboardMarkup([
        [KeyboardButton("üöÄÔ∏è –°–ø–æ—Ç"), KeyboardButton("üìä –§—å—é—á–µ—Ä—Å—ã"), KeyboardButton("‚ÜîÔ∏è –°–ø–æ—Ç-–§—å—é—á–µ—Ä—Å—ã")],
        [KeyboardButton("üî± –¢—Ä–µ—É–≥–æ–ª—å–Ω—ã–π"), KeyboardButton("üèõ –ë–∏—Ä–∂–∏"), KeyboardButton("üîÑ –°–±—Ä–æ—Å")], # <-- NEW
        [KeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ], resize_keyboard=True)


def get_spot_settings_keyboard():
    spot = SETTINGS['SPOT']
    return ReplyKeyboardMarkup([
        [KeyboardButton(f"–ü–æ—Ä–æ–≥: {spot['THRESHOLD_PERCENT']}%"),
         KeyboardButton(f"–ú–∞–∫—Å. –ø–æ—Ä–æ–≥: {spot['MAX_THRESHOLD_PERCENT']}%")],
        [KeyboardButton(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª: {spot['CHECK_INTERVAL']}—Å"),
         KeyboardButton(f"–û–±—ä–µ–º: ${spot['MIN_VOLUME_USD'] / 1000:.0f}K")],
        [KeyboardButton(f"–ú–∏–Ω. —Å—É–º–º–∞: ${spot['MIN_ENTRY_AMOUNT_USDT']}"),
         KeyboardButton(f"–ú–∞–∫—Å. —Å—É–º–º–∞: ${spot['MAX_ENTRY_AMOUNT_USDT']}")],
        [KeyboardButton(f"–í–ª–∏—è–Ω–∏–µ: {spot['MAX_IMPACT_PERCENT']}%"),
         KeyboardButton(f"–°—Ç–∞–∫–∞–Ω: {spot['ORDER_BOOK_DEPTH']}")],
        [KeyboardButton(f"–ü—Ä–∏–±—ã–ª—å: ${spot['MIN_NET_PROFIT_USD']}"),
         KeyboardButton(f"–°—Ç–∞—Ç—É—Å: {'–í–ö–õ' if spot['ENABLED'] else '–í–´–ö–õ'}")],
        [KeyboardButton(f"–°—Ö–æ–¥–∏–º–æ—Å—Ç—å: {spot['PRICE_CONVERGENCE_THRESHOLD']}%"),
         KeyboardButton(f"–£–≤–µ–¥. —Å—Ä–∞–≤–Ω.: {'üîî' if spot['PRICE_CONVERGENCE_ENABLED'] else 'üîï'}")],
        [KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")]
    ], resize_keyboard=True)


def get_futures_settings_keyboard():
    futures = SETTINGS['FUTURES']
    return ReplyKeyboardMarkup([
        [KeyboardButton(f"–ü–æ—Ä–æ–≥: {futures['THRESHOLD_PERCENT']}%"),
         KeyboardButton(f"–ú–∞–∫—Å. –ø–æ—Ä–æ–≥: {futures['MAX_THRESHOLD_PERCENT']}%")],
        [KeyboardButton(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª: {futures['CHECK_INTERVAL']}—Å"),
         KeyboardButton(f"–û–±—ä–µ–º: ${futures['MIN_VOLUME_USD'] / 1000:.0f}K")],
        [KeyboardButton(f"–ú–∏–Ω. —Å—É–º–º–∞: ${futures['MIN_ENTRY_AMOUNT_USDT']}"),
         KeyboardButton(f"–ú–∞–∫—Å. —Å—É–º–º–∞: ${futures['MAX_ENTRY_AMOUNT_USDT']}")],
        [KeyboardButton(f"–ü—Ä–∏–±—ã–ª—å: ${futures['MIN_NET_PROFIT_USD']}"),
         KeyboardButton(f"–°—Ç–∞—Ç—É—Å: {'–í–ö–õ' if futures['ENABLED'] else '–í–´–ö–õ'}")],
        [KeyboardButton(f"–°—Ö–æ–¥–∏–º–æ—Å—Ç—å: {futures['PRICE_CONVERGENCE_THRESHOLD']}%"),
         KeyboardButton(f"–£–≤–µ–¥. —Å—Ä–∞–≤–Ω.: {'üîî' if futures['PRICE_CONVERGENCE_ENABLED'] else 'üîï'}")],
        [KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")]
    ], resize_keyboard=True)


def get_spot_futures_settings_keyboard():
    spot_futures = SETTINGS['SPOT_FUTURES']
    return ReplyKeyboardMarkup([
        [KeyboardButton(f"–ü–æ—Ä–æ–≥: {spot_futures['THRESHOLD_PERCENT']}%"),
         KeyboardButton(f"–ú–∞–∫—Å. –ø–æ—Ä–æ–≥: {spot_futures['MAX_THRESHOLD_PERCENT']}%")],
        [KeyboardButton(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª: {spot_futures['CHECK_INTERVAL']}—Å"),
         KeyboardButton(f"–û–±—ä–µ–º: ${spot_futures['MIN_VOLUME_USD'] / 1000:.0f}K")],
        [KeyboardButton(f"–ú–∏–Ω. —Å—É–º–º–∞: ${spot_futures['MIN_ENTRY_AMOUNT_USDT']}"),
         KeyboardButton(f"–ú–∞–∫—Å. —Å—É–º–º–∞: ${spot_futures['MAX_ENTRY_AMOUNT_USDT']}")],
        [KeyboardButton(f"–ü—Ä–∏–±—ã–ª—å: ${spot_futures['MIN_NET_PROFIT_USD']}"),
         KeyboardButton(f"–°—Ç–∞—Ç—É—Å: {'–í–ö–õ' if spot_futures['ENABLED'] else '–í–´–ö–õ'}")],
        [KeyboardButton(f"–°—Ö–æ–¥–∏–º–æ—Å—Ç—å: {spot_futures['PRICE_CONVERGENCE_THRESHOLD']}%"),
         KeyboardButton(f"–£–≤–µ–¥. —Å—Ä–∞–≤–Ω.: {'üîî' if spot_futures['PRICE_CONVERGENCE_ENABLED'] else 'üîï'}")],
        [KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")]
    ], resize_keyboard=True)


# NEW: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
def get_triangular_settings_keyboard():
    triangular = SETTINGS['TRIANGULAR']
    return ReplyKeyboardMarkup([
        [KeyboardButton(f"–ü–æ—Ä–æ–≥: {triangular['THRESHOLD_PERCENT']}%"),
         KeyboardButton(f"–ú–∞–∫—Å. –ø–æ—Ä–æ–≥: {triangular['MAX_THRESHOLD_PERCENT']}%")],
        [KeyboardButton(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª: {triangular['CHECK_INTERVAL']}—Å"),
         KeyboardButton(f"–û–±—ä–µ–º: ${triangular['MIN_VOLUME_USD'] / 1000:.0f}K")],
        [KeyboardButton(f"–°—É–º–º–∞ –≤—Ö–æ–¥–∞: ${triangular['ENTRY_AMOUNT_USDT']}"),
         KeyboardButton(f"–ü—Ä–∏–±—ã–ª—å: ${triangular['MIN_NET_PROFIT_USD']}")],
        [KeyboardButton(f"–°—Ö–æ–¥–∏–º–æ—Å—Ç—å: {triangular['CONVERGENCE_THRESHOLD']}%"),
         KeyboardButton(f"–£–≤–µ–¥. —Å—Ä–∞–≤–Ω.: {'üîî' if triangular['PRICE_CONVERGENCE_ENABLED'] else 'üîï'}")],
        [KeyboardButton(f"–°—Ç–∞—Ç—É—Å: {'–í–ö–õ' if triangular['ENABLED'] else '–í–´–ö–õ'}")],
        [KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")]
    ], resize_keyboard=True)
# –ö–æ–Ω–µ—Ü NEW


def get_exchange_settings_keyboard():
    keyboard = []
    row = []
    for i, (exchange, config) in enumerate(SETTINGS['EXCHANGES'].items()):
        status = "‚úÖ" if config['ENABLED'] else "‚ùå"
        row.append(KeyboardButton(f"{exchange}: {status}"))
        if (i + 1) % 2 == 0:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    keyboard.append([KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


async def send_telegram_message(message: str, chat_id: str = None, reply_markup: ReplyKeyboardMarkup = None):
    global SHARED_BOT
    if not SHARED_BOT:
        SHARED_BOT = Bot(token=TELEGRAM_TOKEN)

    targets = [chat_id] if chat_id else TELEGRAM_CHAT_IDS

    for target_id in targets:
        try:
            await SHARED_BOT.send_message(
                chat_id=target_id,
                text=message,
                parse_mode="HTML",
                disable_web_page_preview=True,
                reply_markup=reply_markup
            )
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {target_id}")
        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ {target_id}: {e}")


def format_duration(seconds):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    if seconds < 60:
        return f"{int(seconds)} —Å–µ–∫"
    elif seconds < 3600:
        minutes = int(seconds // 60)
        seconds_remaining = int(seconds % 60)
        return f"{minutes} –º–∏–Ω {seconds_remaining} —Å–µ–∫"
    else:
        hours = int(seconds // 3600)
        minutes = int((seconds % 3600) // 60)
        return f"{hours} —á {minutes} –º–∏–Ω"


def add_opportunity_to_sent(arb_type: str, base: str, exchange1: str, exchange2: str, spread: float,
                            price1: float, price2: float, volume1: float = None, volume2: float = None,
                            min_entry_amount: float = None, max_entry_amount: float = None,
                            profit_min: dict = None, profit_max: dict = None):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–≤—è–∑–∫—É –≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"""
    # –î–ª—è TRIANGULAR arbitrage –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á, base –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–µ
    if arb_type == 'TRIANGULAR':
        key = f"{arb_type}_{exchange1}_{base}" # base —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç coin1_coin2_coin3_path
    else:
        key = f"{arb_type}_{base}_{exchange1}_{exchange2}"
    
    current_time = time.time()

    sent_arbitrage_opportunities[key] = {
        'arb_type': arb_type,
        'base': base, # –î–ª—è TRIANGULAR: COIN_A_COIN_B_COIN_C_PATH
        'exchange1': exchange1,
        'exchange2': exchange2 if exchange2 != exchange1 else None, # –î–ª—è TRIANGULAR exchange2 = None –∏–ª–∏ —Ç–∞ –∂–µ –±–∏—Ä–∂–∞
        'spread': spread,
        'price1': price1,
        'price2': price2,
        'volume1': volume1,
        'volume2': volume2,
        'min_entry_amount': min_entry_amount,
        'max_entry_amount': max_entry_amount,
        'profit_min': profit_min,
        'profit_max': profit_max,
        'start_time': current_time,
        'last_updated': current_time
    }

    # –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ current_arbitrage_opportunities –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å–≤—è–∑–∫–∞—Ö
    current_arbitrage_opportunities[key] = sent_arbitrage_opportunities[key].copy()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —ç—Ç–æ–π —Å–≤—è–∑–∫–∏
    arbitrage_start_times[key] = current_time
    previous_arbitrage_opportunities[key] = True

    logger.info(f"–°–≤—è–∑–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ: {key}")


async def send_price_convergence_notification(arb_type: str, base: str, exchange1: str, exchange2: str,
                                              price1: float, price2: float, spread: float, volume1: float = None,
                                              volume2: float = None, duration: float = None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ —Ü–µ–Ω —Å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –∏ —É–¥–∞–ª—è–µ—Ç —Å–≤—è–∑–∫—É –∏–∑ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö"""

    # NEW: –û–±—Ä–∞–±–æ—Ç–∫–∞ TRIANGULAR arbitrage
    if arb_type == 'TRIANGULAR':
        convergence_threshold = SETTINGS['TRIANGULAR']['CONVERGENCE_THRESHOLD']
        # –ö–ª—é—á –¥–ª—è TRIANGULAR: TRIANGULAR_exchange_base
        key = f"{arb_type}_{exchange1}_{base}"
        # –í TRIANGULAR spread - —ç—Ç–æ —á–∏—Å—Ç—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π –¥–æ—Ö–æ–¥
        if abs(spread) > convergence_threshold:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —ç—Ç–∞ —Å–≤—è–∑–∫–∞ —Ä–∞–Ω–µ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é
        if key not in sent_arbitrage_opportunities:
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π —Å–≤—è–∑–∫–∏
        current_time = time.time()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (5 –º–∏–Ω—É—Ç)
        if (key in last_convergence_notification and current_time - last_convergence_notification[key] < 300):
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        last_convergence_notification[key] = current_time

        exchange_id = exchange1
        
        # –ü–∞—Ä—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–µ: BASE_COIN1_COIN2_COIN3_PATH
        parts = base.split('_')
        coin_path = " ‚Üí ".join(parts[:-1]) + f" ‚Üí {parts[0]}"
        path_name = parts[-1]
        
        arb_type_name = "–¢—Ä–µ—É–≥–æ–ª—å–Ω—ã–π"
        emoji = "üî±"

        utc_plus_3 = timezone(timedelta(hours=3))
        current_time_str = datetime.now(utc_plus_3).strftime('%H:%M:%S')

        duration_str = format_duration(duration) if duration is not None else "N/A"

        # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = (
            f"üéØ <b>–¶–ï–ù–´ –°–†–ê–í–ù–ò–õ–ò–°–¨!</b> {emoji}\n\n"
            f"‚ñ´Ô∏è <b>–¢–∏–ø:</b> {arb_type_name} –∞—Ä–±–∏—Ç—Ä–∞–∂\n"
            f"‚ñ´Ô∏è <b>–ë–∏—Ä–∂–∞:</b> <code>{exchange_id.upper()}</code>\n"
            f"‚ñ´Ô∏è <b>–ü—É—Ç—å:</b> <code>{coin_path}</code>\n"
            f"‚ñ´Ô∏è <b>–î–æ—Ö–æ–¥:</b> <code>{spread:.2f}%</code>\n"
            f"‚ñ´Ô∏è <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—Ä–±–∏—Ç—Ä–∞–∂–∞:</b> {duration_str}\n\n"
            f"üîî <i>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ü–µ–Ω</i>"
        )
        
        await send_telegram_message(message)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ü–µ–Ω –¥–ª—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ {base} –Ω–∞ {exchange_id}: {spread:.4f}%, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_str}")

        # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∫—É –∏–∑ –≤—Å–µ—Ö —Å–ª–æ–≤–∞—Ä–µ–π, —á—Ç–æ–±—ã –æ–Ω–∞ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–ª–∞—Å—å –≤ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö
        if key in sent_arbitrage_opportunities:
            del sent_arbitrage_opportunities[key]
        if key in current_arbitrage_opportunities:
            del current_arbitrage_opportunities[key]
        if key in arbitrage_start_times:
            del arbitrage_start_times[key]
        if key in previous_arbitrage_opportunities:
            del previous_arbitrage_opportunities[key]
            
        logger.info(f"–°–≤—è–∑–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –ø–æ—Å–ª–µ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ü–µ–Ω: {key}")
        return # –í—ã—Ö–æ–¥ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
    # –ö–æ–Ω–µ—Ü NEW
    
    # ... (–û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –¥–ª—è SPOT/FUTURES/SPOT_FUTURES –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    # (–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è SPOT/FUTURES/SPOT_FUTURES)
    if not SETTINGS[arb_type]['PRICE_CONVERGENCE_ENABLED']:
        return

    convergence_threshold = SETTINGS[arb_type]['PRICE_CONVERGENCE_THRESHOLD']

    if abs(spread) > convergence_threshold:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —ç—Ç–∞ —Å–≤—è–∑–∫–∞ —Ä–∞–Ω–µ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é
    previous_key = f"{arb_type}_{base}_{exchange1}_{exchange2}"
    if previous_key not in sent_arbitrage_opportunities:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π —Å–≤—è–∑–∫–∏
    current_time = time.time()
    notification_key = f"{arb_type}_{base}_{exchange1}_{exchange2}"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (5 –º–∏–Ω—É—Ç)
    if (notification_key in last_convergence_notification and
            current_time - last_convergence_notification[notification_key] < 300):
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    last_convergence_notification[notification_key] = current_time

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
    if arb_type == 'SPOT':
        arb_type_name = "–°–ø–æ—Ç–æ–≤—ã–π"
        emoji = "üöÄ"
    elif arb_type == 'FUTURES':
        arb_type_name = "–§—å—é—á–µ—Ä—Å–Ω—ã–π"
        emoji = "üìä"
    else:
        arb_type_name = "–°–ø–æ—Ç-–§—å—é—á–µ—Ä—Å–Ω—ã–π"
        emoji = "‚ÜîÔ∏è"

    utc_plus_3 = timezone(timedelta(hours=3))
    current_time_str = datetime.now(utc_plus_3).strftime('%H:%M:%S')

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–º—ã
    def format_volume(vol):
        if vol is None:
            return "N/A"
        if vol >= 1_000_000:
            return f"${vol / 1_000_000:.1f}M"
        if vol >= 1_000:
            return f"${vol / 1_000:.1f}K"
        return f"${vol:.1f}"

    volume1_str = format_volume(volume1)
    volume2_str = format_volume(volume2)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    duration_str = format_duration(duration) if duration is not None else "N/A"

    # –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è –±–∏—Ä–∂
    if arb_type == 'SPOT':
        exchange1_config = SPOT_EXCHANGES[exchange1]
        exchange2_config = SPOT_EXCHANGES[exchange2]
        symbol1 = exchange1_config["symbol_format"](base)
        symbol2 = exchange2_config["symbol_format"](base)
        url1 = exchange1_config["url_format"](symbol1)
        url2 = exchange2_config["url_format"](symbol2)
    else:
        exchange1_config = FUTURES_EXCHANGES[exchange1]
        exchange2_config = FUTURES_EXCHANGES[exchange2]
        symbol1 = exchange1_config["symbol_format"](base)
        symbol2 = exchange2_config["symbol_format"](base)
        url1 = exchange1_config["url_format"](symbol1.replace(':USDT', ''))
        url2 = exchange2_config["url_format"](symbol2.replace(':USDT', ''))

    safe_base = html.escape(base)

    # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    message = (
        f"üéØ <b>–¶–ï–ù–´ –°–†–ê–í–ù–ò–õ–ò–°–¨!</b> {emoji}\n\n"
        f"‚ñ´Ô∏è <b>–¢–∏–ø:</b> {arb_type_name} –∞—Ä–±–∏—Ç—Ä–∞–∂\n"
        f"‚ñ´Ô∏è <b>–ú–æ–Ω–µ—Ç–∞:</b> <code>{safe_base}</code>\n"
        f"‚ñ´Ô∏è <b>–†–∞–∑–Ω–∏—Ü–∞ —Ü–µ–Ω:</b> <code>{spread:.2f}%</code>\n"
        f"‚ñ´Ô∏è <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—Ä–±–∏—Ç—Ä–∞–∂–∞:</b> {duration_str}\n\n"

        f"üü¢ <b><a href='{url1}'>{exchange1.upper()}</a>:</b>\n"
        f"   üí∞ –¶–µ–Ω–∞: <code>${price1:.8f}</code>\n"
        f"   üìä –û–±—ä–µ–º: {volume1_str}\n\n"

        f"üîµ <b><a href='{url2}'>{exchange2.upper()}</a>:</b>\n"
        f"   üí∞ –¶–µ–Ω–∞: <code>${price2:.8f}</code>\n"
        f"   üìä –û–±—ä–µ–º: {volume2_str}\n\n"

        f"‚è∞ <i>{current_time_str}</i>\n"
        f"üîî <i>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ü–µ–Ω</i>"
    )

    await send_telegram_message(message)
    logger.info(
        f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ü–µ–Ω –¥–ª—è {base} ({arb_type}): {spread:.4f}%, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_str}")

    # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∫—É –∏–∑ –≤—Å–µ—Ö —Å–ª–æ–≤–∞—Ä–µ–π, —á—Ç–æ–±—ã –æ–Ω–∞ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–ª–∞—Å—å –≤ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö
    key = f"{arb_type}_{base}_{exchange1}_{exchange2}"
    if key in sent_arbitrage_opportunities:
        del sent_arbitrage_opportunities[key]
    if key in current_arbitrage_opportunities:
        del current_arbitrage_opportunities[key]
    if key in arbitrage_start_times:
        del arbitrage_start_times[key]
    if key in previous_arbitrage_opportunities:
        del previous_arbitrage_opportunities[key]

    logger.info(f"–°–≤—è–∑–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –ø–æ—Å–ª–µ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ü–µ–Ω: {key}")


def update_arbitrage_duration(arb_type: str, base: str, exchange1: str, exchange2: str, spread: float):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"""
    
    if arb_type == 'TRIANGULAR':
        key = f"{arb_type}_{exchange1}_{base}"
        threshold = SETTINGS[arb_type]['THRESHOLD_PERCENT']
        max_threshold = SETTINGS[arb_type]['MAX_THRESHOLD_PERCENT']
        convergence_threshold = SETTINGS[arb_type]['CONVERGENCE_THRESHOLD']
    else:
        key = f"{arb_type}_{base}_{exchange1}_{exchange2}"
        threshold = SETTINGS[arb_type]['THRESHOLD_PERCENT']
        max_threshold = SETTINGS[arb_type]['MAX_THRESHOLD_PERCENT']
        convergence_threshold = SETTINGS[arb_type]['PRICE_CONVERGENCE_THRESHOLD']
        
    current_time = time.time()

    # –ï—Å–ª–∏ —Å–≤—è–∑–∫–∞ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram –∏ —Å–ø—Ä–µ–¥ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ø–æ—Ä–æ–≥ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ - –Ω–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å—á–µ—Ç
    if (key in sent_arbitrage_opportunities and
            threshold <= spread <= max_threshold and
            key not in arbitrage_start_times):
        arbitrage_start_times[key] = current_time
        previous_arbitrage_opportunities[key] = True
        logger.debug(f"–ù–∞—á–∞–ª–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –¥–ª—è {key}")

    # –ï—Å–ª–∏ —Å–ø—Ä–µ–¥ —É–ø–∞–ª –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏ - –≤—ã—á–∏—Å–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –æ—á–∏—â–∞–µ–º
    elif (spread <= convergence_threshold and key in arbitrage_start_times):
        start_time = arbitrage_start_times.pop(key)
        duration = current_time - start_time
        logger.debug(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –¥–ª—è {key}, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration:.0f} —Å–µ–∫")
        return duration

    return None


def update_current_arbitrage_opportunities(arb_type: str, base: str, exchange1: str, exchange2: str, spread: float,
                                           price1: float, price2: float, volume1: float = None, volume2: float = None,
                                           min_entry_amount: float = None, max_entry_amount: float = None,
                                           profit_min: dict = None, profit_max: dict = None):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–≤—è–∑–æ–∫)"""
    if arb_type == 'TRIANGULAR':
        key = f"{arb_type}_{exchange1}_{base}"
        exchange2 = None # –î–ª—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ –Ω–µ –Ω—É–∂–µ–Ω
        max_entry_amount = None # –î–ª—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ –æ–¥–Ω–∞ —Å—É–º–º–∞
    else:
        key = f"{arb_type}_{base}_{exchange1}_{exchange2}"
        
    current_time = time.time()

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–≤—è–∑–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram
    if key in sent_arbitrage_opportunities:
        current_arbitrage_opportunities[key] = {
            'arb_type': arb_type,
            'base': base,
            'exchange1': exchange1,
            'exchange2': exchange2,
            'spread': spread,
            'price1': price1,
            'price2': price2,
            'volume1': volume1,
            'volume2': volume2,
            'min_entry_amount': min_entry_amount,
            'max_entry_amount': max_entry_amount,
            'profit_min': profit_min,
            'profit_max': profit_max,
            'start_time': sent_arbitrage_opportunities[key]['start_time'],
            'last_updated': current_time
        }


async def get_current_arbitrage_opportunities():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ (—Ç–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –≤ Telegram)"""

    # –û—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
    cleanup_old_opportunities()

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–≤—è–∑–∫–∏
    filtered_opportunities = {}
    current_time = time.time()

    for key, opportunity in sent_arbitrage_opportunities.items():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–≤—è–∑–∫–∞ –Ω–µ —É—Å—Ç–∞—Ä–µ–ª–∞
        if (current_time - opportunity['last_updated']) <= 3600:
            filtered_opportunities[key] = opportunity

    if not filtered_opportunities:
        return "üìä <b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ —Å–≤—è–∑–∫–∏</b>\n\n" \
               "‚è≥ –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ."

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø—É –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
    spot_opportunities = []
    futures_opportunities = []
    spot_futures_opportunities = []
    triangular_opportunities = [] # <-- NEW

    for key, opportunity in filtered_opportunities.items():
        arb_type = opportunity['arb_type']
        duration = time.time() - opportunity['start_time']

        opportunity_info = {
            'base': opportunity['base'],
            'exchange1': opportunity['exchange1'],
            'exchange2': opportunity.get('exchange2'),
            'spread': opportunity['spread'],
            'price1': opportunity['price1'],
            'price2': opportunity['price2'],
            'min_entry_amount': opportunity.get('min_entry_amount'),
            'max_entry_amount': opportunity.get('max_entry_amount'),
            'profit_min': opportunity.get('profit_min'),
            'profit_max': opportunity.get('profit_max'),
            'duration': duration
        }

        if arb_type == 'SPOT':
            spot_opportunities.append(opportunity_info)
        elif arb_type == 'FUTURES':
            futures_opportunities.append(opportunity_info)
        elif arb_type == 'SPOT_FUTURES':
            spot_futures_opportunities.append(opportunity_info)
        elif arb_type == 'TRIANGULAR': # <-- NEW
            triangular_opportunities.append(opportunity_info)

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–ø—Ä–µ–¥—É (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
    spot_opportunities.sort(key=lambda x: x['spread'], reverse=True)
    futures_opportunities.sort(key=lambda x: x['spread'], reverse=True)
    spot_futures_opportunities.sort(key=lambda x: x['spread'], reverse=True)
    triangular_opportunities.sort(key=lambda x: x['spread'], reverse=True) # <-- NEW

    utc_plus_3 = timezone(timedelta(hours=3))
    current_time_str = datetime.now(utc_plus_3).strftime('%H:%M:%S')
    message = "üìä <b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ —Å–≤—è–∑–∫–∏</b>\n\n"

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–æ—Ç–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
    if spot_opportunities:
        message += "üöÄ <b>–°–ø–æ—Ç–æ–≤—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂:</b>\n"
        for opp in spot_opportunities:
            duration_str = format_duration(opp['duration'])
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –≤—Ö–æ–¥–∞ –∏ –ø—Ä–∏–±—ã–ª—å
            entry_amount_str = f"${opp['min_entry_amount']:.2f}-${opp['max_entry_amount']:.2f}" if opp.get(
                'min_entry_amount') and opp.get('max_entry_amount') else "N/A"
            profit_str = "N/A"
            if opp.get('profit_min') and opp.get('profit_max'):
                profit_min_net = opp['profit_min'].get('net', 0)
                profit_max_net = opp['profit_max'].get('net', 0)
                profit_str = f"${profit_min_net:.2f}-${profit_max_net:.2f}"
            message += (
                f" ‚ñ´Ô∏è <code>{opp['base']}</code>: {opp['spread']:.2f}%\n"
                f" üü¢ {opp['exchange1'].upper()} ‚Üí üî¥ {opp['exchange2'].upper()}\n"
                f" üí∞ –°—É–º–º–∞ –≤—Ö–æ–¥–∞: {entry_amount_str}\n"
                f" üíµ –ü—Ä–∏–±—ã–ª—å: {profit_str}\n"
                f" ‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_str}\n\n"
            )

    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ—å—é—á–µ—Ä—Å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
    if futures_opportunities:
        message += "üìä <b>–§—å—é—á–µ—Ä—Å–Ω—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂:</b>\n"
        for opp in futures_opportunities:
            duration_str = format_duration(opp['duration'])
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –≤—Ö–æ–¥–∞ –∏ –ø—Ä–∏–±—ã–ª—å
            entry_amount_str = f"${opp['min_entry_amount']:.2f}-${opp['max_entry_amount']:.2f}" if opp.get(
                'min_entry_amount') and opp.get('max_entry_amount') else "N/A"
            profit_str = "N/A"
            if opp.get('profit_min') and opp.get('profit_max'):
                profit_min_net = opp['profit_min'].get('net', 0)
                profit_max_net = opp['profit_max'].get('net', 0)
                profit_str = f"${profit_min_net:.2f}-${profit_max_net:.2f}"
            message += (
                f" ‚ñ´Ô∏è <code>{opp['base']}</code>: {opp['spread']:.2f}%\n"
                f" üü¢ {opp['exchange1'].upper()} ‚Üí üî¥ {opp['exchange2'].upper()}\n"
                f" üí∞ –°—É–º–º–∞ –≤—Ö–æ–¥–∞: {entry_amount_str}\n"
                f" üíµ –ü—Ä–∏–±—ã–ª—å: {profit_str}\n"
                f" ‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_str}\n\n"
            )

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–æ—Ç-—Ñ—å—é—á–µ—Ä—Å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
    if spot_futures_opportunities:
        message += "‚ÜîÔ∏è <b>–°–ø–æ—Ç-–§—å—é—á–µ—Ä—Å–Ω—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂:</b>\n"
        for opp in spot_futures_opportunities:
            duration_str = format_duration(opp['duration'])
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –≤—Ö–æ–¥–∞ –∏ –ø—Ä–∏–±—ã–ª—å
            entry_amount_str = f"${opp['min_entry_amount']:.2f}-${opp['max_entry_amount']:.2f}" if opp.get(
                'min_entry_amount') and opp.get('max_entry_amount') else "N/A"
            profit_str = "N/A"
            if opp.get('profit_min') and opp.get('profit_max'):
                profit_min_net = opp['profit_min'].get('net', 0)
                profit_max_net = opp['profit_max'].get('net', 0)
                profit_str = f"${profit_min_net:.2f}-${profit_max_net:.2f}"
            message += (
                f" ‚ñ´Ô∏è <code>{opp['base']}</code>: {opp['spread']:.2f}%\n"
                f" üü¢ {opp['exchange1'].upper()} (—Å–ø–æ—Ç) ‚Üí üî¥ {opp['exchange2'].upper()} (—Ñ—å—é—á–µ—Ä—Å—ã)\n"
                f" üí∞ –°—É–º–º–∞ –≤—Ö–æ–¥–∞: {entry_amount_str}\n"
                f" üíµ –ü—Ä–∏–±—ã–ª—å: {profit_str}\n"
                f" ‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_str}\n\n"
            )
            
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ—É–≥–æ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ <-- NEW
    if triangular_opportunities:
        message += "üî± <b>–í–Ω—É—Ç—Ä–∏–±–∏—Ä–∂–µ–≤–æ–π (–¢—Ä–µ—É–≥–æ–ª—å–Ω—ã–π) –∞—Ä–±–∏—Ç—Ä–∞–∂:</b>\n"
        for opp in triangular_opportunities:
            duration_str = format_duration(opp['duration'])
            
            # base: COIN_A_COIN_B_COIN_C_PATH, –≥–¥–µ COIN_A - —Å—Ç–∞—Ä—Ç–æ–≤–∞—è
            parts = opp['base'].split('_')
            
            # –ü—É—Ç—å: COIN_A ‚Üí COIN_B ‚Üí COIN_C ‚Üí COIN_A
            coin_path = " ‚Üí ".join(parts[:-1]) + f" ‚Üí {parts[0]}"
            
            # –î–ª—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ profit_max/min - —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ profit
            profit_net = opp['profit_max'].get('net', 0)
            profit_str = f"${profit_net:.2f}"
            entry_amount_str = f"${opp['min_entry_amount']:.2f}"

            message += (
                f" ‚ñ´Ô∏è <code>{opp['exchange1'].upper()}</code>: {opp['spread']:.2f}%\n"
                f" üîÑ –ü—É—Ç—å: {coin_path}\n"
                f" üí∞ –°—É–º–º–∞ –≤—Ö–æ–¥–∞: {entry_amount_str}\n"
                f" üíµ –ü—Ä–∏–±—ã–ª—å: {profit_str}\n"
                f" ‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_str}\n\n"
            )
    # –ö–æ–Ω–µ—Ü NEW

    message += f"‚è∞ <i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {current_time_str}</i>\n"
    message += f"üìà <i>–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–≤—è–∑–æ–∫: {len(filtered_opportunities)}</i>"
    return message


def cleanup_old_opportunities():
    """–û—á–∏—â–∞–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ (—Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞)"""
    current_time = time.time()
    keys_to_remove = []
    for key, opportunity in sent_arbitrage_opportunities.items():
        # –£–¥–∞–ª—è–µ–º –µ—Å–ª–∏ —Å–≤—è–∑–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞ (—Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞)
        if current_time - opportunity['last_updated'] > 3600:
            keys_to_remove.append(key)

    for key in keys_to_remove:
        del sent_arbitrage_opportunities[key]
        if key in current_arbitrage_opportunities:
            del current_arbitrage_opportunities[key]
        if key in arbitrage_start_times:
            del arbitrage_start_times[key]
        if key in previous_arbitrage_opportunities:
            del previous_arbitrage_opportunities[key]


# NEW: –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
def find_triangular_pairs(exchange_id: str, markets: dict):
    """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ç—Ä–µ—É–≥–æ–ª—å–Ω—ã–µ —Å–≤—è–∑–∫–∏ A/B, B/C, A/C —Å —É—á–∞—Å—Ç–∏–µ–º USDT (C='USDT')."""
    
    triangles = []
    # –§–∏–ª—å—Ç—Ä—É–µ–º –≤—Å–µ –ø–∞—Ä—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —É—á–∞—Å—Ç–≤—É–µ—Ç USDT
    usdt_pairs = {
        (market['base'], market['quote'], symbol): market
        for symbol, market in markets.items()
        if market.get('spot') and market['quote'] == 'USDT'
    }
    
    # –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö BASE-–º–æ–Ω–µ—Ç, —Ç–æ—Ä–≥—É—é—â–∏—Ö—Å—è –∫ USDT
    base_coins = sorted(list(set(base for base, quote, symbol in usdt_pairs.keys())))
    
    logger.debug(f"–ù–∞–π–¥–µ–Ω–æ {len(base_coins)} –º–æ–Ω–µ—Ç –¥–ª—è {exchange_id} –¥–ª—è USDT-—Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤.")

    for i in range(len(base_coins)):
        coin_a = base_coins[i]
        for j in range(i + 1, len(base_coins)):
            coin_b = base_coins[j]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–≤—É—Ö —Å—Ç–æ—Ä–æ–Ω —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ –∫ USDT: A/USDT –∏ B/USDT
            pair_a_usdt = f"{coin_a}/USDT"
            pair_b_usdt = f"{coin_b}/USDT"

            if pair_a_usdt in markets and pair_b_usdt in markets:
                # –ò—â–µ–º —Ç—Ä–µ—Ç—å—é —Å—Ç–æ—Ä–æ–Ω—É: A/B –∏–ª–∏ B/A
                pair_a_b = f"{coin_a}/{coin_b}"
                pair_b_a = f"{coin_b}/{coin_a}"

                if pair_a_b in markets:
                    # –¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫: (A/USDT, B/USDT, A/B)
                    triangles.append({
                        "exchange": exchange_id,
                        "coin_a": coin_a,
                        "coin_b": coin_b,
                        "coin_c": "USDT",
                        "pair_ab": pair_a_b,
                        "pair_ac": pair_a_usdt,
                        "pair_bc": pair_b_usdt,
                    })
                
                if pair_b_a in markets:
                    # –¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫: (A/USDT, B/USDT, B/A) (–æ–±—Ä–∞—Ç–Ω–∞—è –ø–∞—Ä–∞)
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ –∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–Ω–µ—Ç, –Ω–æ —Å –¥—Ä—É–≥–æ–π –ø–∞—Ä–æ–π A/B
                    triangles.append({
                        "exchange": exchange_id,
                        "coin_a": coin_a,
                        "coin_b": coin_b,
                        "coin_c": "USDT",
                        "pair_ab": pair_b_a, # –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –ø–∞—Ä–∞ - B/A
                        "pair_ac": pair_a_usdt,
                        "pair_bc": pair_b_usdt,
                    })

    logger.debug(f"–ù–∞–π–¥–µ–Ω–æ {len(triangles)} —Ç—Ä–µ—É–≥–æ–ª—å–Ω—ã—Ö —Å–≤—è–∑–æ–∫ –Ω–∞ {exchange_id}")
    return triangles


async def calculate_triangular_profit(exchange_id: str, exchange_config: dict, triangle: dict):
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏–±—ã–ª—å –¥–ª—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–æ–π —Å–≤—è–∑–∫–∏.
    –ù–∞—á–∏–Ω–∞–µ–º —Å USDT.
    """
    
    taker_fee = exchange_config.get("taker_fee", 0.001)
    fee_multiplier = 1 - taker_fee
    
    # 1. –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–∫–∞–Ω—ã –¥–ª—è –≤—Å–µ—Ö —Ç—Ä–µ—Ö –ø–∞—Ä
    pairs_to_fetch = [triangle["pair_ac"], triangle["pair_bc"], triangle["pair_ab"]]
    orderbooks = {}
    try:
        results = await asyncio.gather(*(
            exchange_config['api'].fetch_order_book(pair) 
            for pair in pairs_to_fetch
        ))
        for i, pair in enumerate(pairs_to_fetch):
            orderbooks[pair] = results[i]
            
    except ccxt.ExchangeError as e:
        logger.warning(f"–û—à–∏–±–∫–∞ CCXT –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞–∫–∞–Ω–æ–≤ –Ω–∞ {exchange_id} –¥–ª—è {pairs_to_fetch}: {e}")
        return None, None
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞–∫–∞–Ω–æ–≤ –Ω–∞ {exchange_id}: {e}")
        return None, None

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å—Ç–∞–∫–∞–Ω—ã –Ω–µ –ø—É—Å—Ç—ã–µ
    for pair in pairs_to_fetch:
        ob = orderbooks.get(pair)
        if not ob or not ob['bids'] or not ob['asks']:
            logger.debug(f"–ü—É—Å—Ç–æ–π —Å—Ç–∞–∫–∞–Ω –¥–ª—è {pair} –Ω–∞ {exchange_id}")
            return None, None

    # –ü–æ–ª—É—á–∞–µ–º –ª—É—á—à–∏–µ —Ü–µ–Ω—ã
    best_prices = {
        pair: {
            'bid': orderbooks[pair]['bids'][0][0], # –õ—É—á—à–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ (–∑–∞ —á—Ç–æ –º–æ–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å)
            'ask': orderbooks[pair]['asks'][0][0]  # –õ—É—á—à–∞—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ (–∑–∞ —á—Ç–æ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å)
        }
        for pair in pairs_to_fetch
    }
    
    # –ü–æ–ª—É—á–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –≤ USDT
    min_volume_usd = SETTINGS['TRIANGULAR']['MIN_VOLUME_USD']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ä–µ–º—ã. –ù–∞–º –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±—ä–µ–º USDT –Ω–∞ T1 –∏ T3.
    # –ü–æ—Å–∫–æ–ª—å–∫—É T2 - —ç—Ç–æ –æ–±—ã—á–Ω–æ –Ω–µ-USDT –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTC/ETH), –µ–µ –æ–±—ä–µ–º
    # —Å–ª–æ–∂–Ω–µ–µ –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ USDT, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ USDT-–ø–∞—Ä—ã.
    
    # T1 –∏ T3 - –ø–∞—Ä—ã –∫ USDT (pair_ac, pair_bc).
    # pair_ac: Coin_A/USDT; pair_bc: Coin_B/USDT
    volume_ac = orderbooks[triangle['pair_ac']]['bids'][0][1] * best_prices[triangle['pair_ac']]['bids'][0]
    volume_bc = orderbooks[triangle['pair_bc']]['bids'][0][1] * best_prices[triangle['pair_bc']]['bids'][0]
    
    if volume_ac < min_volume_usd or volume_bc < min_volume_usd:
        return None, None


    # –ù–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ (–≤ USDT)
    start_amount_usdt = SETTINGS['TRIANGULAR']['ENTRY_AMOUNT_USDT']
    
    profit_results = {}
    
    # --- –ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï 1: USDT ‚Üí A ‚Üí B ‚Üí USDT ---
    # Coin_C (USDT) ‚Üí Coin_A ‚Üí Coin_B ‚Üí Coin_C (USDT)
    
    # T1: –ö—É–ø–∏—Ç—å A –∑–∞ USDT (Coin_A/USDT, –∏—Å–ø–æ–ª—å–∑—É–µ–º ASK)
    try:
        price_t1 = best_prices[triangle['pair_ac']]['ask']
        amount_a = (start_amount_usdt / price_t1) * fee_multiplier
    
        # T2: –ü—Ä–æ–¥–∞—Ç—å A –∑–∞ B (Coin_B/Coin_A –∏–ª–∏ Coin_A/Coin_B)
        pair_ab_is_direct = triangle['pair_ab'] == f"{triangle['coin_a']}/{triangle['coin_b']}"
        
        if pair_ab_is_direct:
            # Pair: A/B, Sell A for B (–∏—Å–ø–æ–ª—å–∑—É–µ–º BID)
            price_t2 = best_prices[triangle['pair_ab']]['bid']
            amount_b = amount_a * price_t2 * fee_multiplier
            path_coins = [triangle['coin_c'], triangle['coin_a'], triangle['coin_b'], triangle['coin_c']]
            path_pairs = [triangle['pair_ac'], triangle['pair_ab'], triangle['pair_bc']]
        else: 
            # Pair: B/A, Buy B with A (–∏—Å–ø–æ–ª—å–∑—É–µ–º ASK)
            price_t2 = best_prices[triangle['pair_ab']]['ask'] # B/A. A - quote. Amount_B = Amount_A / Price_B/A
            amount_b = (amount_a / price_t2) * fee_multiplier
            path_coins = [triangle['coin_c'], triangle['coin_a'], triangle['coin_b'], triangle['coin_c']]
            path_pairs = [triangle['pair_ac'], triangle['pair_ab'], triangle['pair_bc']]
            
        # T3: –ü—Ä–æ–¥–∞—Ç—å B –∑–∞ USDT (Coin_B/USDT, –∏—Å–ø–æ–ª—å–∑—É–µ–º BID)
        price_t3 = best_prices[triangle['pair_bc']]['bid']
        final_usdt = amount_b * price_t3 * fee_multiplier
        
        profit_percent = (final_usdt / start_amount_usdt - 1) * 100
        net_profit_usd = final_usdt - start_amount_usdt
        
        path_name = f"{path_coins[0]}_{path_coins[1]}_{path_coins[2]}_FORWARD"
        
        profit_results[path_name] = {
            "percent": profit_percent,
            "net": net_profit_usd,
            "final_usdt": final_usdt,
            "path_coins": path_coins,
            "path_pairs": path_pairs
        }
    except Exception as e:
        logger.debug(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø—É—Ç–∏ 1 ({exchange_id}): {e}")


    # --- –ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï 2: USDT ‚Üí B ‚Üí A ‚Üí USDT ---
    # Coin_C (USDT) ‚Üí Coin_B ‚Üí Coin_A ‚Üí Coin_C (USDT)

    # T1: –ö—É–ø–∏—Ç—å B –∑–∞ USDT (Coin_B/USDT, –∏—Å–ø–æ–ª—å–∑—É–µ–º ASK)
    try:
        price_t1_r = best_prices[triangle['pair_bc']]['ask']
        amount_b_r = (start_amount_usdt / price_t1_r) * fee_multiplier

        # T2: –ü—Ä–æ–¥–∞—Ç—å B –∑–∞ A (Coin_A/Coin_B –∏–ª–∏ Coin_B/Coin_A)
        pair_ab_is_direct = triangle['pair_ab'] == f"{triangle['coin_a']}/{triangle['coin_b']}"
        
        if pair_ab_is_direct:
            # Pair: A/B. Buy A with B (–∏—Å–ø–æ–ª—å–∑—É–µ–º ASK)
            price_t2_r = best_prices[triangle['pair_ab']]['ask'] # A/B. B - quote. Amount_A = Amount_B / Price_A/B
            amount_a_r = (amount_b_r / price_t2_r) * fee_multiplier
            path_coins_r = [triangle['coin_c'], triangle['coin_b'], triangle['coin_a'], triangle['coin_c']]
            path_pairs_r = [triangle['pair_bc'], triangle['pair_ab'], triangle['pair_ac']]
        else:
            # Pair: B/A. Sell B for A (–∏—Å–ø–æ–ª—å–∑—É–µ–º BID)
            price_t2_r = best_prices[triangle['pair_ab']]['bid']
            amount_a_r = amount_b_r * price_t2_r * fee_multiplier
            path_coins_r = [triangle['coin_c'], triangle['coin_b'], triangle['coin_a'], triangle['coin_c']]
            path_pairs_r = [triangle['pair_bc'], triangle['pair_ab'], triangle['pair_ac']]
            
        # T3: –ü—Ä–æ–¥–∞—Ç—å A –∑–∞ USDT (Coin_A/USDT, –∏—Å–ø–æ–ª—å–∑—É–µ–º BID)
        price_t3_r = best_prices[triangle['pair_ac']]['bid']
        final_usdt_r = amount_a_r * price_t3_r * fee_multiplier
        
        profit_percent_r = (final_usdt_r / start_amount_usdt - 1) * 100
        net_profit_usd_r = final_usdt_r - start_amount_usdt
        
        path_name_r = f"{path_coins_r[0]}_{path_coins_r[1]}_{path_coins_r[2]}_REVERSE"
        
        profit_results[path_name_r] = {
            "percent": profit_percent_r,
            "net": net_profit_usd_r,
            "final_usdt": final_usdt_r,
            "path_coins": path_coins_r,
            "path_pairs": path_pairs_r
        }
    except Exception as e:
        logger.debug(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø—É—Ç–∏ 2 ({exchange_id}): {e}")

    return profit_results.get(path_name, None), profit_results.get(path_name_r, None)


async def send_triangular_arbitrage_notification(exchange_id: str, triangle_name: str, path_info: dict):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–æ–º –∞—Ä–±–∏—Ç—Ä–∞–∂–µ"""
    
    arb_type = 'TRIANGULAR'
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ—Ä–æ–≥–∏
    threshold = SETTINGS[arb_type]['THRESHOLD_PERCENT']
    max_threshold = SETTINGS[arb_type]['MAX_THRESHOLD_PERCENT']
    min_net_profit = SETTINGS[arb_type]['MIN_NET_PROFIT_USD']
    
    spread = path_info['percent']
    net_profit = path_info['net']
    
    if not (threshold <= spread <= max_threshold and net_profit >= min_net_profit):
        return
        
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞
    # base: COIN1_COIN2_COIN3_PATH
    base_key = f"{path_info['path_coins'][0]}_{path_info['path_coins'][1]}_{path_info['path_coins'][2]}_{triangle_name.split('_')[-1]}"
    key = f"{arb_type}_{exchange_id}_{base_key}"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç (–µ—Å–ª–∏ —Å–≤—è–∑–∫–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ –∞–∫—Ç–∏–≤–Ω–∞)
    if key in sent_arbitrage_opportunities:
        update_current_arbitrage_opportunities(
            arb_type, base_key, exchange_id, None, spread, 0, 0, 0, 0,
            SETTINGS[arb_type]['ENTRY_AMOUNT_USDT'], None, profit_min=path_info, profit_max=path_info
        )
        return

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    utc_plus_3 = timezone(timedelta(hours=3))
    current_time_str = datetime.now(utc_plus_3).strftime('%H:%M:%S')

    path_str = " ‚Üí ".join(path_info['path_coins'])
    pairs_str = " | ".join(path_info['path_pairs'])
    entry_amount_str = f"${SETTINGS[arb_type]['ENTRY_AMOUNT_USDT']:.2f}"
    profit_str = f"${net_profit:.2f}"
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    exchange_config = SPOT_EXCHANGES[exchange_id]
    url = exchange_config['url_format'](path_info['path_pairs'][0]) # –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–µ—Ä–≤—É—é –ø–∞—Ä—É –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞

    message = (
        f"üî± <b>–¢–†–ï–£–ì–û–õ–¨–ù–´–ô –ê–†–ë–ò–¢–†–ê–ñ!</b> üöÄ\n\n"
        f"üèõ <b>–ë–∏—Ä–∂–∞:</b> <code>{exchange_id.upper()}</code>\n"
        f"üîÑ <b>–ü—É—Ç—å:</b> <code>{path_str}</code>\n"
        f"‚ú® <b>–ü—Ä–æ—Ñ–∏—Ç:</b> <code>{spread:.2f}%</code>\n"
        f"üíµ <b>–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å:</b> <code>{profit_str}</code>\n"
        f"üí∞ <b>–°—É–º–º–∞ –≤—Ö–æ–¥–∞:</b> <code>{entry_amount_str}</code>\n\n"
        f"üîó <b><a href='{url}'>–û—Ç–∫—Ä—ã—Ç—å —Ç–æ—Ä–≥–∏ ({path_info['path_pairs'][0]})</a></b>\n\n"
        f"‚öôÔ∏è <i>–ü–∞—Ä—ã: {pairs_str}</i>\n"
        f"‚è∞ <i>{current_time_str}</i>"
    )

    await send_telegram_message(message)
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–æ–º –∞—Ä–±–∏—Ç—Ä–∞–∂–µ –Ω–∞ {exchange_id}: {spread:.2f}%")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑–∫—É –≤ sent_arbitrage_opportunities
    add_opportunity_to_sent(
        arb_type, base_key, exchange_id, exchange_id, spread, 0, 0, 0, 0,
        SETTINGS[arb_type]['ENTRY_AMOUNT_USDT'], None, profit_min=path_info, profit_max=path_info
    )

    
async def check_triangular_arbitrage():
    """–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–Ω—É—Ç—Ä–∏–±–∏—Ä–∂–µ–≤–æ–≥–æ (—Ç—Ä–µ—É–≥–æ–ª—å–Ω–æ–≥–æ) –∞—Ä–±–∏—Ç—Ä–∞–∂–∞."""
    arb_type = 'TRIANGULAR'
    
    if not SETTINGS[arb_type]['ENABLED']:
        logger.info(f"–¢—Ä–µ—É–≥–æ–ª—å–Ω—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂ –≤—ã–∫–ª—é—á–µ–Ω. –ü—Ä–æ–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏.")
        await asyncio.sleep(SETTINGS[arb_type]['CHECK_INTERVAL'])
        return

    check_interval = SETTINGS[arb_type]['CHECK_INTERVAL']
    
    while True:
        try:
            start_time = time.time()
            active_exchanges = {
                id: SPOT_EXCHANGES[id]
                for id, config in SETTINGS['EXCHANGES'].items()
                if config['ENABLED'] and id in SPOT_EXCHANGES
            }
            
            tasks = []
            
            for exchange_id, exchange_config in active_exchanges.items():
                if exchange_id not in SPOT_EXCHANGES_LOADED:
                    try:
                        markets = await exchange_config['api'].load_markets()
                        SPOT_EXCHANGES_LOADED[exchange_id] = markets
                    except Exception as e:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä—ã–Ω–∫–∏ –¥–ª—è {exchange_id}: {e}")
                        continue
                else:
                    markets = SPOT_EXCHANGES_LOADED[exchange_id]
                    
                # 1. –ù–∞–π—Ç–∏ –≤—Å–µ —Ç—Ä–µ—É–≥–æ–ª—å–Ω—ã–µ —Å–≤—è–∑–∫–∏ —Å USDT
                triangles = find_triangular_pairs(exchange_id, markets)
                
                # 2. –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥–æ–π —Å–≤—è–∑–∫–∏
                for triangle in triangles:
                    tasks.append(calculate_triangular_profit(exchange_id, exchange_config, triangle))

            if tasks:
                results = await asyncio.gather(*tasks, return_exceptions=True)
                
                for i, result in enumerate(results):
                    if isinstance(result, Exception):
                        # –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞: {result}")
                        continue
                        
                    profit1, profit2 = result
                    
                    if profit1:
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ö–æ–¥–∏–º–æ—Å—Ç—å —Ü–µ–Ω
                        duration = update_arbitrage_duration(arb_type, profit1['path_coins'][0] + "_" + profit1['path_coins'][1] + "_" + profit1['path_coins'][2] + "_FORWARD", active_exchanges[exchange_id], None, profit1['percent'])
                        if duration is not None:
                            await send_price_convergence_notification(arb_type, profit1['path_coins'][0] + "_" + profit1['path_coins'][1] + "_" + profit1['path_coins'][2] + "_FORWARD", active_exchanges[exchange_id], None, 0, 0, profit1['percent'], duration=duration)
                        else:
                            await send_triangular_arbitrage_notification(exchange_id, "FORWARD", profit1)

                    if profit2:
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ö–æ–¥–∏–º–æ—Å—Ç—å —Ü–µ–Ω
                        duration = update_arbitrage_duration(arb_type, profit2['path_coins'][0] + "_" + profit2['path_coins'][1] + "_" + profit2['path_coins'][2] + "_REVERSE", active_exchanges[exchange_id], None, profit2['percent'])
                        if duration is not None:
                            await send_price_convergence_notification(arb_type, profit2['path_coins'][0] + "_" + profit2['path_coins'][1] + "_" + profit2['path_coins'][2] + "_REVERSE", active_exchanges[exchange_id], None, 0, 0, profit2['percent'], duration=duration)
                        else:
                            await send_triangular_arbitrage_notification(exchange_id, "REVERSE", profit2)

            end_time = time.time()
            elapsed_time = end_time - start_time
            sleep_time = max(0, check_interval - elapsed_time)
            
            logger.info(f"–¢—Ä–µ—É–≥–æ–ª—å–Ω—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂: –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {elapsed_time:.2f} —Å–µ–∫. –°–ø–∏–º {sleep_time:.2f} —Å–µ–∫.")
            await asyncio.sleep(sleep_time)

        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞: {e}")
            await asyncio.sleep(check_interval) # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
# –ö–æ–Ω–µ—Ü NEW


# ... (–ó–¥–µ—Å—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞: check_spot_arbitrage, check_futures_arbitrage, check_spot_futures_arbitrage) ...
# –Ø –Ω–µ –±—É–¥—É –∏—Ö –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å, –Ω–æ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—é, —á—Ç–æ –æ–Ω–∏ –∏–¥—É—Ç –∑–¥–µ—Å—å.

async def check_spot_arbitrage():
    # ... (–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
    pass
async def check_futures_arbitrage():
    # ... (–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
    pass
async def check_spot_futures_arbitrage():
    # ... (–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
    pass
async def load_markets_for_arbitrage():
    # ... (–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
    pass


# ... (–û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–æ—Ç–∞, –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥, –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏ –ø–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    if str(update.effective_chat.id) not in TELEGRAM_CHAT_IDS:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return ConversationHandler.END

    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –∫—Ä–∏–ø—Ç–æ–∞—Ä–±–∏—Ç—Ä–∞–∂–µ. "
        "–Ø –±—É–¥—É –∏—Å–∫–∞—Ç—å –¥–ª—è —Ç–µ–±—è –≤—ã–≥–æ–¥–Ω—ã–µ —Å–≤—è–∑–∫–∏ –∏ —Å–æ–æ–±—â–∞—Ç—å –æ –Ω–∏—Ö. "
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()
    )
    return SETTINGS_MENU


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
    message = (
        "‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å</b>\n\n"
        "üìà <b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∫–∏</b>: –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, "
        "–∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram, –Ω–æ –µ—â–µ –Ω–µ —Å–æ—à–ª–∏—Å—å.\n\n"
        "üîß <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>: –ü–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ—Ä–æ–≥–∏, –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –∏ –±–∏—Ä–∂–∏ –¥–ª—è:\n"
        "  - –°–ø–æ—Ç–æ–≤–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ (–º–µ–∂–¥—É –±–∏—Ä–∂–∞–º–∏)\n"
        "  - –§—å—é—á–µ—Ä—Å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ (–º–µ–∂–¥—É –±–∏—Ä–∂–∞–º–∏)\n"
        "  - –°–ø–æ—Ç-–§—å—é—á–µ—Ä—Å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ (–Ω–∞ —Ä–∞–∑–Ω—ã—Ö –±–∏—Ä–∂–∞—Ö)\n"
        "  - <b>–¢—Ä–µ—É–≥–æ–ª—å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ (–≤–Ω—É—Ç—Ä–∏ –æ–¥–Ω–æ–π –±–∏—Ä–∂–∏)</b>\n"
        "  - –í–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –±–∏—Ä–∂.\n\n"
        "üìä <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞</b>: –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π.\n\n"
        "üîô <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>: –í–æ–∑–≤—Ä–∞—Ç –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é."
    )
    await update.message.reply_text(message, parse_mode="HTML", reply_markup=get_main_keyboard())


async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞."""
    settings_copy = SETTINGS.copy()
    
    # –°–∫—Ä—ã–≤–∞–µ–º API-–æ–±—ä–µ–∫—Ç—ã –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –≤—ã–≤–æ–¥–∞
    exchange_status = []
    for ex_id, ex_conf in settings_copy['EXCHANGES'].items():
        exchange_status.append(f"  - {ex_id.upper()}: {'–í–ö–õ' if ex_conf['ENABLED'] else '–í–´–ö–õ'}")

    message = (
        "üìä <b>–°—Ç–∞—Ç—É—Å –∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>\n\n"
        "ü§ñ <b>–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å</b>\n"
        f"  - –°–ø–æ—Ç: {'‚úÖ –í–ö–õ' if settings_copy['SPOT']['ENABLED'] else '‚ùå –í–´–ö–õ'}\n"
        f"  - –§—å—é—á–µ—Ä—Å—ã: {'‚úÖ –í–ö–õ' if settings_copy['FUTURES']['ENABLED'] else '‚ùå –í–´–ö–õ'}\n"
        f"  - –°–ø–æ—Ç-–§—å—é—á–µ—Ä—Å—ã: {'‚úÖ –í–ö–õ' if settings_copy['SPOT_FUTURES']['ENABLED'] else '‚ùå –í–´–ö–õ'}\n"
        f"  - –¢—Ä–µ—É–≥–æ–ª—å–Ω—ã–π: {'‚úÖ –í–ö–õ' if settings_copy['TRIANGULAR']['ENABLED'] else '‚ùå –í–´–ö–õ'}\n\n" # <-- NEW
        "‚öôÔ∏è <b>–°–ø–æ—Ç –ê—Ä–±–∏—Ç—Ä–∞–∂</b>\n"
        f"  - –ü–æ—Ä–æ–≥: {settings_copy['SPOT']['THRESHOLD_PERCENT']}%\n"
        f"  - –ò–Ω—Ç–µ—Ä–≤–∞–ª: {settings_copy['SPOT']['CHECK_INTERVAL']}—Å\n"
        f"  - –ú–∏–Ω. –ø—Ä–∏–±—ã–ª—å: ${settings_copy['SPOT']['MIN_NET_PROFIT_USD']}\n\n"
        "‚öôÔ∏è <b>–¢—Ä–µ—É–≥–æ–ª—å–Ω—ã–π –ê—Ä–±–∏—Ç—Ä–∞–∂</b>\n" # <-- NEW
        f"  - –ü–æ—Ä–æ–≥: {settings_copy['TRIANGULAR']['THRESHOLD_PERCENT']}%\n"
        f"  - –ò–Ω—Ç–µ—Ä–≤–∞–ª: {settings_copy['TRIANGULAR']['CHECK_INTERVAL']}—Å\n"
        f"  - –°—É–º–º–∞ –≤—Ö–æ–¥–∞: ${settings_copy['TRIANGULAR']['ENTRY_AMOUNT_USDT']}\n"
        f"  - –ú–∏–Ω. –ø—Ä–∏–±—ã–ª—å: ${settings_copy['TRIANGULAR']['MIN_NET_PROFIT_USD']}\n\n"
        "üèõ <b>–°—Ç–∞—Ç—É—Å –±–∏—Ä–∂</b>\n"
        f"{'\\n'.join(exchange_status)}\n\n"
        f"<i>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now(timezone(timedelta(hours=3))).strftime('%H:%M:%S')}</i>"
    )
    await update.message.reply_text(message, parse_mode="HTML", reply_markup=get_main_keyboard())


async def actual_opportunities_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ —Å–≤—è–∑–∫–∏."""
    message = await get_current_arbitrage_opportunities()
    await update.message.reply_text(message, parse_mode="HTML", reply_markup=get_main_keyboard())


async def enter_settings(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í—Ö–æ–¥ –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    await update.message.reply_text("–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫. –í—ã–±–µ—Ä–∏ —Ç–∏–ø –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –∏–ª–∏ –±–∏—Ä–∂–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
                                    reply_markup=get_settings_keyboard())
    return SETTINGS_MENU


async def handle_settings(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    text = update.message.text

    if text == "üöÄÔ∏è –°–ø–æ—Ç":
        await update.message.reply_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –°–ø–æ—Ç–æ–≤–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞. –í—ã–±–µ—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
                                        reply_markup=get_spot_settings_keyboard())
        context.user_data['arb_type'] = 'SPOT'
        return SPOT_SETTINGS
    
    # ... (–û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫)
    elif text == "üìä –§—å—é—á–µ—Ä—Å—ã":
        await update.message.reply_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –§—å—é—á–µ—Ä—Å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞. –í—ã–±–µ—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
                                        reply_markup=get_futures_settings_keyboard())
        context.user_data['arb_type'] = 'FUTURES'
        return FUTURES_SETTINGS
    elif text == "‚ÜîÔ∏è –°–ø–æ—Ç-–§—å—é—á–µ—Ä—Å—ã":
        await update.message.reply_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –°–ø–æ—Ç-–§—å—é—á–µ—Ä—Å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞. –í—ã–±–µ—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
                                        reply_markup=get_spot_futures_settings_keyboard())
        context.user_data['arb_type'] = 'SPOT_FUTURES'
        return SPOT_FUTURES_SETTINGS
    elif text == "üî± –¢—Ä–µ—É–≥–æ–ª—å–Ω—ã–π": # <-- NEW
        await update.message.reply_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¢—Ä–µ—É–≥–æ–ª—å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞. –í—ã–±–µ—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
                                        reply_markup=get_triangular_settings_keyboard())
        context.user_data['arb_type'] = 'TRIANGULAR'
        return TRIANGULAR_SETTINGS # <-- NEW STATE
    # ... (–û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫)
    elif text == "üèõ –ë–∏—Ä–∂–∏":
        global LAST_EXCHANGE_SETTINGS
        LAST_EXCHANGE_SETTINGS = SETTINGS['EXCHANGES'].copy()
        await update.message.reply_text("–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –±–∏—Ä–∂. –ù–∞–∂–º–∏ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å:",
                                        reply_markup=get_exchange_settings_keyboard())
        return EXCHANGE_SETTINGS_MENU
    elif text == "üîÑ –°–±—Ä–æ—Å":
        global SETTINGS
        SETTINGS = load_settings()
        save_settings(SETTINGS)
        await update.message.reply_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –¥–æ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.",
                                        reply_markup=get_settings_keyboard())
        return SETTINGS_MENU
    elif text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await update.message.reply_text("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_keyboard())
        return ConversationHandler.END
    else:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.",
                                        reply_markup=get_settings_keyboard())
        return SETTINGS_MENU


async def handle_spot_settings(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –≤ –º–µ–Ω—é —Å–ø–æ—Ç–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    text = update.message.text
    arb_type = context.user_data.get('arb_type')

    if text == "üîô –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏":
        await update.message.reply_text("–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.", reply_markup=get_settings_keyboard())
        return SETTINGS_MENU
    
    # ... (–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è SPOT)
    
    # ... (–õ–æ–≥–∏–∫–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏ –µ–≥–æ —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    parts = text.split(':')
    setting_name = parts[0].strip()
    
    setting_key = None
    input_type = None

    if setting_name == "–ü–æ—Ä–æ–≥":
        setting_key = "THRESHOLD_PERCENT"
        input_type = float
    elif setting_name == "–ú–∞–∫—Å. –ø–æ—Ä–æ–≥":
        setting_key = "MAX_THRESHOLD_PERCENT"
        input_type = float
    elif setting_name == "–ò–Ω—Ç–µ—Ä–≤–∞–ª":
        setting_key = "CHECK_INTERVAL"
        input_type = int
    elif setting_name == "–ú–∏–Ω. —Å—É–º–º–∞":
        setting_key = "MIN_ENTRY_AMOUNT_USDT"
        input_type = float
    elif setting_name == "–ú–∞–∫—Å. —Å—É–º–º–∞":
        setting_key = "MAX_ENTRY_AMOUNT_USDT"
        input_type = float
    elif setting_name == "–ü—Ä–∏–±—ã–ª—å":
        setting_key = "MIN_NET_PROFIT_USD"
        input_type = float
    elif setting_name == "–í–ª–∏—è–Ω–∏–µ":
        setting_key = "MAX_IMPACT_PERCENT"
        input_type = float
    elif setting_name == "–°—Ç–∞–∫–∞–Ω":
        setting_key = "ORDER_BOOK_DEPTH"
        input_type = int
    elif setting_name == "–û–±—ä–µ–º":
        setting_key = "MIN_VOLUME_USD"
        input_type = float
    elif setting_name == "–°—Ö–æ–¥–∏–º–æ—Å—Ç—å":
        setting_key = "PRICE_CONVERGENCE_THRESHOLD"
        input_type = float
    elif setting_name == "–£–≤–µ–¥. —Å—Ä–∞–≤–Ω.":
        setting_key = "PRICE_CONVERGENCE_ENABLED"
        current_status = SETTINGS[arb_type].get(setting_key)
        new_status = not current_status
        SETTINGS[arb_type][setting_key] = new_status
        save_settings(SETTINGS)
        await update.message.reply_text(f"–°—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–ª—è {arb_type} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {'–í–ö–õ' if new_status else '–í–´–ö–õ'}.",
                                        reply_markup=get_spot_settings_keyboard())
        return SPOT_SETTINGS
    elif setting_name == "–°—Ç–∞—Ç—É—Å":
        setting_key = "ENABLED"
        current_status = SETTINGS[arb_type].get(setting_key)
        new_status = not current_status
        SETTINGS[arb_type][setting_key] = new_status
        save_settings(SETTINGS)
        await update.message.reply_text(f"–°—Ç–∞—Ç—É—Å {arb_type} –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {'–í–ö–õ' if new_status else '–í–´–ö–õ'}.",
                                        reply_markup=get_spot_settings_keyboard())
        return SPOT_SETTINGS

    if setting_key:
        context.user_data['setting_key'] = setting_key
        context.user_data['input_type'] = input_type
        context.user_data['return_state_func'] = get_spot_settings_keyboard
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –æ–±—ä–µ–º–∞
        if setting_key == "MIN_VOLUME_USD":
            await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –≤ USD (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1000000):")
        else:
            await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è '{setting_name}' ({input_type.__name__}):")
        
        return SETTING_VALUE

    await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.")
    return SPOT_SETTINGS


async def handle_futures_settings(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # ... (–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
    pass
    # –û—Å—Ç–∞–≤–ª–µ–Ω pass, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥, –Ω–æ –≤ —Ä–µ–∞–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–Ω–∞—è –ª–æ–≥–∏–∫–∞
    
    text = update.message.text
    arb_type = context.user_data.get('arb_type')

    if text == "üîô –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏":
        await update.message.reply_text("–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.", reply_markup=get_settings_keyboard())
        return SETTINGS_MENU
        
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏ –µ–≥–æ —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    parts = text.split(':')
    setting_name = parts[0].strip()
    
    setting_key = None
    input_type = None

    if setting_name == "–ü–æ—Ä–æ–≥":
        setting_key = "THRESHOLD_PERCENT"
        input_type = float
    elif setting_name == "–ú–∞–∫—Å. –ø–æ—Ä–æ–≥":
        setting_key = "MAX_THRESHOLD_PERCENT"
        input_type = float
    elif setting_name == "–ò–Ω—Ç–µ—Ä–≤–∞–ª":
        setting_key = "CHECK_INTERVAL"
        input_type = int
    elif setting_name == "–ú–∏–Ω. —Å—É–º–º–∞":
        setting_key = "MIN_ENTRY_AMOUNT_USDT"
        input_type = float
    elif setting_name == "–ú–∞–∫—Å. —Å—É–º–º–∞":
        setting_key = "MAX_ENTRY_AMOUNT_USDT"
        input_type = float
    elif setting_name == "–ü—Ä–∏–±—ã–ª—å":
        setting_key = "MIN_NET_PROFIT_USD"
        input_type = float
    elif setting_name == "–û–±—ä–µ–º":
        setting_key = "MIN_VOLUME_USD"
        input_type = float
    elif setting_name == "–°—Ö–æ–¥–∏–º–æ—Å—Ç—å":
        setting_key = "PRICE_CONVERGENCE_THRESHOLD"
        input_type = float
    elif setting_name == "–£–≤–µ–¥. —Å—Ä–∞–≤–Ω.":
        setting_key = "PRICE_CONVERGENCE_ENABLED"
        current_status = SETTINGS[arb_type].get(setting_key)
        new_status = not current_status
        SETTINGS[arb_type][setting_key] = new_status
        save_settings(SETTINGS)
        await update.message.reply_text(f"–°—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–ª—è {arb_type} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {'–í–ö–õ' if new_status else '–í–´–ö–õ'}.",
                                        reply_markup=get_futures_settings_keyboard())
        return FUTURES_SETTINGS
    elif setting_name == "–°—Ç–∞—Ç—É—Å":
        setting_key = "ENABLED"
        current_status = SETTINGS[arb_type].get(setting_key)
        new_status = not current_status
        SETTINGS[arb_type][setting_key] = new_status
        save_settings(SETTINGS)
        await update.message.reply_text(f"–°—Ç–∞—Ç—É—Å {arb_type} –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {'–í–ö–õ' if new_status else '–í–´–ö–õ'}.",
                                        reply_markup=get_futures_settings_keyboard())
        return FUTURES_SETTINGS

    if setting_key:
        context.user_data['setting_key'] = setting_key
        context.user_data['input_type'] = input_type
        context.user_data['return_state_func'] = get_futures_settings_keyboard
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –æ–±—ä–µ–º–∞
        if setting_key == "MIN_VOLUME_USD":
            await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –≤ USD (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1000000):")
        else:
            await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è '{setting_name}' ({input_type.__name__}):")
        
        return SETTING_VALUE

    await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.")
    return FUTURES_SETTINGS

async def handle_spot_futures_settings(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # ... (–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
    pass
    # –û—Å—Ç–∞–≤–ª–µ–Ω pass, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥, –Ω–æ –≤ —Ä–µ–∞–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–Ω–∞—è –ª–æ–≥–∏–∫–∞
    
    text = update.message.text
    arb_type = context.user_data.get('arb_type')

    if text == "üîô –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏":
        await update.message.reply_text("–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.", reply_markup=get_settings_keyboard())
        return SETTINGS_MENU
        
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏ –µ–≥–æ —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    parts = text.split(':')
    setting_name = parts[0].strip()
    
    setting_key = None
    input_type = None

    if setting_name == "–ü–æ—Ä–æ–≥":
        setting_key = "THRESHOLD_PERCENT"
        input_type = float
    elif setting_name == "–ú–∞–∫—Å. –ø–æ—Ä–æ–≥":
        setting_key = "MAX_THRESHOLD_PERCENT"
        input_type = float
    elif setting_name == "–ò–Ω—Ç–µ—Ä–≤–∞–ª":
        setting_key = "CHECK_INTERVAL"
        input_type = int
    elif setting_name == "–ú–∏–Ω. —Å—É–º–º–∞":
        setting_key = "MIN_ENTRY_AMOUNT_USDT"
        input_type = float
    elif setting_name == "–ú–∞–∫—Å. —Å—É–º–º–∞":
        setting_key = "MAX_ENTRY_AMOUNT_USDT"
        input_type = float
    elif setting_name == "–ü—Ä–∏–±—ã–ª—å":
        setting_key = "MIN_NET_PROFIT_USD"
        input_type = float
    elif setting_name == "–û–±—ä–µ–º":
        setting_key = "MIN_VOLUME_USD"
        input_type = float
    elif setting_name == "–°—Ö–æ–¥–∏–º–æ—Å—Ç—å":
        setting_key = "PRICE_CONVERGENCE_THRESHOLD"
        input_type = float
    elif setting_name == "–£–≤–µ–¥. —Å—Ä–∞–≤–Ω.":
        setting_key = "PRICE_CONVERGENCE_ENABLED"
        current_status = SETTINGS[arb_type].get(setting_key)
        new_status = not current_status
        SETTINGS[arb_type][setting_key] = new_status
        save_settings(SETTINGS)
        await update.message.reply_text(f"–°—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–ª—è {arb_type} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {'–í–ö–õ' if new_status else '–í–´–ö–õ'}.",
                                        reply_markup=get_spot_futures_settings_keyboard())
        return SPOT_FUTURES_SETTINGS
    elif setting_name == "–°—Ç–∞—Ç—É—Å":
        setting_key = "ENABLED"
        current_status = SETTINGS[arb_type].get(setting_key)
        new_status = not current_status
        SETTINGS[arb_type][setting_key] = new_status
        save_settings(SETTINGS)
        await update.message.reply_text(f"–°—Ç–∞—Ç—É—Å {arb_type} –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {'–í–ö–õ' if new_status else '–í–´–ö–õ'}.",
                                        reply_markup=get_spot_futures_settings_keyboard())
        return SPOT_FUTURES_SETTINGS

    if setting_key:
        context.user_data['setting_key'] = setting_key
        context.user_data['input_type'] = input_type
        context.user_data['return_state_func'] = get_spot_futures_settings_keyboard
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –æ–±—ä–µ–º–∞
        if setting_key == "MIN_VOLUME_USD":
            await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –≤ USD (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1000000):")
        else:
            await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è '{setting_name}' ({input_type.__name__}):")
        
        return SETTING_VALUE

    await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.")
    return SPOT_FUTURES_SETTINGS


# NEW: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
async def handle_triangular_settings(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞."""
    text = update.message.text
    arb_type = context.user_data.get('arb_type')

    if text == "üîô –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏":
        await update.message.reply_text("–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.", reply_markup=get_settings_keyboard())
        return SETTINGS_MENU
        
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏ –µ–≥–æ —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    parts = text.split(':')
    setting_name = parts[0].strip()
    
    setting_key = None
    input_type = None

    if setting_name == "–ü–æ—Ä–æ–≥":
        setting_key = "THRESHOLD_PERCENT"
        input_type = float
    elif setting_name == "–ú–∞–∫—Å. –ø–æ—Ä–æ–≥":
        setting_key = "MAX_THRESHOLD_PERCENT"
        input_type = float
    elif setting_name == "–ò–Ω—Ç–µ—Ä–≤–∞–ª":
        setting_key = "CHECK_INTERVAL"
        input_type = int
    elif setting_name == "–°—É–º–º–∞ –≤—Ö–æ–¥–∞":
        setting_key = "ENTRY_AMOUNT_USDT"
        input_type = float
    elif setting_name == "–ü—Ä–∏–±—ã–ª—å":
        setting_key = "MIN_NET_PROFIT_USD"
        input_type = float
    elif setting_name == "–û–±—ä–µ–º":
        setting_key = "MIN_VOLUME_USD"
        input_type = float
    elif setting_name == "–°—Ö–æ–¥–∏–º–æ—Å—Ç—å":
        setting_key = "CONVERGENCE_THRESHOLD"
        input_type = float
    elif setting_name == "–£–≤–µ–¥. —Å—Ä–∞–≤–Ω.":
        setting_key = "PRICE_CONVERGENCE_ENABLED"
        current_status = SETTINGS[arb_type].get(setting_key)
        new_status = not current_status
        SETTINGS[arb_type][setting_key] = new_status
        save_settings(SETTINGS)
        await update.message.reply_text(f"–°—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–ª—è {arb_type} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {'–í–ö–õ' if new_status else '–í–´–ö–õ'}.",
                                        reply_markup=get_triangular_settings_keyboard())
        return TRIANGULAR_SETTINGS
    elif setting_name == "–°—Ç–∞—Ç—É—Å":
        setting_key = "ENABLED"
        current_status = SETTINGS[arb_type].get(setting_key)
        new_status = not current_status
        SETTINGS[arb_type][setting_key] = new_status
        save_settings(SETTINGS)
        await update.message.reply_text(f"–°—Ç–∞—Ç—É—Å {arb_type} –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {'–í–ö–õ' if new_status else '–í–´–ö–õ'}.",
                                        reply_markup=get_triangular_settings_keyboard())
        return TRIANGULAR_SETTINGS

    if setting_key:
        context.user_data['setting_key'] = setting_key
        context.user_data['input_type'] = input_type
        context.user_data['return_state_func'] = get_triangular_settings_keyboard
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –æ–±—ä–µ–º–∞
        if setting_key == "MIN_VOLUME_USD":
            await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –≤ USD (–Ω–∞–ø—Ä–∏–º–µ—Ä, 50000):")
        else:
            await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è '{setting_name}' ({input_type.__name__}):")
        
        return SETTING_VALUE

    await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.")
    return TRIANGULAR_SETTINGS
# –ö–æ–Ω–µ—Ü NEW


async def handle_exchange_settings(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–∏—Ä–∂."""
    text = update.message.text

    if text == "üîô –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏":
        await update.message.reply_text("–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.", reply_markup=get_settings_keyboard())
        return SETTINGS_MENU

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –±–∏—Ä–∂–∏
    match = re.match(r"(\w+): (‚úÖ|‚ùå)", text)
    if match:
        exchange_id = match.group(1).lower()
        
        if exchange_id in SETTINGS['EXCHANGES']:
            current_status = SETTINGS['EXCHANGES'][exchange_id]['ENABLED']
            new_status = not current_status
            SETTINGS['EXCHANGES'][exchange_id]['ENABLED'] = new_status
            save_settings(SETTINGS)
            
            # –û—á–∏—â–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∏, —á—Ç–æ–±—ã –±–æ—Ç –∏—Ö –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏–ª
            if exchange_id in SPOT_EXCHANGES_LOADED:
                del SPOT_EXCHANGES_LOADED[exchange_id]
            if exchange_id in FUTURES_EXCHANGES_LOADED:
                del FUTURES_EXCHANGES_LOADED[exchange_id]

            await update.message.reply_text(f"–°—Ç–∞—Ç—É—Å –±–∏—Ä–∂–∏ **{exchange_id.upper()}** –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {'–í–ö–õ' if new_status else '–í–´–ö–õ'}.",
                                            reply_markup=get_exchange_settings_keyboard(),
                                            parse_mode="Markdown")
        else:
            await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –±–∏—Ä–∂–∞.", reply_markup=get_exchange_settings_keyboard())
        return EXCHANGE_SETTINGS_MENU

    await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.")
    return EXCHANGE_SETTINGS_MENU


async def handle_setting_value(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."""
    text = update.message.text
    arb_type = context.user_data.get('arb_type')
    setting_key = context.user_data.get('setting_key')
    input_type = context.user_data.get('input_type')
    return_state_func = context.user_data.get('return_state_func')
    
    # ... (–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è SETTING_VALUE)
    
    try:
        new_value = input_type(text)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –æ–±—ä–µ–º–∞, –µ—Å–ª–∏ —ç—Ç–æ float, –Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å int
        if setting_key == "MIN_VOLUME_USD":
            new_value = int(new_value)
            
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if setting_key in SETTINGS[arb_type]:
            SETTINGS[arb_type][setting_key] = new_value
            save_settings(SETTINGS)
            await update.message.reply_text(
                f"–ó–Ω–∞—á–µ–Ω–∏–µ '{setting_key}' –¥–ª—è {arb_type} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ **{new_value}**.",
                reply_markup=return_state_func(),
                parse_mode="Markdown"
            )
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
            if arb_type == 'SPOT':
                return SPOT_SETTINGS
            elif arb_type == 'FUTURES':
                return FUTURES_SETTINGS
            elif arb_type == 'SPOT_FUTURES':
                return SPOT_FUTURES_SETTINGS
            elif arb_type == 'TRIANGULAR': # <-- NEW
                return TRIANGULAR_SETTINGS
            else:
                return SETTINGS_MENU
        else:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ '{setting_key}'.",
                                            reply_markup=return_state_func())
            return SETTING_VALUE
            
    except ValueError:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {input_type.__name__}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return SETTING_VALUE
    except Exception as e:
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}",
                                        reply_markup=return_state_func())
        return SETTING_VALUE


async def handle_coin_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # ... (–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
    pass
    # –û—Å—Ç–∞–≤–ª–µ–Ω pass, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥, –Ω–æ –≤ —Ä–µ–∞–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–Ω–∞—è –ª–æ–≥–∏–∫–∞


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫, –≤—ã–∑–≤–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏."""
    logger.error("–ü—Ä–æ–∏–∑–æ—à–ª–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: %s", context.error)

    if update and update.effective_message:
        await update.effective_message.reply_text(
            f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {context.error}'
        )


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä."""
    await update.message.reply_text(
        '–û—Ç–º–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.', reply_markup=get_main_keyboard()
    )
    return ConversationHandler.END


def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞")

    # –°–æ–∑–¥–∞–µ–º Application –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–º—É —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º ConversationHandler –¥–ª—è –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏$'), enter_settings)],
        states={
            SETTINGS_MENU: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_settings)
            ],
            SPOT_SETTINGS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_spot_settings)
            ],
            FUTURES_SETTINGS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_futures_settings)
            ],
            SPOT_FUTURES_SETTINGS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_spot_futures_settings)
            ],
            TRIANGULAR_SETTINGS: [ # <-- NEW
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_triangular_settings) # <-- NEW HANDLER
            ],
            EXCHANGE_SETTINGS_MENU: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_exchange_settings)
            ],
            SETTING_VALUE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_setting_value)
            ],
            COIN_SELECTION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_coin_selection)
            ]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("status", status_command))
    application.add_handler(MessageHandler(filters.Regex('^üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞$'), status_command))
    application.add_handler(MessageHandler(filters.Regex('^üìà –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∫–∏$'), actual_opportunities_command))
    application.add_handler(conv_handler)
    application.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤ —Ñ–æ–Ω–µ
    loop = asyncio.get_event_loop()
    loop.create_task(check_spot_arbitrage())
    loop.create_task(check_futures_arbitrage())
    loop.create_task(check_spot_futures_arbitrage())
    loop.create_task(check_triangular_arbitrage()) # <-- NEW

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()


if __name__ == '__main__':
    # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –±—ã–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –∫–æ–¥–µ
    # –ï—Å–ª–∏ —Ç—ã –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –ø–æ–ª–Ω—ã–π –∫–æ–¥, –∑–∞–º–µ–Ω–∏ —ç—Ç–∏ –∑–∞–≥–ª—É—à–∫–∏ –Ω–∞ —Å–≤–æ–∏ —Ä–∞–±–æ—á–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏.
    async def check_spot_arbitrage():
        while True: await asyncio.sleep(60); logger.debug("Spot arb placeholder")
    async def check_futures_arbitrage():
        while True: await asyncio.sleep(60); logger.debug("Futures arb placeholder")
    async def check_spot_futures_arbitrage():
        while True: await asyncio.sleep(60); logger.debug("Spot-Futures arb placeholder")
        
    main()
# –ö–æ–Ω–µ—Ü –ø–æ–ª–Ω–æ–≥–æ –∫–æ–¥–∞