import ccxt
import asyncio
from telegram import Bot, Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
    ConversationHandler
)
from telegram.error import TelegramError
import logging
from datetime import datetime, timezone, timedelta
from collections import defaultdict
import html
import re
import json
import os
import time
import aiohttp
import requests

# –û–±—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = "7990034184:AAFTx--E5GE0NIPA0Yghr6KpBC80aVtSACs"
TELEGRAM_CHAT_IDS = ["1167694150", "7916502470", "5381553894", "1111230981"]

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è DEX-CEX –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
DEFAULT_ARBITRAGE_SETTINGS = {
    "THRESHOLD_PERCENT": 2.0,
    "MAX_THRESHOLD_PERCENT": 20,
    "CHECK_INTERVAL": 30,
    "MIN_VOLUME_USD": 50000,
    "MIN_ENTRY_AMOUNT_USDT": 10,
    "MAX_ENTRY_AMOUNT_USDT": 500,
    "MIN_NET_PROFIT_USD": 5,
    "ENABLED": True,
    "PRICE_CONVERGENCE_THRESHOLD": 0.5,
    "PRICE_CONVERGENCE_ENABLED": True,
    "MAX_DEX_RESULTS": 10
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ CEX –±–∏—Ä–∂
CEX_SETTINGS = {
    "bybit": {"ENABLED": True},
    "mexc": {"ENABLED": True},
    "okx": {"ENABLED": True},
    "gate": {"ENABLED": True},
    "bitget": {"ENABLED": True},
    "kucoin": {"ENABLED": True},
    "bingx": {"ENABLED": True},
    "phemex": {"ENABLED": True},
    "coinex": {"ENABLED": True},
    "blofin": {"ENABLED": True}
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SETTINGS_MENU, ARBITRAGE_SETTINGS, EXCHANGE_SETTINGS_MENU, SETTING_VALUE = range(4)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger("DEXCEXArbBot")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
SHARED_BOT = None
CEX_EXCHANGES_LOADED = {}
SETTINGS = {
    "ARBITRAGE": DEFAULT_ARBITRAGE_SETTINGS.copy(),
    "CEX": CEX_SETTINGS.copy()
}

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è CEX —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö –±–∏—Ä–∂
CEX_FUTURES_EXCHANGES = {
    "bybit": {
        "api": ccxt.bybit({"enableRateLimit": True}),
        "symbol_format": lambda s: f"{s}/USDT:USDT",
        "is_futures": lambda m: (m.get('swap', False) or m.get('future', False)) and m['settle'] == 'USDT',
        "taker_fee": 0.0006,
        "maker_fee": 0.0001,
        "url_format": lambda s: f"https://www.bybit.com/trade/usdt/{s.replace('/', '').replace(':USDT', '')}",
        "emoji": "üìä"
    },
    "mexc": {
        "api": ccxt.mexc({"enableRateLimit": True}),
        "symbol_format": lambda s: f"{s}/USDT:USDT",
        "is_futures": lambda m: m.get('swap', False) and 'USDT' in m['id'],
        "taker_fee": 0.0006,
        "maker_fee": 0.0002,
        "url_format": lambda s: f"https://futures.mexc.com/exchange/{s.replace('/', '_').replace(':USDT', '')}",
        "emoji": "üìä"
    },
    "okx": {
        "api": ccxt.okx({"enableRateLimit": True}),
        "symbol_format": lambda s: f"{s}/USDT:USDT",
        "is_futures": lambda m: (m.get('swap', False) or m.get('future', False)) and m['settle'] == 'USDT',
        "taker_fee": 0.0005,
        "maker_fee": 0.0002,
        "url_format": lambda s: f"https://www.okx.com/trade-swap/{s.replace('/', '-').replace(':USDT', '').lower()}",
        "emoji": "üìä"
    },
    "gate": {
        "api": ccxt.gateio({"enableRateLimit": True}),
        "symbol_format": lambda s: f"{s}/USDT:USDT",
        "is_futures": lambda m: m.get('swap', False) and '_USDT' in m['id'],
        "taker_fee": 0.0006,
        "maker_fee": 0.0002,
        "url_format": lambda s: f"https://www.gate.io/futures_trade/{s.replace('/', '_').replace(':USDT', '')}",
        "emoji": "üìä"
    },
    "bitget": {
        "api": ccxt.bitget({"enableRateLimit": True}),
        "symbol_format": lambda s: f"{s}/USDT:USDT",
        "is_futures": lambda m: m.get('swap', False) and 'USDT' in m['id'],
        "taker_fee": 0.0006,
        "maker_fee": 0.0002,
        "url_format": lambda s: f"https://www.bitget.com/ru/futures/{s.replace('/', '').replace(':USDT', '')}",
        "emoji": "üìä"
    },
    "kucoin": {
        "api": ccxt.kucoin({"enableRateLimit": True}),
        "symbol_format": lambda s: f"{s}/USDT:USDT",
        "is_futures": lambda m: m.get('swap', False) and 'USDT' in m['id'],
        "taker_fee": 0.0006,
        "maker_fee": 0.0002,
        "url_format": lambda s: f"https://www.kucoin.com/futures/trade/{s.replace('/', '-').replace(':USDT', '')}",
        "emoji": "üìä"
    },
    "bingx": {
        "api": ccxt.bingx({"enableRateLimit": True}),
        "symbol_format": lambda s: f"{s}/USDT:USDT",
        "is_futures": lambda m: m.get('swap', False) and 'USDT' in m['id'],
        "taker_fee": 0.0005,
        "maker_fee": 0.0002,
        "url_format": lambda s: f"https://bingx.com/en-us/futures/{s.replace('/', '')}",
        "emoji": "üìä"
    },
    "phemex": {
        "api": ccxt.phemex({
            "enableRateLimit": True,
            "options": {
                "defaultType": "swap",
            }
        }),
        "symbol_format": lambda s: f"{s}/USDT:USDT",
        "is_futures": lambda m: m.get('swap', False) and m['settle'] == 'USDT',
        "taker_fee": 0.0006,
        "maker_fee": 0.0002,
        "url_format": lambda s: f"https://phemex.com/futures/trade/{s.replace('/', '').replace(':USDT', '')}",
        "emoji": "üìä"
    },
    "coinex": {
        "api": ccxt.coinex({"enableRateLimit": True}),
        "symbol_format": lambda s: f"{s}/USDT:USDT",
        "is_futures": lambda m: (m.get('swap', False) or m.get('future', False)) and m['settle'] == 'USDT',
        "taker_fee": 0.001,
        "maker_fee": 0.001,
        "url_format": lambda s: f"https://www.coinex.com/perpetual/{s.replace('/', '-').replace(':USDT', '')}",
        "emoji": "üìä"
    },
    "blofin": {
        "api": ccxt.blofin({
            "enableRateLimit": True,
            "options": {
                "defaultType": "swap"
            }
        }),
        "symbol_format": lambda s: f"{s}/USDT:USDT",
        "is_futures": lambda m: (
                m.get('type') in ['swap', 'future'] and
                m.get('settle') == 'USDT' and
                m.get('linear', False)
        ),
        "taker_fee": 0.0006,
        "maker_fee": 0.0002,
        "url_format": lambda s: f"https://www.blofin.com/futures/{s.replace('/', '-').replace(':USDT', '')}",
        "emoji": "üìä"
    }
}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
sent_arbitrage_opportunities = defaultdict(dict)
current_arbitrage_opportunities = defaultdict(dict)
arbitrage_start_times = defaultdict(dict)

# Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    return ReplyKeyboardMarkup([
        [KeyboardButton("üìà –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∫–∏")], 
        [KeyboardButton("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
        [KeyboardButton("üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞"), KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
    ], resize_keyboard=True)

def get_settings_keyboard():
    return ReplyKeyboardMarkup([
        [KeyboardButton("üöÄ DEX-CEX –ê—Ä–±–∏—Ç—Ä–∞–∂")],
        [KeyboardButton("üèõ CEX –ë–∏—Ä–∂–∏"), KeyboardButton("üîÑ –°–±—Ä–æ—Å")],
        [KeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ], resize_keyboard=True)

def get_arbitrage_settings_keyboard():
    arb = SETTINGS['ARBITRAGE']
    return ReplyKeyboardMarkup([
        [KeyboardButton(f"–ü–æ—Ä–æ–≥: {arb['THRESHOLD_PERCENT']}%"),
         KeyboardButton(f"–ú–∞–∫—Å. –ø–æ—Ä–æ–≥: {arb['MAX_THRESHOLD_PERCENT']}%")],
        [KeyboardButton(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª: {arb['CHECK_INTERVAL']}—Å"),
         KeyboardButton(f"–û–±—ä–µ–º: ${arb['MIN_VOLUME_USD'] / 1000:.0f}K")],
        [KeyboardButton(f"–ú–∏–Ω. —Å—É–º–º–∞: ${arb['MIN_ENTRY_AMOUNT_USDT']}"),
         KeyboardButton(f"–ú–∞–∫—Å. —Å—É–º–º–∞: ${arb['MAX_ENTRY_AMOUNT_USDT']}")],
        [KeyboardButton(f"–ü—Ä–∏–±—ã–ª—å: ${arb['MIN_NET_PROFIT_USD']}"),
         KeyboardButton(f"–°—Ç–∞—Ç—É—Å: {'–í–ö–õ' if arb['ENABLED'] else '–í–´–ö–õ'}")],
        [KeyboardButton(f"DEX –ª–∏–º–∏—Ç: {arb['MAX_DEX_RESULTS']}"),
         KeyboardButton(f"–£–≤–µ–¥. —Å—Ä–∞–≤–Ω.: {'üîî' if arb['PRICE_CONVERGENCE_ENABLED'] else 'üîï'}")],
        [KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")]
    ], resize_keyboard=True)

def get_exchange_settings_keyboard():
    keyboard = []
    row = []
    for i, (exchange, config) in enumerate(SETTINGS['CEX'].items()):
        status = "‚úÖ" if config['ENABLED'] else "‚ùå"
        row.append(KeyboardButton(f"{exchange}: {status}"))
        if (i + 1) % 2 == 0:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    keyboard.append([KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def send_telegram_message(message: str, chat_id: str = None, reply_markup: ReplyKeyboardMarkup = None):
    global SHARED_BOT
    if not SHARED_BOT:
        SHARED_BOT = Bot(token=TELEGRAM_TOKEN)

    targets = [chat_id] if chat_id else TELEGRAM_CHAT_IDS

    for target_id in targets:
        try:
            await SHARED_BOT.send_message(
                chat_id=target_id,
                text=message,
                parse_mode="HTML",
                disable_web_page_preview=True,
                reply_markup=reply_markup
            )
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {target_id}")
        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ {target_id}: {e}")

def format_duration(seconds):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    if seconds < 60:
        return f"{int(seconds)} —Å–µ–∫"
    elif seconds < 3600:
        minutes = int(seconds // 60)
        seconds_remaining = int(seconds % 60)
        return f"{minutes} –º–∏–Ω {seconds_remaining} —Å–µ–∫"
    else:
        hours = int(seconds // 3600)
        minutes = int((seconds % 3600) // 60)
        return f"{hours} —á {minutes} –º–∏–Ω"

def add_opportunity_to_sent(base: str, cex: str, dex_data: dict, spread: float,
                            cex_price: float, dex_price: float, profit: dict):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–≤—è–∑–∫—É –≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"""
    key = f"{base}_{cex}_{dex_data['dexId']}"
    current_time = time.time()

    sent_arbitrage_opportunities[key] = {
        'base': base,
        'cex': cex,
        'dex_data': dex_data,
        'spread': spread,
        'cex_price': cex_price,
        'dex_price': dex_price,
        'profit': profit,
        'start_time': current_time,
        'last_updated': current_time
    }

    current_arbitrage_opportunities[key] = sent_arbitrage_opportunities[key].copy()
    arbitrage_start_times[key] = current_time

    logger.info(f"–°–≤—è–∑–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ: {key}")

async def get_dex_screener_data():
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å DexScreener –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä"""
    try:
        url = "https://api.dexscreener.com/latest/dex/pairs?limit=100"
        async with aiohttp.ClientSession() as session:
            async with session.get(url, timeout=30) as response:
                if response.status == 200:
                    data = await response.json()
                    return data.get('pairs', [])
                else:
                    logger.error(f"DexScreener API error: {response.status}")
                    return []
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å DexScreener: {e}")
        return []

def filter_dex_pairs(pairs, min_volume_usd=50000):
    """–§–∏–ª—å—Ç—Ä—É–µ—Ç DEX –ø–∞—Ä—ã –ø–æ –æ–±—ä–µ–º—É –∏ –¥—Ä—É–≥–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º"""
    filtered = []
    
    for pair in pairs:
        try:
            # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            if not pair.get('priceUsd'):
                continue
                
            volume = pair.get('volume', {}).get('h24', 0)
            if volume < min_volume_usd:
                continue
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
            liquidity = pair.get('liquidity', {}).get('usd', 0)
            if liquidity < min_volume_usd * 0.1:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
                continue
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–µ–Ω–∞ —Ä–∞–∑—É–º–Ω–∞—è
            price = float(pair['priceUsd'])
            if price <= 0 or price > 100000:  # –§–∏–ª—å—Ç—Ä —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω
                continue
                
            filtered.append(pair)
            
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–∞—Ä—ã: {e}")
            continue
            
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–±—ä–µ–º—É –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    filtered.sort(key=lambda x: x.get('volume', {}).get('h24', 0), reverse=True)
    return filtered[:SETTINGS['ARBITRAGE']['MAX_DEX_RESULTS']]

async def fetch_cex_futures_price(exchange, symbol: str):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ñ—å—é—á–µ—Ä—Å–Ω—É—é —Ü–µ–Ω—É —Å CEX –±–∏—Ä–∂–∏"""
    try:
        ticker = await asyncio.get_event_loop().run_in_executor(
            None, exchange.fetch_ticker, symbol
        )

        if ticker and ticker.get('last'):
            price = float(ticker['last'])
            volume = ticker.get('quoteVolume', ticker.get('baseVolume', 0))
            if volume and isinstance(volume, (int, float)):
                volume = float(volume)
            else:
                volume = 0
                
            return {
                'price': price,
                'volume': volume,
                'symbol': symbol
            }
        return None
    except Exception as e:
        logger.debug(f"–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö {symbol} –Ω–∞ {exchange.id}: {e}")
        return None

async def load_cex_exchanges():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç CEX –±–∏—Ä–∂–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    global CEX_EXCHANGES_LOADED

    exchanges = {}
    for name, config in CEX_FUTURES_EXCHANGES.items():
        if not SETTINGS['CEX'][name]['ENABLED']:
            continue

        try:
            exchange = await asyncio.get_event_loop().run_in_executor(
                None, lambda: ccxt.__dict__[name]({'enableRateLimit': True})
            )
            await asyncio.get_event_loop().run_in_executor(
                None, exchange.load_markets
            )
            exchanges[name] = {
                "api": exchange,
                "config": config
            }
            logger.info(f"{name.upper()} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ {name}: {e}")

    CEX_EXCHANGES_LOADED = exchanges
    return exchanges

def calculate_profit(dex_price: float, cex_price: float, amount: float, 
                    dex_fee: float = 0.003, cex_fee: float = 0.0006) -> dict:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏–±—ã–ª—å –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ DEX -> CEX"""
    try:
        # DEX -> CEX –∞—Ä–±–∏—Ç—Ä–∞–∂ (–ø–æ–∫—É–ø–∞–µ–º –Ω–∞ DEX, –ø—Ä–æ–¥–∞–µ–º –Ω–∞ CEX)
        if dex_price < cex_price:
            buy_cost = amount * dex_price * (1 + dex_fee)
            sell_revenue = amount * cex_price * (1 - cex_fee)
            net_profit = sell_revenue - buy_cost
            profit_percent = (net_profit / buy_cost) * 100 if buy_cost > 0 else 0
            
            return {
                "net": net_profit,
                "percent": profit_percent,
                "type": "DEX_TO_CEX",
                "entry_amount": amount * dex_price
            }
        # CEX -> DEX –∞—Ä–±–∏—Ç—Ä–∞–∂ (–ø–æ–∫—É–ø–∞–µ–º –Ω–∞ CEX, –ø—Ä–æ–¥–∞–µ–º –Ω–∞ DEX)
        else:
            buy_cost = amount * cex_price * (1 + cex_fee)
            sell_revenue = amount * dex_price * (1 - dex_fee)
            net_profit = sell_revenue - buy_cost
            profit_percent = (net_profit / buy_cost) * 100 if buy_cost > 0 else 0
            
            return {
                "net": net_profit,
                "percent": profit_percent,
                "type": "CEX_TO_DEX",
                "entry_amount": amount * cex_price
            }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏–±—ã–ª–∏: {e}")
        return {"net": 0, "percent": 0, "type": "UNKNOWN", "entry_amount": 0}

async def check_dex_cex_arbitrage():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –º–µ–∂–¥—É DEX –∏ CEX"""
    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ DEX-CEX –∞—Ä–±–∏—Ç—Ä–∞–∂–∞")

    if not SETTINGS['ARBITRAGE']['ENABLED']:
        logger.info("DEX-CEX –∞—Ä–±–∏—Ç—Ä–∞–∂ –æ—Ç–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º CEX –±–∏—Ä–∂–∏
    await load_cex_exchanges()

    if not CEX_EXCHANGES_LOADED:
        logger.error("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö CEX –±–∏—Ä–∂")
        return

    while SETTINGS['ARBITRAGE']['ENABLED']:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å DexScreener
            dex_pairs = await get_dex_screener_data()
            if not dex_pairs:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å DexScreener")
                await asyncio.sleep(SETTINGS['ARBITRAGE']['CHECK_INTERVAL'])
                continue

            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–∞—Ä—ã
            filtered_pairs = filter_dex_pairs(dex_pairs, SETTINGS['ARBITRAGE']['MIN_VOLUME_USD'])
            logger.info(f"–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {len(filtered_pairs)} DEX –ø–∞—Ä")

            found_opportunities = 0

            for dex_pair in filtered_pairs:
                try:
                    base_symbol = dex_pair.get('baseToken', {}).get('symbol', '').upper()
                    if not base_symbol or len(base_symbol) > 10:
                        continue

                    dex_price = float(dex_pair['priceUsd'])
                    dex_volume = dex_pair.get('volume', {}).get('h24', 0)
                    dex_liquidity = dex_pair.get('liquidity', {}).get('usd', 0)

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≤—Å–µ—Ö CEX –±–∏—Ä–∂–∞—Ö
                    for cex_name, cex_data in CEX_EXCHANGES_LOADED.items():
                        try:
                            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª –¥–ª—è CEX
                            symbol = cex_data["config"]["symbol_format"](base_symbol)
                            
                            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É —Å CEX
                            cex_ticker = await fetch_cex_futures_price(cex_data["api"], symbol)
                            if not cex_ticker or not cex_ticker['price']:
                                continue

                            cex_price = cex_ticker['price']
                            cex_volume = cex_ticker.get('volume', 0)

                            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ø—Ä–µ–¥
                            spread = abs(cex_price - dex_price) / min(cex_price, dex_price) * 100

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
                            if spread >= SETTINGS['ARBITRAGE']['THRESHOLD_PERCENT']:
                                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã
                                min_profit = calculate_profit(
                                    dex_price, cex_price, 
                                    SETTINGS['ARBITRAGE']['MIN_ENTRY_AMOUNT_USDT'] / min(dex_price, cex_price)
                                )
                                
                                max_profit = calculate_profit(
                                    dex_price, cex_price,
                                    SETTINGS['ARBITRAGE']['MAX_ENTRY_AMOUNT_USDT'] / min(dex_price, cex_price)
                                )

                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –ø—Ä–∏–±—ã–ª—å
                                if max_profit['net'] >= SETTINGS['ARBITRAGE']['MIN_NET_PROFIT_USD']:
                                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                                    utc_plus_3 = timezone(timedelta(hours=3))
                                    current_time = datetime.now(utc_plus_3).strftime('%H:%M:%S')

                                    safe_base = html.escape(base_symbol)
                                    cex_url = cex_data["config"]["url_format"](symbol.replace(':USDT', ''))
                                    dex_url = dex_pair.get('url', f"https://dexscreener.com/{dex_pair.get('chainId', 'ethereum')}/{dex_pair.get('pairAddress', '')}")

                                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
                                    if dex_price < cex_price:
                                        direction = "üü¢ DEX ‚Üí üî¥ CEX"
                                        action = f"–ö—É–ø–∏—Ç—å –Ω–∞ DEX ‚Üí –ü—Ä–æ–¥–∞—Ç—å –Ω–∞ {cex_name.upper()}"
                                        profit_color = "üü¢"
                                    else:
                                        direction = "üî¥ CEX ‚Üí üü¢ DEX" 
                                        action = f"–ö—É–ø–∏—Ç—å –Ω–∞ {cex_name.upper()} ‚Üí –ü—Ä–æ–¥–∞—Ç—å –Ω–∞ DEX"
                                        profit_color = "üî¥"

                                    message = (
                                        f"üöÄ <b>DEX-CEX –ê–†–ë–ò–¢–†–ê–ñ</b>\n\n"
                                        f"‚ñ´Ô∏è <b>–ú–æ–Ω–µ—Ç–∞:</b> <code>{safe_base}</code>\n"
                                        f"‚ñ´Ô∏è <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {direction}\n"
                                        f"‚ñ´Ô∏è <b>–†–∞–∑–Ω–∏—Ü–∞ —Ü–µ–Ω:</b> {spread:.2f}%\n\n"
                                        
                                        f"üîÑ <b>–î–µ–π—Å—Ç–≤–∏–µ:</b> {action}\n\n"
                                        
                                        f"üèõ <b><a href='{dex_url}'>DEX</a>:</b>\n"
                                        f"   üí∞ –¶–µ–Ω–∞: <code>${dex_price:.8f}</code>\n"
                                        f"   üìä –û–±—ä–µ–º 24—á: <code>${dex_volume:,.0f}</code>\n"
                                        f"   üíß –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: <code>${dex_liquidity:,.0f}</code>\n"
                                        f"   üîó –ë–ª–æ–∫—á–µ–π–Ω: {dex_pair.get('chainId', 'N/A')}\n\n"
                                        
                                        f"üìä <b><a href='{cex_url}'>{cex_name.upper()}</a>:</b>\n"
                                        f"   üí∞ –¶–µ–Ω–∞: <code>${cex_price:.8f}</code>\n"
                                        f"   üìä –û–±—ä–µ–º 24—á: <code>${cex_volume:,.0f}</code>\n\n"
                                        
                                        f"üí∞ <b>–ü—Ä–∏–±—ã–ª—å:</b>\n"
                                        f"   ‚ñ´Ô∏è –°—É–º–º–∞ –≤—Ö–æ–¥–∞: ${SETTINGS['ARBITRAGE']['MIN_ENTRY_AMOUNT_USDT']:.0f}-${SETTINGS['ARBITRAGE']['MAX_ENTRY_AMOUNT_USDT']:.0f}\n"
                                        f"   ‚ñ´Ô∏è –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: ${min_profit['net']:.2f}-${max_profit['net']:.2f}\n"
                                        f"   ‚ñ´Ô∏è –ü—Ä–æ—Ü–µ–Ω—Ç: {max_profit['percent']:.2f}%\n\n"
                                        
                                        f"‚è∞ {current_time}\n"
                                    )

                                    logger.info(f"–ù–∞–π–¥–µ–Ω–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å: {base_symbol} ({spread:.2f}%)")

                                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                                    await send_telegram_message(message)

                                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å
                                    add_opportunity_to_sent(
                                        base_symbol, cex_name, dex_pair, spread,
                                        cex_price, dex_price, max_profit
                                    )

                                    found_opportunities += 1

                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {base_symbol} –Ω–∞ {cex_name}: {e}")

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ DEX –ø–∞—Ä—ã {dex_pair.get('pairAddress')}: {e}")

            logger.info(f"–¶–∏–∫–ª DEX-CEX –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {found_opportunities}")
            await asyncio.sleep(SETTINGS['ARBITRAGE']['CHECK_INTERVAL'])

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ DEX-CEX –∞—Ä–±–∏—Ç—Ä–∞–∂–∞: {e}")
            await asyncio.sleep(60)

async def get_current_arbitrage_opportunities():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"""
    if not current_arbitrage_opportunities:
        return "üìä <b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ DEX-CEX –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ —Å–≤—è–∑–∫–∏</b>\n\n" \
               "‚è≥ –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ."

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
    opportunities_by_coin = defaultdict(list)
    
    for key, opportunity in current_arbitrage_opportunities.items():
        opportunities_by_coin[opportunity['base']].append(opportunity)

    utc_plus_3 = timezone(timedelta(hours=3))
    current_time_str = datetime.now(utc_plus_3).strftime('%H:%M:%S')

    message = "üìä <b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ DEX-CEX –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ —Å–≤—è–∑–∫–∏</b>\n\n"

    for coin, opportunities in opportunities_by_coin.items():
        message += f"<b>ü™ô {coin}:</b>\n"
        
        for opp in opportunities[:3]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 3 —Å–≤—è–∑–∫–∞–º–∏ –Ω–∞ –º–æ–Ω–µ—Ç—É
            duration = time.time() - opp['start_time']
            duration_str = format_duration(duration)
            
            if opp['profit']['type'] == 'DEX_TO_CEX':
                direction = "DEX ‚Üí CEX"
            else:
                direction = "CEX ‚Üí DEX"

            message += (
                f"   ‚ñ´Ô∏è <b>{opp['cex'].upper()}</b>: {opp['spread']:.2f}%\n"
                f"      üìà –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}\n"
                f"      üí∞ –ü—Ä–∏–±—ã–ª—å: ${opp['profit']['net']:.2f}\n"
                f"      ‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_str}\n\n"
            )

    message += f"‚è∞ <i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {current_time_str}</i>\n"
    message += f"üìà <i>–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–≤—è–∑–æ–∫: {len(current_arbitrage_opportunities)}</i>"

    return message

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = str(update.effective_user.id)
    if user_id not in TELEGRAM_CHAT_IDS:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    await update.message.reply_text(
        "ü§ñ <b>DEX-CEX Futures Arbitrage Bot</b>\n\n"
        "–ë–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –º–µ–∂–¥—É DEX –∏ CEX —Ñ—å—é—á–µ—Ä—Å–∞–º–∏\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º:",
        parse_mode="HTML",
        reply_markup=get_main_keyboard()
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = str(update.effective_user.id)
    if user_id not in TELEGRAM_CHAT_IDS:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    text = update.message.text

    if text == "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        await update.message.reply_text(
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ DEX-CEX –±–æ—Ç–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            parse_mode="HTML",
            reply_markup=get_settings_keyboard()
        )
        return SETTINGS_MENU

    elif text == "üìà –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∫–∏":
        await update.message.reply_text(
            "‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö...",
            parse_mode="HTML"
        )

        response = await get_current_arbitrage_opportunities()

        await update.message.reply_text(
            text=response,
            parse_mode="HTML",
            disable_web_page_preview=True,
            reply_markup=get_main_keyboard()
        )
        return

    elif text == "üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞":
        arb_status = "‚úÖ –í–ö–õ" if SETTINGS['ARBITRAGE']['ENABLED'] else "‚ùå –í–´–ö–õ"
        enabled_cex = [name for name, config in SETTINGS['CEX'].items() if config['ENABLED']]
        cex_status = ", ".join(enabled_cex) if enabled_cex else "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö CEX"

        await update.message.reply_text(
            f"ü§ñ <b>–°—Ç–∞—Ç—É—Å DEX-CEX –±–æ—Ç–∞</b>\n\n"
            f"üöÄ DEX-CEX –∞—Ä–±–∏—Ç—Ä–∞–∂: {arb_status}\n"
            f"üèõ –ê–∫—Ç–∏–≤–Ω—ã–µ CEX: {cex_status}\n"
            f"üìà –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–≤—è–∑–æ–∫: {len(current_arbitrage_opportunities)}",
            parse_mode="HTML",
            reply_markup=get_main_keyboard()
        )
        return

    elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        await update.message.reply_text(
            "ü§ñ <b>DEX-CEX Futures Arbitrage Bot</b>\n\n"
            "üîç <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥</b> - –±–æ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –∏—â–µ—Ç –∞—Ä–±–∏—Ç—Ä–∞–∂ –º–µ–∂–¥—É DEX –∏ CEX —Ñ—å—é—á–µ—Ä—Å–∞–º–∏\n"
            "üìà <b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∫–∏</b> - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏\n"
            "üîß <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b> - –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –∏ CEX –±–∏—Ä–∂–∏\n\n"
            "–ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç:\n"
            "‚Ä¢ DexScreener –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —Å DEX\n"
            "‚Ä¢ CEX –±–∏—Ä–∂–∏ –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö —Ü–µ–Ω\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏ —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–π",
            parse_mode="HTML",
            reply_markup=get_main_keyboard()
        )
        return

    await update.message.reply_text(
        "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
        reply_markup=get_main_keyboard()
    )

async def handle_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    text = update.message.text

    if text == "üöÄ DEX-CEX –ê—Ä–±–∏—Ç—Ä–∞–∂":
        await update.message.reply_text(
            "üöÄ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ DEX-CEX –∞—Ä–±–∏—Ç—Ä–∞–∂–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
            parse_mode="HTML",
            reply_markup=get_arbitrage_settings_keyboard()
        )
        return ARBITRAGE_SETTINGS

    elif text == "üèõ CEX –ë–∏—Ä–∂–∏":
        await update.message.reply_text(
            "üèõ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ CEX –±–∏—Ä–∂</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –±–∏—Ä–∂—É –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è:",
            parse_mode="HTML",
            reply_markup=get_exchange_settings_keyboard()
        )
        return EXCHANGE_SETTINGS_MENU

    elif text == "üîÑ –°–±—Ä–æ—Å":
        SETTINGS['ARBITRAGE'] = DEFAULT_ARBITRAGE_SETTINGS.copy()
        SETTINGS['CEX'] = CEX_SETTINGS.copy()
        await update.message.reply_text(
            "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
            reply_markup=get_settings_keyboard()
        )
        return SETTINGS_MENU

    elif text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await update.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_keyboard()
        )
        return ConversationHandler.END

    await update.message.reply_text(
        "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
        reply_markup=get_settings_keyboard()
    )
    return SETTINGS_MENU

async def handle_arbitrage_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞"""
    text = update.message.text

    if text == "üîô –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏":
        await update.message.reply_text(
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ DEX-CEX –±–æ—Ç–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            parse_mode="HTML",
            reply_markup=get_settings_keyboard()
        )
        return SETTINGS_MENU

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if text.startswith("–ü–æ—Ä–æ–≥:"):
        context.user_data['setting'] = ('ARBITRAGE', 'THRESHOLD_PERCENT')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ—Ä–æ–≥–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ (—Ç–µ–∫—É—â–µ–µ: {SETTINGS['ARBITRAGE']['THRESHOLD_PERCENT']}%):"
        )
        return SETTING_VALUE

    elif text.startswith("–ú–∞–∫—Å. –ø–æ—Ä–æ–≥:"):
        context.user_data['setting'] = ('ARBITRAGE', 'MAX_THRESHOLD_PERCENT')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞ (—Ç–µ–∫—É—â–µ–µ: {SETTINGS['ARBITRAGE']['MAX_THRESHOLD_PERCENT']}%):"
        )
        return SETTING_VALUE

    elif text.startswith("–ò–Ω—Ç–µ—Ä–≤–∞–ª:"):
        context.user_data['setting'] = ('ARBITRAGE', 'CHECK_INTERVAL')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Ç–µ–∫—É—â–µ–µ: {SETTINGS['ARBITRAGE']['CHECK_INTERVAL']} —Å–µ–∫):"
        )
        return SETTING_VALUE

    elif text.startswith("–û–±—ä–µ–º:"):
        context.user_data['setting'] = ('ARBITRAGE', 'MIN_VOLUME_USD')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–º–∞ (—Ç–µ–∫—É—â–µ–µ: ${SETTINGS['ARBITRAGE']['MIN_VOLUME_USD']}):"
        )
        return SETTING_VALUE

    elif text.startswith("–ú–∏–Ω. —Å—É–º–º–∞:"):
        context.user_data['setting'] = ('ARBITRAGE', 'MIN_ENTRY_AMOUNT_USDT')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã –≤—Ö–æ–¥–∞ (—Ç–µ–∫—É—â–µ–µ: ${SETTINGS['ARBITRAGE']['MIN_ENTRY_AMOUNT_USDT']}):"
        )
        return SETTING_VALUE

    elif text.startswith("–ú–∞–∫—Å. —Å—É–º–º–∞:"):
        context.user_data['setting'] = ('ARBITRAGE', 'MAX_ENTRY_AMOUNT_USDT')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã –≤—Ö–æ–¥–∞ (—Ç–µ–∫—É—â–µ–µ: ${SETTINGS['ARBITRAGE']['MAX_ENTRY_AMOUNT_USDT']}):"
        )
        return SETTING_VALUE

    elif text.startswith("–ü—Ä–∏–±—ã–ª—å:"):
        context.user_data['setting'] = ('ARBITRAGE', 'MIN_NET_PROFIT_USD')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏ (—Ç–µ–∫—É—â–µ–µ: ${SETTINGS['ARBITRAGE']['MIN_NET_PROFIT_USD']}):"
        )
        return SETTING_VALUE

    elif text.startswith("DEX –ª–∏–º–∏—Ç:"):
        context.user_data['setting'] = ('ARBITRAGE', 'MAX_DEX_RESULTS')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ª–∏–º–∏—Ç–∞ DEX —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (—Ç–µ–∫—É—â–µ–µ: {SETTINGS['ARBITRAGE']['MAX_DEX_RESULTS']}):"
        )
        return SETTING_VALUE

    elif text.startswith("–£–≤–µ–¥. —Å—Ä–∞–≤–Ω.:"):
        SETTINGS['ARBITRAGE']['PRICE_CONVERGENCE_ENABLED'] = not SETTINGS['ARBITRAGE']['PRICE_CONVERGENCE_ENABLED']
        status = "üîî –í–ö–õ" if SETTINGS['ARBITRAGE']['PRICE_CONVERGENCE_ENABLED'] else "üîï –í–´–ö–õ"
        await update.message.reply_text(
            f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ —Ü–µ–Ω {status}",
            reply_markup=get_arbitrage_settings_keyboard()
        )
        return ARBITRAGE_SETTINGS

    elif text.startswith("–°—Ç–∞—Ç—É—Å:"):
        SETTINGS['ARBITRAGE']['ENABLED'] = not SETTINGS['ARBITRAGE']['ENABLED']
        status = "–í–ö–õ" if SETTINGS['ARBITRAGE']['ENABLED'] else "–í–´–ö–õ"
        await update.message.reply_text(
            f"‚úÖ DEX-CEX –∞—Ä–±–∏—Ç—Ä–∞–∂ {status}",
            reply_markup=get_arbitrage_settings_keyboard()
        )
        return ARBITRAGE_SETTINGS

    await update.message.reply_text(
        "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
        reply_markup=get_arbitrage_settings_keyboard()
    )
    return ARBITRAGE_SETTINGS

async def handle_exchange_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–∏—Ä–∂"""
    text = update.message.text

    if text == "üîô –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏":
        await update.message.reply_text(
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ DEX-CEX –±–æ—Ç–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            parse_mode="HTML",
            reply_markup=get_settings_keyboard()
        )
        return SETTINGS_MENU

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –±–∏—Ä–∂
    for exchange in SETTINGS['CEX'].keys():
        if text.startswith(f"{exchange}:"):
            SETTINGS['CEX'][exchange]['ENABLED'] = not SETTINGS['CEX'][exchange]['ENABLED']
            status = "‚úÖ –í–ö–õ" if SETTINGS['CEX'][exchange]['ENABLED'] else "‚ùå –í–´–ö–õ"
            await update.message.reply_text(
                f"‚úÖ –ë–∏—Ä–∂–∞ {exchange.upper()} {status}",
                reply_markup=get_exchange_settings_keyboard()
            )
            return EXCHANGE_SETTINGS_MENU

    await update.message.reply_text(
        "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
        reply_markup=get_exchange_settings_keyboard()
    )
    return EXCHANGE_SETTINGS_MENU

async def handle_setting_value(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    text = update.message.text
    setting_info = context.user_data.get('setting')

    if not setting_info:
        await update.message.reply_text(
            "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=get_settings_keyboard()
        )
        return SETTINGS_MENU

    category, setting_key = setting_info

    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        if setting_key in ['THRESHOLD_PERCENT', 'MAX_THRESHOLD_PERCENT']:
            value = float(text)
        elif setting_key in ['CHECK_INTERVAL', 'MAX_DEX_RESULTS']:
            value = int(text)
        elif setting_key in ['MIN_VOLUME_USD', 'MIN_ENTRY_AMOUNT_USDT', 'MAX_ENTRY_AMOUNT_USDT', 'MIN_NET_PROFIT_USD']:
            value = float(text)
        else:
            value = text

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        SETTINGS[category][setting_key] = value

        await update.message.reply_text(
            f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ {setting_key} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {text}",
            reply_markup=get_arbitrage_settings_keyboard() if category == 'ARBITRAGE' else get_exchange_settings_keyboard()
        )

        return ARBITRAGE_SETTINGS if category == 'ARBITRAGE' else EXCHANGE_SETTINGS_MENU

    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.",
            reply_markup=get_arbitrage_settings_keyboard() if category == 'ARBITRAGE' else get_exchange_settings_keyboard()
        )
        return SETTING_VALUE

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞"""
    await update.message.reply_text(
        "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=get_main_keyboard()
    )
    return ConversationHandler.END

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}", exc_info=context.error)

    if update and update.effective_message:
        await update.effective_message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard()
        )

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # Conversation handler –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
        ],
        states={
            SETTINGS_MENU: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_settings)
            ],
            ARBITRAGE_SETTINGS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_arbitrage_settings)
            ],
            EXCHANGE_SETTINGS_MENU: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_exchange_settings)
            ],
            SETTING_VALUE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_setting_value)
            ]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(conv_handler)
    application.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º DEX-CEX –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—É—é –∑–∞–¥–∞—á—É –≤ —Ñ–æ–Ω–µ
    loop = asyncio.get_event_loop()
    loop.create_task(check_dex_cex_arbitrage())

    logger.info("DEX-CEX –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
